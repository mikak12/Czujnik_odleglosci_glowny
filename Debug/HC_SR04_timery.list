
HC_SR04_timery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b18  08009b18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b20  08009b20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d0  20000010  08009b38  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200017e0  08009b38  000217e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002062a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003afa  00000000  00000000  0004066a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a70  00000000  00000000  00044168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b8  00000000  00000000  00045bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db6c  00000000  00000000  00047490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001543f  00000000  00000000  00074ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001167e6  00000000  00000000  0008a43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a0c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071dc  00000000  00000000  001a0c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009690 	.word	0x08009690

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08009690 	.word	0x08009690

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	d1ed      	bne.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b994 	b.w	8000f08 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f828 	bl	8000c3c <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <__aeabi_d2ulz+0x3c>)
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcc1 	bl	8000588 <__aeabi_dmul>
 8000c06:	f000 f981 	bl	8000f0c <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc42 	bl	8000494 <__aeabi_ui2d>
 8000c10:	2200      	movs	r2, #0
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <__aeabi_d2ulz+0x40>)
 8000c14:	f7ff fcb8 	bl	8000588 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fafa 	bl	8000218 <__aeabi_dsub>
 8000c24:	f000 f972 	bl	8000f0c <__aeabi_d2uiz>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	4310      	orrs	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	bdd0      	pop	{r4, r6, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	3df00000 	.word	0x3df00000
 8000c38:	41f00000 	.word	0x41f00000

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	4688      	mov	r8, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14b      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4615      	mov	r5, r2
 8000c4e:	d967      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0720 	rsb	r7, r2, #32
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c62:	4095      	lsls	r5, r2
 8000c64:	ea47 0803 	orr.w	r8, r7, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c74:	fa1f fc85 	uxth.w	ip, r5
 8000c78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c80:	fb07 f10c 	mul.w	r1, r7, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8e:	f080 811b 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8118 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000c98:	3f02      	subs	r7, #2
 8000c9a:	442b      	add	r3, r5
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	192c      	adds	r4, r5, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x290>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x290>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	442c      	add	r4, r5
 8000cc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ccc:	eba4 040c 	sub.w	r4, r4, ip
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xbe>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80eb 	beq.w	8000ec2 <__udivmoddi4+0x286>
 8000cec:	2700      	movs	r7, #0
 8000cee:	e9c6 0100 	strd	r0, r1, [r6]
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f783 	clz	r7, r3
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d147      	bne.n	8000d92 <__udivmoddi4+0x156>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd0>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2c4>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xe8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 808f 	bne.w	8000e4c <__udivmoddi4+0x210>
 8000d2e:	1b49      	subs	r1, r1, r5
 8000d30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d34:	fa1f f885 	uxth.w	r8, r5
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb08 f10c 	mul.w	r1, r8, ip
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d50:	18eb      	adds	r3, r5, r3
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	f200 80cd 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x14c>
 8000d78:	192c      	adds	r4, r5, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x14a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80b6 	bhi.w	8000ef2 <__udivmoddi4+0x2b6>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e79f      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d92:	f1c7 0c20 	rsb	ip, r7, #32
 8000d96:	40bb      	lsls	r3, r7
 8000d98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000da0:	fa01 f407 	lsl.w	r4, r1, r7
 8000da4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000db0:	4325      	orrs	r5, r4
 8000db2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db6:	0c2c      	lsrs	r4, r5, #16
 8000db8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dbc:	fa1f fa8e 	uxth.w	sl, lr
 8000dc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	fa02 f207 	lsl.w	r2, r2, r7
 8000dce:	fa00 f107 	lsl.w	r1, r0, r7
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	f080 8087 	bcs.w	8000eee <__udivmoddi4+0x2b2>
 8000de0:	429c      	cmp	r4, r3
 8000de2:	f240 8084 	bls.w	8000eee <__udivmoddi4+0x2b2>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4473      	add	r3, lr
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	b2ad      	uxth	r5, r5
 8000df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df4:	fb08 3310 	mls	r3, r8, r0, r3
 8000df8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e00:	45a2      	cmp	sl, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1e 0404 	adds.w	r4, lr, r4
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d26b      	bcs.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e0e:	45a2      	cmp	sl, r4
 8000e10:	d969      	bls.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4474      	add	r4, lr
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	eba4 040a 	sub.w	r4, r4, sl
 8000e22:	454c      	cmp	r4, r9
 8000e24:	46c2      	mov	sl, r8
 8000e26:	464b      	mov	r3, r9
 8000e28:	d354      	bcc.n	8000ed4 <__udivmoddi4+0x298>
 8000e2a:	d051      	beq.n	8000ed0 <__udivmoddi4+0x294>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d069      	beq.n	8000f04 <__udivmoddi4+0x2c8>
 8000e30:	ebb1 050a 	subs.w	r5, r1, sl
 8000e34:	eb64 0403 	sbc.w	r4, r4, r3
 8000e38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e3c:	40fd      	lsrs	r5, r7
 8000e3e:	40fc      	lsrs	r4, r7
 8000e40:	ea4c 0505 	orr.w	r5, ip, r5
 8000e44:	e9c6 5400 	strd	r5, r4, [r6]
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e747      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f703 	lsr.w	r7, r0, r3
 8000e54:	4095      	lsls	r5, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e62:	4338      	orrs	r0, r7
 8000e64:	0c01      	lsrs	r1, r0, #16
 8000e66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e6a:	fa1f f885 	uxth.w	r8, r5
 8000e6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb07 f308 	mul.w	r3, r7, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x256>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e88:	d22f      	bcs.n	8000eea <__udivmoddi4+0x2ae>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d92d      	bls.n	8000eea <__udivmoddi4+0x2ae>
 8000e8e:	3f02      	subs	r7, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	b281      	uxth	r1, r0
 8000e96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb00 f308 	mul.w	r3, r0, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x27e>
 8000eaa:	1869      	adds	r1, r5, r1
 8000eac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb0:	d217      	bcs.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d915      	bls.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4429      	add	r1, r5
 8000eba:	1ac9      	subs	r1, r1, r3
 8000ebc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ec0:	e73b      	b.n	8000d3a <__udivmoddi4+0xfe>
 8000ec2:	4637      	mov	r7, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e709      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	e6e7      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ed0:	4541      	cmp	r1, r8
 8000ed2:	d2ab      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed8:	eb69 020e 	sbc.w	r2, r9, lr
 8000edc:	3801      	subs	r0, #1
 8000ede:	4613      	mov	r3, r2
 8000ee0:	e7a4      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	e7e9      	b.n	8000eba <__udivmoddi4+0x27e>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e795      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eea:	4667      	mov	r7, ip
 8000eec:	e7d1      	b.n	8000e92 <__udivmoddi4+0x256>
 8000eee:	4681      	mov	r9, r0
 8000ef0:	e77c      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	442c      	add	r4, r5
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0x14c>
 8000ef8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000efc:	442b      	add	r3, r5
 8000efe:	e72f      	b.n	8000d60 <__udivmoddi4+0x124>
 8000f00:	4638      	mov	r0, r7
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xda>
 8000f04:	4637      	mov	r7, r6
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0xa0>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__aeabi_d2uiz>:
 8000f0c:	004a      	lsls	r2, r1, #1
 8000f0e:	d211      	bcs.n	8000f34 <__aeabi_d2uiz+0x28>
 8000f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f14:	d211      	bcs.n	8000f3a <__aeabi_d2uiz+0x2e>
 8000f16:	d50d      	bpl.n	8000f34 <__aeabi_d2uiz+0x28>
 8000f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f20:	d40e      	bmi.n	8000f40 <__aeabi_d2uiz+0x34>
 8000f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f32:	4770      	bx	lr
 8000f34:	f04f 0000 	mov.w	r0, #0
 8000f38:	4770      	bx	lr
 8000f3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f3e:	d102      	bne.n	8000f46 <__aeabi_d2uiz+0x3a>
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr

08000f4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <vApplicationGetIdleTaskMemory+0x30>)
 8000f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000002c 	.word	0x2000002c
 8000f7c:	20000080 	.word	0x20000080

08000f80 <uDelayTim1>:

volatile static uint32_t pulses_cnt = 0;
const float soundSpeed = 0.0343;

void uDelayTim1(uint64_t uTenSec)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	e9c7 0100 	strd	r0, r1, [r7]
//	uint8_t cnt;
//	HAL_TIM_Base_Start(&htim1);
	HAL_TIM_OnePulse_Start(&htim1, HAL_TIM_ACTIVE_CHANNEL_1);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <uDelayTim1+0x1c>)
 8000f8e:	f005 f88b 	bl	80060a8 <HAL_TIM_OnePulse_Start>
//	HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_ALL);
//	 __HAL_TIM_ENABLE(&htim1);    //send pulse
//	while(TIM1->CNT!=0){
//		cnt++;
//	}
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001674 	.word	0x20001674

08000fa0 <uDelayTim7>:

void uDelayTim7(uint64_t uSec)
{
 8000fa0:	b490      	push	{r4, r7}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	e9c7 0100 	strd	r0, r1, [r7]
	if(uSec < 2) uSec = 2;
 8000faa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000fae:	2c00      	cmp	r4, #0
 8000fb0:	bf08      	it	eq
 8000fb2:	2b02      	cmpeq	r3, #2
 8000fb4:	d205      	bcs.n	8000fc2 <uDelayTim7+0x22>
 8000fb6:	f04f 0302 	mov.w	r3, #2
 8000fba:	f04f 0400 	mov.w	r4, #0
 8000fbe:	e9c7 3400 	strd	r3, r4, [r7]
	TIM7->ARR = uSec - 1;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	4a15      	ldr	r2, [pc, #84]	; (800101c <uDelayTim7+0x7c>)
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM7->EGR = 1;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <uDelayTim7+0x7c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
	TIM7->SR %= ~1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <uDelayTim7+0x7c>)
 8000fd2:	6919      	ldr	r1, [r3, #16]
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <uDelayTim7+0x7c>)
 8000fd6:	f111 0f02 	cmn.w	r1, #2
 8000fda:	bf2c      	ite	cs
 8000fdc:	2201      	movcs	r2, #1
 8000fde:	2200      	movcc	r2, #0
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	07db      	lsls	r3, r3, #31
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	1aca      	subs	r2, r1, r3
 8000fea:	6102      	str	r2, [r0, #16]
	TIM7->CR1 |= 1;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <uDelayTim7+0x7c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <uDelayTim7+0x7c>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
	while((TIM7->SR&0x0001) != 1);
 8000ff8:	bf00      	nop
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <uDelayTim7+0x7c>)
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d1f9      	bne.n	8000ffa <uDelayTim7+0x5a>
	TIM7->SR &= ~(0x0001);
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <uDelayTim7+0x7c>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <uDelayTim7+0x7c>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6113      	str	r3, [r2, #16]
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bc90      	pop	{r4, r7}
 800101a:	4770      	bx	lr
 800101c:	40001400 	.word	0x40001400

08001020 <measureDistance>:
void clear_pulses_cnt(void) {
	pulses_cnt = 0;
}

uint64_t measureDistance(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);
 800102c:	bf00      	nop
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f002 fb2e 	bl	8003694 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f7      	beq.n	800102e <measureDistance+0xe>
	cntTics = 0;
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <measureDistance+0xb0>)
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	f04f 0400 	mov.w	r4, #0
 8001048:	e9c2 3400 	strd	r3, r4, [r2]

	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 800104c:	e00e      	b.n	800106c <measureDistance+0x4c>
	{
		cntTics++;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <measureDistance+0xb0>)
 8001050:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001054:	1c4b      	adds	r3, r1, #1
 8001056:	f142 0400 	adc.w	r4, r2, #0
 800105a:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <measureDistance+0xb0>)
 800105c:	e9c2 3400 	strd	r3, r4, [r2]
		uDelayTim7(2);
 8001060:	f04f 0002 	mov.w	r0, #2
 8001064:	f04f 0100 	mov.w	r1, #0
 8001068:	f7ff ff9a 	bl	8000fa0 <uDelayTim7>
	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f002 fb0f 	bl	8003694 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d0e8      	beq.n	800104e <measureDistance+0x2e>
	}

	distance = cntTics * soundSpeed * 1.5;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <measureDistance+0xb0>)
 800107e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f7ff fd59 	bl	8000b3c <__aeabi_ul2f>
 800108a:	ee07 0a10 	vmov	s14, r0
 800108e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80010d4 <measureDistance+0xb4>
 8001092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001096:	ee17 0a90 	vmov	r0, s15
 800109a:	f7ff fa1d 	bl	80004d8 <__aeabi_f2d>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <measureDistance+0xb8>)
 80010a4:	f7ff fa70 	bl	8000588 <__aeabi_dmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4618      	mov	r0, r3
 80010ae:	4621      	mov	r1, r4
 80010b0:	f7ff fda2 	bl	8000bf8 <__aeabi_d2ulz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <measureDistance+0xbc>)
 80010ba:	e9c2 3400 	strd	r3, r4, [r2]
	return distance;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <measureDistance+0xbc>)
 80010c0:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	4621      	mov	r1, r4
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000fd0 	.word	0x20000fd0
 80010d4:	3d0c7e28 	.word	0x3d0c7e28
 80010d8:	3ff80000 	.word	0x3ff80000
 80010dc:	20000f98 	.word	0x20000f98

080010e0 <triggerMeasureCenter>:

uint64_t triggerMeasureCenter(void)
{
 80010e0:	b598      	push	{r3, r4, r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2108      	movs	r1, #8
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <triggerMeasureCenter+0x44>)
 80010ea:	f002 faeb 	bl	80036c4 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 80010ee:	f04f 000a 	mov.w	r0, #10
 80010f2:	f04f 0100 	mov.w	r1, #0
 80010f6:	f7ff ff43 	bl	8000f80 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <triggerMeasureCenter+0x44>)
 8001100:	f002 fae0 	bl	80036c4 <HAL_GPIO_WritePin>

	/*__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_CC1);
	HAL_TIM_Base_Start(&htim7);
	HAL_TIM_Base_Start_IT(&htim7);*/

	distanceCenter = measureDistance(PORT_CENTER, PIN_CENTER_ECHO);
 8001104:	2104      	movs	r1, #4
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <triggerMeasureCenter+0x44>)
 8001108:	f7ff ff8a 	bl	8001020 <measureDistance>
 800110c:	4603      	mov	r3, r0
 800110e:	460c      	mov	r4, r1
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <triggerMeasureCenter+0x48>)
 8001112:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceCenter;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <triggerMeasureCenter+0x48>)
 8001118:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	bd98      	pop	{r3, r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	48001400 	.word	0x48001400
 8001128:	20000f88 	.word	0x20000f88

0800112c <triggerMeasureLeft>:

uint64_t triggerMeasureLeft(void)
{
 800112c:	b598      	push	{r3, r4, r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2120      	movs	r1, #32
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <triggerMeasureLeft+0x44>)
 8001136:	f002 fac5 	bl	80036c4 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 800113a:	f04f 000a 	mov.w	r0, #10
 800113e:	f04f 0100 	mov.w	r1, #0
 8001142:	f7ff ff1d 	bl	8000f80 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <triggerMeasureLeft+0x44>)
 800114c:	f002 faba 	bl	80036c4 <HAL_GPIO_WritePin>

	distanceLeft = measureDistance(PORT_LEFT, PIN_LEFT_ECHO);
 8001150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <triggerMeasureLeft+0x44>)
 8001156:	f7ff ff63 	bl	8001020 <measureDistance>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <triggerMeasureLeft+0x48>)
 8001160:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceLeft;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <triggerMeasureLeft+0x48>)
 8001166:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800116a:	4618      	mov	r0, r3
 800116c:	4621      	mov	r1, r4
 800116e:	bd98      	pop	{r3, r4, r7, pc}
 8001170:	48001400 	.word	0x48001400
 8001174:	20000fa0 	.word	0x20000fa0

08001178 <triggerMeasureRight>:

uint64_t triggerMeasureRight(void)
{
 8001178:	b598      	push	{r3, r4, r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <triggerMeasureRight+0x44>)
 8001182:	f002 fa9f 	bl	80036c4 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 8001186:	f04f 000a 	mov.w	r0, #10
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	f7ff fef7 	bl	8000f80 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <triggerMeasureRight+0x44>)
 8001198:	f002 fa94 	bl	80036c4 <HAL_GPIO_WritePin>

	distanceRight = measureDistance(PORT_RIGHT, PIN_RIGHT_ECHO);
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <triggerMeasureRight+0x44>)
 80011a2:	f7ff ff3d 	bl	8001020 <measureDistance>
 80011a6:	4603      	mov	r3, r0
 80011a8:	460c      	mov	r4, r1
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <triggerMeasureRight+0x48>)
 80011ac:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceRight;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <triggerMeasureRight+0x48>)
 80011b2:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	bd98      	pop	{r3, r4, r7, pc}
 80011bc:	48001400 	.word	0x48001400
 80011c0:	20000fb8 	.word	0x20000fb8

080011c4 <lcdInit>:

uint8_t dotOrNot;


void lcdInit(struct lcdConf * lcd)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint64_t i;
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_RESET);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6858      	ldr	r0, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a1b      	ldrb	r3, [r3, #8]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	f002 fa73 	bl	80036c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_SET);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6858      	ldr	r0, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7a1b      	ldrb	r3, [r3, #8]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	f002 fa6a 	bl	80036c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->bl_port, lcd->bl_pin, GPIO_PIN_SET);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6958      	ldr	r0, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	f002 fa61 	bl	80036c4 <HAL_GPIO_WritePin>

	lcdCmdMode(lcd, 0x21);
 8001202:	2121      	movs	r1, #33	; 0x21
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f835 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x04);
 800120a:	2104      	movs	r1, #4
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f831 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x10 | 0x04);
 8001212:	2114      	movs	r1, #20
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f82d 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x80 | 0x38);
 800121a:	21b8      	movs	r1, #184	; 0xb8
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f829 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x20);
 8001222:	2120      	movs	r1, #32
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f825 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x08 | 0x04);
 800122a:	210c      	movs	r1, #12
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f821 	bl	8001274 <lcdCmdMode>

	for(i=0; i<348; i++)
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f04f 0400 	mov.w	r4, #0
 800123a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800123e:	e00a      	b.n	8001256 <lcdInit+0x92>
	{
		lcdCmdMode(lcd, 0x00);
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f816 	bl	8001274 <lcdCmdMode>
	for(i=0; i<348; i++)
 8001248:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800124c:	1c59      	adds	r1, r3, #1
 800124e:	f144 0200 	adc.w	r2, r4, #0
 8001252:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8001256:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800125a:	f240 115b 	movw	r1, #347	; 0x15b
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	42a2      	cmp	r2, r4
 8001264:	bf08      	it	eq
 8001266:	4299      	cmpeq	r1, r3
 8001268:	d2ea      	bcs.n	8001240 <lcdInit+0x7c>
	}
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
	...

08001274 <lcdCmdMode>:

void lcdCmdMode(struct lcdConf * lcd, uint8_t cmd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_RESET);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68d8      	ldr	r0, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128a:	b29b      	uxth	r3, r3
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f002 fa18 	bl	80036c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69d8      	ldr	r0, [r3, #28]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c1b      	ldrb	r3, [r3, #16]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 fa0f 	bl	80036c4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &cmd, 1, 100);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	1cf9      	adds	r1, r7, #3
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	2201      	movs	r2, #1
 80012b0:	f004 f919 	bl	80054e6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69d8      	ldr	r0, [r3, #28]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7c1b      	ldrb	r3, [r3, #16]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	f002 f9ff 	bl	80036c4 <HAL_GPIO_WritePin>

	if(cmd != 0x00 )
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <lcdCmdMode+0x64>
	{
		dotOrNot++;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <lcdCmdMode+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <lcdCmdMode+0x6c>)
 80012d6:	701a      	strb	r2, [r3, #0]
	}
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000fda 	.word	0x20000fda

080012e4 <lcdDataMode>:

void lcdDataMode(struct lcdConf * lcd, uint8_t data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_SET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68d8      	ldr	r0, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	f002 f9e0 	bl	80036c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69d8      	ldr	r0, [r3, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7c1b      	ldrb	r3, [r3, #16]
 800130c:	b29b      	uxth	r3, r3
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	f002 f9d7 	bl	80036c4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &data, 1, 100);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	1cf9      	adds	r1, r7, #3
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	2201      	movs	r2, #1
 8001320:	f004 f8e1 	bl	80054e6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69d8      	ldr	r0, [r3, #28]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7c1b      	ldrb	r3, [r3, #16]
 800132c:	b29b      	uxth	r3, r3
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	f002 f9c7 	bl	80036c4 <HAL_GPIO_WritePin>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <lcdSetPlace>:

void lcdSetPlace(struct lcdConf * lcd, enum displayDirection direction, uint8_t col, uint8_t row)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	4608      	mov	r0, r1
 8001348:	4611      	mov	r1, r2
 800134a:	461a      	mov	r2, r3
 800134c:	4603      	mov	r3, r0
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	460b      	mov	r3, r1
 8001352:	70bb      	strb	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
	if(direction == vertical)
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d104      	bne.n	8001368 <lcdSetPlace+0x2a>
	{
		lcdCmdMode(lcd, 0x20 | 0x02);
 800135e:	2122      	movs	r1, #34	; 0x22
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff87 	bl	8001274 <lcdCmdMode>
 8001366:	e003      	b.n	8001370 <lcdSetPlace+0x32>
	}
	else
	{
		lcdCmdMode(lcd, 0x20 | 0x00);
 8001368:	2120      	movs	r1, #32
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff82 	bl	8001274 <lcdCmdMode>
	}
	lcdCmdMode(lcd, 0x80 | col);
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff7a 	bl	8001274 <lcdCmdMode>
	lcdCmdMode(lcd, 0x40 | row);
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff72 	bl	8001274 <lcdCmdMode>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <lcdWelcome>:

void lcdWelcome(struct lcdConf  lcd)
{
 8001398:	b084      	sub	sp, #16
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	f107 0c20 	add.w	ip, r7, #32
 80013a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lcdClearBuffer(&lcd);
 80013a8:	f107 0020 	add.w	r0, r7, #32
 80013ac:	f000 f965 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(&lcd, horizontal, 0, 0);
 80013b0:	2300      	movs	r3, #0
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	f107 0020 	add.w	r0, r7, #32
 80013ba:	f7ff ffc0 	bl	800133e <lcdSetPlace>

	char layer1[] = "WITAMY";
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <lcdWelcome+0xe8>)
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c8:	6018      	str	r0, [r3, #0]
 80013ca:	3304      	adds	r3, #4
 80013cc:	8019      	strh	r1, [r3, #0]
 80013ce:	3302      	adds	r3, #2
 80013d0:	0c0a      	lsrs	r2, r1, #16
 80013d2:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[1][3]), layer1, strlen(layer1));
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff11 	bl	8000200 <strlen>
 80013de:	4602      	mov	r2, r0
 80013e0:	f107 0110 	add.w	r1, r7, #16
 80013e4:	f107 0352 	add.w	r3, r7, #82	; 0x52
 80013e8:	4618      	mov	r0, r3
 80013ea:	f008 f93d 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 80013ee:	f107 0020 	add.w	r0, r7, #32
 80013f2:	f000 f913 	bl	800161c <lcdReadBuffer>

	char layer2[] = "W";
 80013f6:	2357      	movs	r3, #87	; 0x57
 80013f8:	81bb      	strh	r3, [r7, #12]

	memcpy(&(lcd.buffer[2][6]), layer2, strlen(layer2));
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe fefe 	bl	8000200 <strlen>
 8001404:	4602      	mov	r2, r0
 8001406:	f107 010c 	add.w	r1, r7, #12
 800140a:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f92a 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 8001414:	f107 0020 	add.w	r0, r7, #32
 8001418:	f000 f900 	bl	800161c <lcdReadBuffer>

	char layer3[] = "IZER A";
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <lcdWelcome+0xec>)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001424:	6018      	str	r0, [r3, #0]
 8001426:	3304      	adds	r3, #4
 8001428:	8019      	strh	r1, [r3, #0]
 800142a:	3302      	adds	r3, #2
 800142c:	0c0a      	lsrs	r2, r1, #16
 800142e:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[3][3]), layer3, strlen(layer3));
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fee4 	bl	8000200 <strlen>
 8001438:	4602      	mov	r2, r0
 800143a:	1d39      	adds	r1, r7, #4
 800143c:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8001440:	4618      	mov	r0, r3
 8001442:	f008 f911 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 8001446:	f107 0020 	add.w	r0, r7, #32
 800144a:	f000 f8e7 	bl	800161c <lcdReadBuffer>

	char layer4[] = "({)";
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <lcdWelcome+0xf0>)
 8001450:	603b      	str	r3, [r7, #0]

	memcpy(&(lcd.buffer[4][6]), layer4, strlen(layer4));
 8001452:	463b      	mov	r3, r7
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fed3 	bl	8000200 <strlen>
 800145a:	4602      	mov	r2, r0
 800145c:	4639      	mov	r1, r7
 800145e:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001462:	4618      	mov	r0, r3
 8001464:	f008 f900 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 8001468:	f107 0020 	add.w	r0, r7, #32
 800146c:	f000 f8d6 	bl	800161c <lcdReadBuffer>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800147a:	b004      	add	sp, #16
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	080096a8 	.word	0x080096a8
 8001484:	080096b0 	.word	0x080096b0
 8001488:	00297b28 	.word	0x00297b28

0800148c <lcdClear>:

void lcdClear(struct lcdConf  lcd)
{
 800148c:	b084      	sub	sp, #16
 800148e:	b580      	push	{r7, lr}
 8001490:	b090      	sub	sp, #64	; 0x40
 8001492:	af00      	add	r7, sp, #0
 8001494:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8001498:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lcdClearBuffer(&lcd);
 800149c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80014a0:	f000 f8eb 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(&lcd, horizontal, 0, 0);
 80014a4:	2300      	movs	r3, #0
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80014ae:	f7ff ff46 	bl	800133e <lcdSetPlace>

	char layer[] = "          ";
 80014b2:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <lcdClear+0x12c>)
 80014b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ba:	c303      	stmia	r3!, {r0, r1}
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	0c12      	lsrs	r2, r2, #16
 80014c2:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[0][0]), layer, strlen(layer));
 80014c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fe99 	bl	8000200 <strlen>
 80014ce:	4602      	mov	r2, r0
 80014d0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80014d4:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 f8c5 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 80014de:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80014e2:	f000 f89b 	bl	800161c <lcdReadBuffer>

	char layer1[] = "          ";
 80014e6:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <lcdClear+0x12c>)
 80014e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ee:	c303      	stmia	r3!, {r0, r1}
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	3302      	adds	r3, #2
 80014f4:	0c12      	lsrs	r2, r2, #16
 80014f6:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[1][0]), layer1, strlen(layer1));
 80014f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe7f 	bl	8000200 <strlen>
 8001502:	4602      	mov	r2, r0
 8001504:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001508:	f107 0377 	add.w	r3, r7, #119	; 0x77
 800150c:	4618      	mov	r0, r3
 800150e:	f008 f8ab 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 8001512:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001516:	f000 f881 	bl	800161c <lcdReadBuffer>

	char layer2[] = "          ";
 800151a:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <lcdClear+0x12c>)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	ca07      	ldmia	r2, {r0, r1, r2}
 8001522:	c303      	stmia	r3!, {r0, r1}
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[2][0]), layer2, strlen(layer2));
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fe65 	bl	8000200 <strlen>
 8001536:	4602      	mov	r2, r0
 8001538:	f107 011c 	add.w	r1, r7, #28
 800153c:	f107 0385 	add.w	r3, r7, #133	; 0x85
 8001540:	4618      	mov	r0, r3
 8001542:	f008 f891 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 8001546:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800154a:	f000 f867 	bl	800161c <lcdReadBuffer>

	char layer3[] = "          ";
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <lcdClear+0x12c>)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	ca07      	ldmia	r2, {r0, r1, r2}
 8001556:	c303      	stmia	r3!, {r0, r1}
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	3302      	adds	r3, #2
 800155c:	0c12      	lsrs	r2, r2, #16
 800155e:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[3][0]), layer3, strlen(layer3));
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe4b 	bl	8000200 <strlen>
 800156a:	4602      	mov	r2, r0
 800156c:	f107 0110 	add.w	r1, r7, #16
 8001570:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8001574:	4618      	mov	r0, r3
 8001576:	f008 f877 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 800157a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800157e:	f000 f84d 	bl	800161c <lcdReadBuffer>

	char layer4[] = "         ";
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <lcdClear+0x130>)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	ca07      	ldmia	r2, {r0, r1, r2}
 8001588:	c303      	stmia	r3!, {r0, r1}
 800158a:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd.buffer[4][0]), layer4, strlen(layer4));
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe36 	bl	8000200 <strlen>
 8001594:	4602      	mov	r2, r0
 8001596:	1d39      	adds	r1, r7, #4
 8001598:	f107 03a1 	add.w	r3, r7, #161	; 0xa1
 800159c:	4618      	mov	r0, r3
 800159e:	f008 f863 	bl	8009668 <memcpy>
	lcdReadBuffer(&lcd);
 80015a2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80015a6:	f000 f839 	bl	800161c <lcdReadBuffer>
}
 80015aa:	bf00      	nop
 80015ac:	3740      	adds	r7, #64	; 0x40
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015b4:	b004      	add	sp, #16
 80015b6:	4770      	bx	lr
 80015b8:	080096b8 	.word	0x080096b8
 80015bc:	080096c4 	.word	0x080096c4

080015c0 <lcdMarkPrint>:

void lcdMarkPrint(struct lcdConf * lcd, char mark)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 5; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e011      	b.n	80015f6 <lcdMarkPrint+0x36>
    {
    	lcdDataMode(lcd, display_font[mark - 0x20][i]);
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	f1a3 0220 	sub.w	r2, r3, #32
 80015d8:	7bf9      	ldrb	r1, [r7, #15]
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <lcdMarkPrint+0x54>)
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	4403      	add	r3, r0
 80015e4:	440b      	add	r3, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fe7a 	bl	80012e4 <lcdDataMode>
    for (uint8_t i = 0; i < 5; i++)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d9ea      	bls.n	80015d2 <lcdMarkPrint+0x12>
    //{
    //	lcdDataMode(lcd, 0x80);
    //}
    //else
    //{
    	lcdDataMode(lcd, 0x00);
 80015fc:	2100      	movs	r1, #0
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fe70 	bl	80012e4 <lcdDataMode>
    //}
    dotOrNot = 0;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <lcdMarkPrint+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	080098d8 	.word	0x080098d8
 8001618:	20000fda 	.word	0x20000fda

0800161c <lcdReadBuffer>:

void lcdReadBuffer(struct lcdConf * lcd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fe87 	bl	800133e <lcdSetPlace>

    for(uint8_t i=0; i<5; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e01a      	b.n	800166c <lcdReadBuffer+0x50>
        for(uint8_t j=0; j<14; j++)
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]
 800163a:	e011      	b.n	8001660 <lcdReadBuffer+0x44>
        	lcdMarkPrint(lcd, lcd->buffer[i][j]);
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	7bb9      	ldrb	r1, [r7, #14]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	440b      	add	r3, r1
 800164e:	3321      	adds	r3, #33	; 0x21
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffb3 	bl	80015c0 <lcdMarkPrint>
        for(uint8_t j=0; j<14; j++)
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	3301      	adds	r3, #1
 800165e:	73bb      	strb	r3, [r7, #14]
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	2b0d      	cmp	r3, #13
 8001664:	d9ea      	bls.n	800163c <lcdReadBuffer+0x20>
    for(uint8_t i=0; i<5; i++)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b04      	cmp	r3, #4
 8001670:	d9e1      	bls.n	8001636 <lcdReadBuffer+0x1a>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <lcdClearBuffer>:

void lcdClearBuffer(struct lcdConf * lcd)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    for(uint8_t i=0; i<6; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e017      	b.n	80016b8 <lcdClearBuffer+0x3e>
        for(uint8_t j=0; j<14; j++)
 8001688:	2300      	movs	r3, #0
 800168a:	73bb      	strb	r3, [r7, #14]
 800168c:	e00e      	b.n	80016ac <lcdClearBuffer+0x32>
        	lcd->buffer[i][j] = ' ';
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	7bb9      	ldrb	r1, [r7, #14]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4403      	add	r3, r0
 800169e:	440b      	add	r3, r1
 80016a0:	3321      	adds	r3, #33	; 0x21
 80016a2:	2220      	movs	r2, #32
 80016a4:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<14; j++)
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73bb      	strb	r3, [r7, #14]
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b0d      	cmp	r3, #13
 80016b0:	d9ed      	bls.n	800168e <lcdClearBuffer+0x14>
    for(uint8_t i=0; i<6; i++)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	3301      	adds	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d9e4      	bls.n	8001688 <lcdClearBuffer+0xe>
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <display_based>:


// obsluga

void display_based(struct lcdConf * lcd)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffd0 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 80016da:	2300      	movs	r3, #0
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fe2c 	bl	800133e <lcdSetPlace>

	char layer1[] = "|       }";
 80016e6:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <display_based+0x84>)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ee:	c303      	stmia	r3!, {r0, r1}
 80016f0:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[1][2]), layer1, strlen(layer1));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f103 0431 	add.w	r4, r3, #49	; 0x31
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd7f 	bl	8000200 <strlen>
 8001702:	4602      	mov	r2, r0
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4620      	mov	r0, r4
 800170c:	f007 ffac 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff83 	bl	800161c <lcdReadBuffer>

	char layer2[] = "|_ ___ _}";
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <display_based+0x88>)
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	ca07      	ldmia	r2, {r0, r1, r2}
 800171e:	c303      	stmia	r3!, {r0, r1}
 8001720:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[2][2]), layer2, strlen(layer2));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f103 043f 	add.w	r4, r3, #63	; 0x3f
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd67 	bl	8000200 <strlen>
 8001732:	4602      	mov	r2, r0
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4619      	mov	r1, r3
 800173a:	4620      	mov	r0, r4
 800173c:	f007 ff94 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff6b 	bl	800161c <lcdReadBuffer>
}
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	bf00      	nop
 8001750:	080096d0 	.word	0x080096d0
 8001754:	080096dc 	.word	0x080096dc

08001758 <display_lvl1_based>:

void display_lvl1_based(struct lcdConf * lcd)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b08d      	sub	sp, #52	; 0x34
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff8a 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001766:	2300      	movs	r3, #0
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fde6 	bl	800133e <lcdSetPlace>

	char layer1[] = "||       }}";
 8001772:	4a26      	ldr	r2, [pc, #152]	; (800180c <display_lvl1_based+0xb4>)
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	ca07      	ldmia	r2, {r0, r1, r2}
 800177a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd39 	bl	8000200 <strlen>
 800178e:	4602      	mov	r2, r0
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4620      	mov	r0, r4
 8001798:	f007 ff66 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff3d 	bl	800161c <lcdReadBuffer>

	char layer2[] = "||_ ___ _}}";
 80017a2:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <display_lvl1_based+0xb8>)
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fd21 	bl	8000200 <strlen>
 80017be:	4602      	mov	r2, r0
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4620      	mov	r0, r4
 80017c8:	f007 ff4e 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff25 	bl	800161c <lcdReadBuffer>

	char layer3[] = "|__ ___ __}";
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <display_lvl1_based+0xbc>)
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd09 	bl	8000200 <strlen>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	4620      	mov	r0, r4
 80017f8:	f007 ff36 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff0d 	bl	800161c <lcdReadBuffer>

}
 8001802:	bf00      	nop
 8001804:	3734      	adds	r7, #52	; 0x34
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	080096e8 	.word	0x080096e8
 8001810:	080096f4 	.word	0x080096f4
 8001814:	08009700 	.word	0x08009700

08001818 <display_lvl2_based>:

void display_lvl2_based(struct lcdConf * lcd)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b093      	sub	sp, #76	; 0x4c
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff2a 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001826:	2300      	movs	r3, #0
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fd86 	bl	800133e <lcdSetPlace>

	char layer1[] = "|||       }}}";
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <display_lvl2_based+0xe4>)
 8001834:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800183a:	c407      	stmia	r4!, {r0, r1, r2}
 800183c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fcd9 	bl	8000200 <strlen>
 800184e:	4602      	mov	r2, r0
 8001850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001854:	4619      	mov	r1, r3
 8001856:	4620      	mov	r0, r4
 8001858:	f007 ff06 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fedd 	bl	800161c <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}}}";
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <display_lvl2_based+0xe8>)
 8001864:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186a:	c407      	stmia	r4!, {r0, r1, r2}
 800186c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fcc1 	bl	8000200 <strlen>
 800187e:	4602      	mov	r2, r0
 8001880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f007 feee 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fec5 	bl	800161c <lcdReadBuffer>

	char layer3[] = "||__ ___ __}}";
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <display_lvl2_based+0xec>)
 8001894:	f107 0418 	add.w	r4, r7, #24
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	c407      	stmia	r4!, {r0, r1, r2}
 800189c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fca9 	bl	8000200 <strlen>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4620      	mov	r0, r4
 80018b8:	f007 fed6 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fead 	bl	800161c <lcdReadBuffer>

	char layer4[] = "|___ ___ ___}";
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <display_lvl2_based+0xf0>)
 80018c4:	f107 0408 	add.w	r4, r7, #8
 80018c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ca:	c407      	stmia	r4!, {r0, r1, r2}
 80018cc:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f103 0459 	add.w	r4, r3, #89	; 0x59
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fc91 	bl	8000200 <strlen>
 80018de:	4602      	mov	r2, r0
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f007 febe 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fe95 	bl	800161c <lcdReadBuffer>

}
 80018f2:	bf00      	nop
 80018f4:	374c      	adds	r7, #76	; 0x4c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	0800970c 	.word	0x0800970c
 8001900:	0800971c 	.word	0x0800971c
 8001904:	0800972c 	.word	0x0800972c
 8001908:	0800973c 	.word	0x0800973c

0800190c <display_lvl1_srodek>:

void display_lvl1_srodek(struct lcdConf * lcd, uint32_t centerSensor)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08f      	sub	sp, #60	; 0x3c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	lcdClearBuffer(lcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff feaf 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fd0b 	bl	800133e <lcdSetPlace>
	layer[0]=c;

	memcpy(&(lcd->buffer[0][5]), layer, strlen(layer));
	lcdReadBuffer(lcd);*/

	char layer1[] = "  |       }  ";
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <display_lvl1_srodek+0xb4>)
 800192a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800192e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001930:	c407      	stmia	r4!, {r0, r1, r2}
 8001932:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc5e 	bl	8000200 <strlen>
 8001944:	4602      	mov	r2, r0
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	4619      	mov	r1, r3
 800194c:	4620      	mov	r0, r4
 800194e:	f007 fe8b 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fe62 	bl	800161c <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <display_lvl1_srodek+0xb8>)
 800195a:	f107 0418 	add.w	r4, r7, #24
 800195e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001960:	c407      	stmia	r4!, {r0, r1, r2}
 8001962:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc46 	bl	8000200 <strlen>
 8001974:	4602      	mov	r2, r0
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f007 fe73 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fe4a 	bl	800161c <lcdReadBuffer>

	char layer3[] = "     ___     ";
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <display_lvl1_srodek+0xbc>)
 800198a:	f107 0408 	add.w	r4, r7, #8
 800198e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001990:	c407      	stmia	r4!, {r0, r1, r2}
 8001992:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fc2e 	bl	8000200 <strlen>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	4620      	mov	r0, r4
 80019ae:	f007 fe5b 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fe32 	bl	800161c <lcdReadBuffer>


}
 80019b8:	bf00      	nop
 80019ba:	373c      	adds	r7, #60	; 0x3c
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	0800974c 	.word	0x0800974c
 80019c4:	0800975c 	.word	0x0800975c
 80019c8:	0800976c 	.word	0x0800976c

080019cc <display_lvl1_left>:

void display_lvl1_left(struct lcdConf * lcd)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b08f      	sub	sp, #60	; 0x3c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fe50 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 80019da:	2300      	movs	r3, #0
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fcac 	bl	800133e <lcdSetPlace>

	char layer1[] = " ||       }  ";
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <display_lvl1_left+0xb8>)
 80019e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80019ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ee:	c407      	stmia	r4!, {r0, r1, r2}
 80019f0:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 80019f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fbff 	bl	8000200 <strlen>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f007 fe2c 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe03 	bl	800161c <lcdReadBuffer>

	char layer2[] = " ||_ ___ _}  ";
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <display_lvl1_left+0xbc>)
 8001a18:	f107 0418 	add.w	r4, r7, #24
 8001a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1e:	c407      	stmia	r4!, {r0, r1, r2}
 8001a20:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fbe7 	bl	8000200 <strlen>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f007 fe14 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fdeb 	bl	800161c <lcdReadBuffer>

	char layer3[] = " |__          ";
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <display_lvl1_left+0xc0>)
 8001a48:	f107 0408 	add.w	r4, r7, #8
 8001a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4e:	c407      	stmia	r4!, {r0, r1, r2}
 8001a50:	8023      	strh	r3, [r4, #0]
 8001a52:	3402      	adds	r4, #2
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	7023      	strb	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fbcc 	bl	8000200 <strlen>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4620      	mov	r0, r4
 8001a72:	f007 fdf9 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fdd0 	bl	800161c <lcdReadBuffer>
}
 8001a7c:	bf00      	nop
 8001a7e:	373c      	adds	r7, #60	; 0x3c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	0800977c 	.word	0x0800977c
 8001a88:	0800978c 	.word	0x0800978c
 8001a8c:	0800979c 	.word	0x0800979c

08001a90 <display_lvl1_right>:

void display_lvl1_right(struct lcdConf * lcd)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08d      	sub	sp, #52	; 0x34
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fdee 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fc4a 	bl	800133e <lcdSetPlace>

	char layer1[] = " |       }}";
 8001aaa:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <display_lvl1_right+0xb4>)
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb9d 	bl	8000200 <strlen>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	4619      	mov	r1, r3
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f007 fdca 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fda1 	bl	800161c <lcdReadBuffer>

	char layer2[] = " |_ ___ _}}";
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <display_lvl1_right+0xb8>)
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fb85 	bl	8000200 <strlen>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f107 0318 	add.w	r3, r7, #24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4620      	mov	r0, r4
 8001b00:	f007 fdb2 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fd89 	bl	800161c <lcdReadBuffer>

	char layer3[] = "        __}";
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <display_lvl1_right+0xbc>)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b12:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb6d 	bl	8000200 <strlen>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f007 fd9a 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fd71 	bl	800161c <lcdReadBuffer>
}
 8001b3a:	bf00      	nop
 8001b3c:	3734      	adds	r7, #52	; 0x34
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	080097ac 	.word	0x080097ac
 8001b48:	080097b8 	.word	0x080097b8
 8001b4c:	080097c4 	.word	0x080097c4

08001b50 <display_lvl2_srodek>:

void display_lvl2_srodek(struct lcdConf * lcd)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b093      	sub	sp, #76	; 0x4c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fd8e 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fbea 	bl	800133e <lcdSetPlace>

	char layer1[] = "  |       }  ";
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <display_lvl2_srodek+0xe4>)
 8001b6c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b72:	c407      	stmia	r4!, {r0, r1, r2}
 8001b74:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001b7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb3d 	bl	8000200 <strlen>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f007 fd6a 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fd41 	bl	800161c <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <display_lvl2_srodek+0xe8>)
 8001b9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba2:	c407      	stmia	r4!, {r0, r1, r2}
 8001ba4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb25 	bl	8000200 <strlen>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f007 fd52 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fd29 	bl	800161c <lcdReadBuffer>

	char layer3[] = "     ___     ";
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <display_lvl2_srodek+0xec>)
 8001bcc:	f107 0418 	add.w	r4, r7, #24
 8001bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd2:	c407      	stmia	r4!, {r0, r1, r2}
 8001bd4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fb0d 	bl	8000200 <strlen>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f107 0318 	add.w	r3, r7, #24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f007 fd3a 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fd11 	bl	800161c <lcdReadBuffer>

	char layer4[] = "     ___     ";
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <display_lvl2_srodek+0xec>)
 8001bfc:	f107 0408 	add.w	r4, r7, #8
 8001c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c02:	c407      	stmia	r4!, {r0, r1, r2}
 8001c04:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe faf5 	bl	8000200 <strlen>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f007 fd22 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fcf9 	bl	800161c <lcdReadBuffer>


}
 8001c2a:	bf00      	nop
 8001c2c:	374c      	adds	r7, #76	; 0x4c
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800974c 	.word	0x0800974c
 8001c38:	0800975c 	.word	0x0800975c
 8001c3c:	0800976c 	.word	0x0800976c

08001c40 <display_lvl2_left>:

void display_lvl2_left(struct lcdConf * lcd)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b093      	sub	sp, #76	; 0x4c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fd16 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fb72 	bl	800133e <lcdSetPlace>

	char layer1[] = "|||       }  ";
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <display_lvl2_left+0xe4>)
 8001c5c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c62:	c407      	stmia	r4!, {r0, r1, r2}
 8001c64:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001c6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fac5 	bl	8000200 <strlen>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f007 fcf2 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fcc9 	bl	800161c <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}  ";
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <display_lvl2_left+0xe8>)
 8001c8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c92:	c407      	stmia	r4!, {r0, r1, r2}
 8001c94:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe faad 	bl	8000200 <strlen>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f007 fcda 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fcb1 	bl	800161c <lcdReadBuffer>

	char layer3[] = "||__         ";
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <display_lvl2_left+0xec>)
 8001cbc:	f107 0418 	add.w	r4, r7, #24
 8001cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc2:	c407      	stmia	r4!, {r0, r1, r2}
 8001cc4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fa95 	bl	8000200 <strlen>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f007 fcc2 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fc99 	bl	800161c <lcdReadBuffer>

	char layer4[] = "|___         ";
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <display_lvl2_left+0xf0>)
 8001cec:	f107 0408 	add.w	r4, r7, #8
 8001cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf2:	c407      	stmia	r4!, {r0, r1, r2}
 8001cf4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa7d 	bl	8000200 <strlen>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f007 fcaa 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fc81 	bl	800161c <lcdReadBuffer>


}
 8001d1a:	bf00      	nop
 8001d1c:	374c      	adds	r7, #76	; 0x4c
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	080097d0 	.word	0x080097d0
 8001d28:	080097e0 	.word	0x080097e0
 8001d2c:	080097f0 	.word	0x080097f0
 8001d30:	08009800 	.word	0x08009800

08001d34 <display_lvl2_right>:

void display_lvl2_right(struct lcdConf * lcd)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b093      	sub	sp, #76	; 0x4c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fc9c 	bl	800167a <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff faf8 	bl	800133e <lcdSetPlace>

	char layer1[] = "  |       }}}";
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <display_lvl2_right+0xe4>)
 8001d50:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d56:	c407      	stmia	r4!, {r0, r1, r2}
 8001d58:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001d60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fa4b 	bl	8000200 <strlen>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f007 fc78 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fc4f 	bl	800161c <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}}}";
 8001d7e:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <display_lvl2_right+0xe8>)
 8001d80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d86:	c407      	stmia	r4!, {r0, r1, r2}
 8001d88:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fa33 	bl	8000200 <strlen>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4620      	mov	r0, r4
 8001da4:	f007 fc60 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fc37 	bl	800161c <lcdReadBuffer>

	char layer3[] = "         __}}";
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <display_lvl2_right+0xec>)
 8001db0:	f107 0418 	add.w	r4, r7, #24
 8001db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db6:	c407      	stmia	r4!, {r0, r1, r2}
 8001db8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fa1b 	bl	8000200 <strlen>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f007 fc48 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fc1f 	bl	800161c <lcdReadBuffer>

	char layer4[] = "         ___}";
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <display_lvl2_right+0xf0>)
 8001de0:	f107 0408 	add.w	r4, r7, #8
 8001de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de6:	c407      	stmia	r4!, {r0, r1, r2}
 8001de8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fa03 	bl	8000200 <strlen>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4619      	mov	r1, r3
 8001e02:	4620      	mov	r0, r4
 8001e04:	f007 fc30 	bl	8009668 <memcpy>
	lcdReadBuffer(lcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fc07 	bl	800161c <lcdReadBuffer>
}
 8001e0e:	bf00      	nop
 8001e10:	374c      	adds	r7, #76	; 0x4c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08009810 	.word	0x08009810
 8001e1c:	08009820 	.word	0x08009820
 8001e20:	08009830 	.word	0x08009830
 8001e24:	08009840 	.word	0x08009840

08001e28 <buzzerDriver>:

void buzzerDriver(uint64_t minValue)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	e9c7 0100 	strd	r0, r1, [r7]
	if(minValue > 100 && minValue <140 )
 8001e32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	bf08      	it	eq
 8001e3a:	2b65      	cmpeq	r3, #101	; 0x65
 8001e3c:	d318      	bcc.n	8001e70 <buzzerDriver+0x48>
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	2c00      	cmp	r4, #0
 8001e44:	bf08      	it	eq
 8001e46:	2b8c      	cmpeq	r3, #140	; 0x8c
 8001e48:	d212      	bcs.n	8001e70 <buzzerDriver+0x48>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4828      	ldr	r0, [pc, #160]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e4e:	f003 ff3f 	bl	8005cd0 <HAL_TIM_PWM_Start>
		osDelay(10);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f006 fa2b 	bl	80082ae <osDelay>
		htim3.Instance->CCR1 = 2;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e60:	2100      	movs	r1, #0
 8001e62:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e64:	f004 f83a 	bl	8005edc <HAL_TIM_PWM_Stop>
		osDelay(100);
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	f006 fa20 	bl	80082ae <osDelay>
	{
		htim3.Instance->CCR1 = 0;
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		osDelay(200);
	}
}
 8001e6e:	e03a      	b.n	8001ee6 <buzzerDriver+0xbe>
	else if(minValue > 40)
 8001e70:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	bf08      	it	eq
 8001e78:	2b29      	cmpeq	r3, #41	; 0x29
 8001e7a:	d312      	bcc.n	8001ea2 <buzzerDriver+0x7a>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e80:	f003 ff26 	bl	8005cd0 <HAL_TIM_PWM_Start>
		osDelay(10);
 8001e84:	200a      	movs	r0, #10
 8001e86:	f006 fa12 	bl	80082ae <osDelay>
		htim3.Instance->CCR1 = 80;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2250      	movs	r2, #80	; 0x50
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <buzzerDriver+0xc8>)
 8001e96:	f004 f821 	bl	8005edc <HAL_TIM_PWM_Stop>
		osDelay(60);
 8001e9a:	203c      	movs	r0, #60	; 0x3c
 8001e9c:	f006 fa07 	bl	80082ae <osDelay>
}
 8001ea0:	e021      	b.n	8001ee6 <buzzerDriver+0xbe>
	else if(minValue > 0)
 8001ea2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ea6:	4323      	orrs	r3, r4
 8001ea8:	d012      	beq.n	8001ed0 <buzzerDriver+0xa8>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <buzzerDriver+0xc8>)
 8001eae:	f003 ff0f 	bl	8005cd0 <HAL_TIM_PWM_Start>
		osDelay(10);
 8001eb2:	200a      	movs	r0, #10
 8001eb4:	f006 f9fb 	bl	80082ae <osDelay>
		htim3.Instance->CCR1 = 220;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <buzzerDriver+0xc8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	22dc      	movs	r2, #220	; 0xdc
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <buzzerDriver+0xc8>)
 8001ec4:	f004 f80a 	bl	8005edc <HAL_TIM_PWM_Stop>
		osDelay(20);
 8001ec8:	2014      	movs	r0, #20
 8001eca:	f006 f9f0 	bl	80082ae <osDelay>
}
 8001ece:	e00a      	b.n	8001ee6 <buzzerDriver+0xbe>
		htim3.Instance->CCR1 = 0;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <buzzerDriver+0xc8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <buzzerDriver+0xc8>)
 8001edc:	f003 fffe 	bl	8005edc <HAL_TIM_PWM_Stop>
		osDelay(200);
 8001ee0:	20c8      	movs	r0, #200	; 0xc8
 8001ee2:	f006 f9e4 	bl	80082ae <osDelay>
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200014f8 	.word	0x200014f8

08001ef4 <display_driver>:




void display_driver(uint64_t leftSensor, uint64_t centerSensor, uint64_t rightSensor, struct lcdConf lcd)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001efe:	e9c7 2300 	strd	r2, r3, [r7]

	//rightSensor = 100;
	//centerSensor = 100;
	//leftSensor = 100;

	if(leftSensor < 50 && centerSensor < 50 && rightSensor < 50)
 8001f02:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	bf08      	it	eq
 8001f0a:	2b32      	cmpeq	r3, #50	; 0x32
 8001f0c:	d229      	bcs.n	8001f62 <display_driver+0x6e>
 8001f0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f12:	2c00      	cmp	r4, #0
 8001f14:	bf08      	it	eq
 8001f16:	2b32      	cmpeq	r3, #50	; 0x32
 8001f18:	d223      	bcs.n	8001f62 <display_driver+0x6e>
 8001f1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	bf08      	it	eq
 8001f22:	2b32      	cmpeq	r3, #50	; 0x32
 8001f24:	d21d      	bcs.n	8001f62 <display_driver+0x6e>
	{
		if(leftSensor < 20 && centerSensor < 20 && rightSensor < 20)
 8001f26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	bf08      	it	eq
 8001f2e:	2b14      	cmpeq	r3, #20
 8001f30:	d211      	bcs.n	8001f56 <display_driver+0x62>
 8001f32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f36:	2c00      	cmp	r4, #0
 8001f38:	bf08      	it	eq
 8001f3a:	2b14      	cmpeq	r3, #20
 8001f3c:	d20b      	bcs.n	8001f56 <display_driver+0x62>
 8001f3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	bf08      	it	eq
 8001f46:	2b14      	cmpeq	r3, #20
 8001f48:	d205      	bcs.n	8001f56 <display_driver+0x62>
		{
			display_lvl2_based(&lcd);
 8001f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fc62 	bl	8001818 <display_lvl2_based>
		if(leftSensor < 20 && centerSensor < 20 && rightSensor < 20)
 8001f54:	e0cf      	b.n	80020f6 <display_driver+0x202>
		}
		else
		{
			display_lvl1_based(&lcd);
 8001f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fbfc 	bl	8001758 <display_lvl1_based>
		if(leftSensor < 20 && centerSensor < 20 && rightSensor < 20)
 8001f60:	e0c9      	b.n	80020f6 <display_driver+0x202>
		}
	}
	else
	{
			mainSensor = centerSensor;
 8001f62:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f66:	e9c7 3406 	strd	r3, r4, [r7, #24]
			check = 1;
 8001f6a:	f04f 0301 	mov.w	r3, #1
 8001f6e:	f04f 0400 	mov.w	r4, #0
 8001f72:	e9c7 3404 	strd	r3, r4, [r7, #16]
			if(leftSensor < mainSensor)
 8001f76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f7e:	42a2      	cmp	r2, r4
 8001f80:	bf08      	it	eq
 8001f82:	4299      	cmpeq	r1, r3
 8001f84:	d209      	bcs.n	8001f9a <display_driver+0xa6>
			{
				mainSensor = leftSensor;
 8001f86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f8a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 2;
 8001f8e:	f04f 0302 	mov.w	r3, #2
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}

			if(rightSensor < mainSensor)
 8001f9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001f9e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fa2:	42a2      	cmp	r2, r4
 8001fa4:	bf08      	it	eq
 8001fa6:	4299      	cmpeq	r1, r3
 8001fa8:	d209      	bcs.n	8001fbe <display_driver+0xca>
			{
				mainSensor = rightSensor;
 8001faa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001fae:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 3;
 8001fb2:	f04f 0303 	mov.w	r3, #3
 8001fb6:	f04f 0400 	mov.w	r4, #0
 8001fba:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}
			if(check == 1)
 8001fbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	bf08      	it	eq
 8001fc6:	2b01      	cmpeq	r3, #1
 8001fc8:	d12e      	bne.n	8002028 <display_driver+0x134>
			{
				if(mainSensor > 100 || mainSensor == 0)
 8001fca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	bf08      	it	eq
 8001fd2:	2b65      	cmpeq	r3, #101	; 0x65
 8001fd4:	d203      	bcs.n	8001fde <display_driver+0xea>
 8001fd6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	d105      	bne.n	8001fea <display_driver+0xf6>
				{
					display_based(&lcd);
 8001fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fb72 	bl	80016cc <display_based>
 8001fe8:	e01e      	b.n	8002028 <display_driver+0x134>
				}
				else if(mainSensor < 101 && mainSensor > 40)
 8001fea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	bf08      	it	eq
 8001ff2:	2b65      	cmpeq	r3, #101	; 0x65
 8001ff4:	d20d      	bcs.n	8002012 <display_driver+0x11e>
 8001ff6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	bf08      	it	eq
 8001ffe:	2b29      	cmpeq	r3, #41	; 0x29
 8002000:	d307      	bcc.n	8002012 <display_driver+0x11e>
				{
					display_lvl1_srodek(&lcd, centerSensor);
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fc7e 	bl	800190c <display_lvl1_srodek>
 8002010:	e00a      	b.n	8002028 <display_driver+0x134>
				}
				else if(mainSensor  < 41)
 8002012:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002016:	2c00      	cmp	r4, #0
 8002018:	bf08      	it	eq
 800201a:	2b29      	cmpeq	r3, #41	; 0x29
 800201c:	d204      	bcs.n	8002028 <display_driver+0x134>
				{
					display_lvl2_srodek(&lcd);
 800201e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fd94 	bl	8001b50 <display_lvl2_srodek>
				}
			}
			if(check == 2)
 8002028:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800202c:	2c00      	cmp	r4, #0
 800202e:	bf08      	it	eq
 8002030:	2b02      	cmpeq	r3, #2
 8002032:	d12c      	bne.n	800208e <display_driver+0x19a>
			{
				if(mainSensor > 100 || mainSensor == 0)
 8002034:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002038:	2c00      	cmp	r4, #0
 800203a:	bf08      	it	eq
 800203c:	2b65      	cmpeq	r3, #101	; 0x65
 800203e:	d203      	bcs.n	8002048 <display_driver+0x154>
 8002040:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002044:	4323      	orrs	r3, r4
 8002046:	d105      	bne.n	8002054 <display_driver+0x160>
				{
					display_based(&lcd);
 8002048:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb3d 	bl	80016cc <display_based>
 8002052:	e01c      	b.n	800208e <display_driver+0x19a>
				}
				else if(mainSensor < 101 && mainSensor > 40)
 8002054:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002058:	2c00      	cmp	r4, #0
 800205a:	bf08      	it	eq
 800205c:	2b65      	cmpeq	r3, #101	; 0x65
 800205e:	d20b      	bcs.n	8002078 <display_driver+0x184>
 8002060:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002064:	2c00      	cmp	r4, #0
 8002066:	bf08      	it	eq
 8002068:	2b29      	cmpeq	r3, #41	; 0x29
 800206a:	d305      	bcc.n	8002078 <display_driver+0x184>
				{
					display_lvl1_left(&lcd);
 800206c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fcab 	bl	80019cc <display_lvl1_left>
 8002076:	e00a      	b.n	800208e <display_driver+0x19a>
				}
				else if(mainSensor  < 41)
 8002078:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800207c:	2c00      	cmp	r4, #0
 800207e:	bf08      	it	eq
 8002080:	2b29      	cmpeq	r3, #41	; 0x29
 8002082:	d204      	bcs.n	800208e <display_driver+0x19a>
				{
					display_lvl2_left(&lcd);
 8002084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fdd9 	bl	8001c40 <display_lvl2_left>
				}
			}
			if(check == 3)
 800208e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002092:	2c00      	cmp	r4, #0
 8002094:	bf08      	it	eq
 8002096:	2b03      	cmpeq	r3, #3
 8002098:	d12d      	bne.n	80020f6 <display_driver+0x202>
			{
				if(mainSensor > 100 || mainSensor == 0)
 800209a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800209e:	2c00      	cmp	r4, #0
 80020a0:	bf08      	it	eq
 80020a2:	2b65      	cmpeq	r3, #101	; 0x65
 80020a4:	d203      	bcs.n	80020ae <display_driver+0x1ba>
 80020a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020aa:	4323      	orrs	r3, r4
 80020ac:	d105      	bne.n	80020ba <display_driver+0x1c6>
				{
					display_based(&lcd);
 80020ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb0a 	bl	80016cc <display_based>
 80020b8:	e01d      	b.n	80020f6 <display_driver+0x202>
				}
				else if(mainSensor < 101 && mainSensor > 40)
 80020ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020be:	2c00      	cmp	r4, #0
 80020c0:	bf08      	it	eq
 80020c2:	2b65      	cmpeq	r3, #101	; 0x65
 80020c4:	d20b      	bcs.n	80020de <display_driver+0x1ea>
 80020c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020ca:	2c00      	cmp	r4, #0
 80020cc:	bf08      	it	eq
 80020ce:	2b29      	cmpeq	r3, #41	; 0x29
 80020d0:	d305      	bcc.n	80020de <display_driver+0x1ea>
				{
					display_lvl1_right(&lcd);
 80020d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fcda 	bl	8001a90 <display_lvl1_right>
 80020dc:	e00b      	b.n	80020f6 <display_driver+0x202>
				}
				else if(mainSensor  < 41)
 80020de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020e2:	2c00      	cmp	r4, #0
 80020e4:	bf08      	it	eq
 80020e6:	2b29      	cmpeq	r3, #41	; 0x29
 80020e8:	d205      	bcs.n	80020f6 <display_driver+0x202>
				{
					display_lvl2_right(&lcd);
 80020ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe20 	bl	8001d34 <display_lvl2_right>
				}
			}

	}

}
 80020f4:	e7ff      	b.n	80020f6 <display_driver+0x202>
 80020f6:	bf00      	nop
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
	...

08002100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b096      	sub	sp, #88	; 0x58
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002106:	f000 fff6 	bl	80030f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210a:	f000 f87b 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210e:	f000 fad9 	bl	80026c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8002112:	f000 f8ff 	bl	8002314 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8002116:	f000 f94d 	bl	80023b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800211a:	f000 faa9 	bl	8002670 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800211e:	f000 f9d3 	bl	80024c8 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002122:	f000 fa6f 	bl	8002604 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002126:	f000 f991 	bl	800244c <MX_SPI1_Init>
  MX_TIM3_Init();
 800212a:	f000 f9f3 	bl	8002514 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  lcd.spi = &hspi1;
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <main+0xe0>)
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <main+0xe4>)
 8002132:	601a      	str	r2, [r3, #0]
  lcd.rst_port = RST_GPIO_Port;
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <main+0xe0>)
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <main+0xe8>)
 8002138:	605a      	str	r2, [r3, #4]
  lcd.rst_pin = RESET_Pin;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <main+0xe0>)
 800213c:	2220      	movs	r2, #32
 800213e:	721a      	strb	r2, [r3, #8]
  lcd.dc_port = DC_GPIO_Port;
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <main+0xe0>)
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <main+0xe8>)
 8002144:	60da      	str	r2, [r3, #12]
  lcd.dc_pin = DCC_Pin;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <main+0xe0>)
 8002148:	2210      	movs	r2, #16
 800214a:	f883 2020 	strb.w	r2, [r3, #32]
  lcd.bl_port = BL_GPIO_Port;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <main+0xe0>)
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <main+0xe8>)
 8002152:	615a      	str	r2, [r3, #20]
  lcd.bl_pin = BLL_Pin;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <main+0xe0>)
 8002156:	2208      	movs	r2, #8
 8002158:	761a      	strb	r2, [r3, #24]
  lcd.ce_port = CE_GPIO_Port;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <main+0xe0>)
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <main+0xe8>)
 800215e:	61da      	str	r2, [r3, #28]
  lcd.ce_pin = CEE_Pin;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <main+0xe0>)
 8002162:	2204      	movs	r2, #4
 8002164:	741a      	strb	r2, [r3, #16]

  lcdInit(&lcd);
 8002166:	481e      	ldr	r0, [pc, #120]	; (80021e0 <main+0xe0>)
 8002168:	f7ff f82c 	bl	80011c4 <lcdInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HC_SR04 */
  osThreadDef(HC_SR04, hc_sr04_measure, osPriorityNormal, 0, 128);
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <main+0xec>)
 800216e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002172:	461d      	mov	r5, r3
 8002174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002178:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800217c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HC_SR04Handle = osThreadCreate(osThread(HC_SR04), NULL);
 8002180:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f006 f845 	bl	8008216 <osThreadCreate>
 800218c:	4602      	mov	r2, r0
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <main+0xf0>)
 8002190:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCD_buzzer */
  osThreadDef(LCD_buzzer, display_pii, osPriorityIdle, 0, 128);
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <main+0xf4>)
 8002194:	f107 0420 	add.w	r4, r7, #32
 8002198:	461d      	mov	r5, r3
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_buzzerHandle = osThreadCreate(osThread(LCD_buzzer), NULL);
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 f832 	bl	8008216 <osThreadCreate>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <main+0xf8>)
 80021b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of Buzzer */
  osThreadDef(Buzzer, buzzer_work, osPriorityIdle, 0, 128);
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <main+0xfc>)
 80021ba:	1d3c      	adds	r4, r7, #4
 80021bc:	461d      	mov	r5, r3
 80021be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BuzzerHandle = osThreadCreate(osThread(Buzzer), NULL);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f006 f821 	bl	8008216 <osThreadCreate>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <main+0x100>)
 80021d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021da:	f006 f815 	bl	8008208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021de:	e7fe      	b.n	80021de <main+0xde>
 80021e0:	20000fec 	.word	0x20000fec
 80021e4:	200016c8 	.word	0x200016c8
 80021e8:	48001000 	.word	0x48001000
 80021ec:	08009858 	.word	0x08009858
 80021f0:	20000fe8 	.word	0x20000fe8
 80021f4:	08009880 	.word	0x08009880
 80021f8:	20001780 	.word	0x20001780
 80021fc:	080098a4 	.word	0x080098a4
 8002200:	2000172c 	.word	0x2000172c

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0bc      	sub	sp, #240	; 0xf0
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800220e:	2244      	movs	r2, #68	; 0x44
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f007 fa33 	bl	800967e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2294      	movs	r2, #148	; 0x94
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f007 fa25 	bl	800967e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002234:	2000      	movs	r0, #0
 8002236:	f001 fbdf 	bl	80039f8 <HAL_PWREx_ControlVoltageScaling>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002240:	f000 fc90 	bl	8002b64 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002244:	2301      	movs	r3, #1
 8002246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800224a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002258:	2303      	movs	r3, #3
 800225a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002264:	231e      	movs	r3, #30
 8002266:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002280:	4618      	mov	r0, r3
 8002282:	f001 fc7d 	bl	8003b80 <HAL_RCC_OscConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800228c:	f000 fc6a 	bl	8002b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002290:	230f      	movs	r3, #15
 8002292:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002296:	2303      	movs	r3, #3
 8002298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022b4:	2105      	movs	r1, #5
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 f888 	bl	80043cc <HAL_RCC_ClockConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022c2:	f000 fc4f 	bl	8002b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 80022c6:	f242 0324 	movw	r3, #8228	; 0x2024
 80022ca:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80022d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80022da:	2303      	movs	r3, #3
 80022dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80022e2:	230c      	movs	r3, #12
 80022e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80022e6:	2302      	movs	r3, #2
 80022e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80022f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fb48 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8002306:	f000 fc2d 	bl	8002b64 <Error_Handler>
  }
}
 800230a:	bf00      	nop
 800230c:	37f0      	adds	r7, #240	; 0xf0
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <MX_LPUART1_UART_Init+0x94>)
 800231c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <MX_LPUART1_UART_Init+0x98>)
 8002322:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800235c:	4811      	ldr	r0, [pc, #68]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 800235e:	f004 ff01 	bl	8007164 <HAL_UART_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002368:	f000 fbfc 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236c:	2100      	movs	r1, #0
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002370:	f005 fbbd 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800237a:	f000 fbf3 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237e:	2100      	movs	r1, #0
 8002380:	4808      	ldr	r0, [pc, #32]	; (80023a4 <MX_LPUART1_UART_Init+0x90>)
 8002382:	f005 fbf2 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800238c:	f000 fbea 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_LPUART1_UART_Init+0x9c>)
 8002392:	f005 fb73 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800239c:	f000 fbe2 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20001544 	.word	0x20001544
 80023a8:	40008000 	.word	0x40008000
 80023ac:	00033324 	.word	0x00033324
 80023b0:	200015d0 	.word	0x200015d0

080023b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <MX_USART3_UART_Init+0x94>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023fc:	4811      	ldr	r0, [pc, #68]	; (8002444 <MX_USART3_UART_Init+0x90>)
 80023fe:	f004 feb1 	bl	8007164 <HAL_UART_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002408:	f000 fbac 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800240c:	2100      	movs	r1, #0
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_USART3_UART_Init+0x90>)
 8002410:	f005 fb6d 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800241a:	f000 fba3 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800241e:	2100      	movs	r1, #0
 8002420:	4808      	ldr	r0, [pc, #32]	; (8002444 <MX_USART3_UART_Init+0x90>)
 8002422:	f005 fba2 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800242c:	f000 fb9a 	bl	8002b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <MX_USART3_UART_Init+0x90>)
 8002432:	f005 fb23 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800243c:	f000 fb92 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20001058 	.word	0x20001058
 8002448:	40004800 	.word	0x40004800

0800244c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <MX_SPI1_Init+0x78>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002466:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800246a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_SPI1_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_SPI1_Init+0x74>)
 800247a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002482:	2220      	movs	r2, #32
 8002484:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_SPI1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_SPI1_Init+0x74>)
 800249a:	2207      	movs	r2, #7
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024a6:	2208      	movs	r2, #8
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024ac:	f002 ff78 	bl	80053a0 <HAL_SPI_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024b6:	f000 fb55 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200016c8 	.word	0x200016c8
 80024c4:	40013000 	.word	0x40013000

080024c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 0 */

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_TIM1_Init+0x44>)
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <MX_TIM1_Init+0x48>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_TIM1_Init+0x44>)
 80024d4:	2227      	movs	r2, #39	; 0x27
 80024d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_TIM1_Init+0x44>)
 80024da:	2210      	movs	r2, #16
 80024dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 29;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_TIM1_Init+0x44>)
 80024e0:	221d      	movs	r2, #29
 80024e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_TIM1_Init+0x44>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_TIM1_Init+0x44>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_TIM1_Init+0x44>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80024f6:	2108      	movs	r1, #8
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_TIM1_Init+0x44>)
 80024fa:	f003 fd85 	bl	8006008 <HAL_TIM_OnePulse_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8002504:	f000 fb2e 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20001674 	.word	0x20001674
 8002510:	40012c00 	.word	0x40012c00

08002514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002534:	463b      	mov	r3, r7
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	615a      	str	r2, [r3, #20]
 8002544:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <MX_TIM3_Init+0xe8>)
 8002548:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <MX_TIM3_Init+0xec>)
 800254a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1845;
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <MX_TIM3_Init+0xe8>)
 800254e:	f240 7235 	movw	r2, #1845	; 0x735
 8002552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <MX_TIM3_Init+0xe8>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 800255a:	4b28      	ldr	r3, [pc, #160]	; (80025fc <MX_TIM3_Init+0xe8>)
 800255c:	22fe      	movs	r2, #254	; 0xfe
 800255e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <MX_TIM3_Init+0xe8>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <MX_TIM3_Init+0xe8>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256c:	4823      	ldr	r0, [pc, #140]	; (80025fc <MX_TIM3_Init+0xe8>)
 800256e:	f003 fa85 	bl	8005a7c <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002578:	f000 faf4 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002586:	4619      	mov	r1, r3
 8002588:	481c      	ldr	r0, [pc, #112]	; (80025fc <MX_TIM3_Init+0xe8>)
 800258a:	f004 f833 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002594:	f000 fae6 	bl	8002b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002598:	4818      	ldr	r0, [pc, #96]	; (80025fc <MX_TIM3_Init+0xe8>)
 800259a:	f003 fb37 	bl	8005c0c <HAL_TIM_PWM_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025a4:	f000 fade 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_TIM3_Init+0xe8>)
 80025b8:	f004 fd2e 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025c2:	f000 facf 	bl	8002b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c6:	2360      	movs	r3, #96	; 0x60
 80025c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d6:	463b      	mov	r3, r7
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	4807      	ldr	r0, [pc, #28]	; (80025fc <MX_TIM3_Init+0xe8>)
 80025de:	f003 fef9 	bl	80063d4 <HAL_TIM_PWM_ConfigChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025e8:	f000 fabc 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <MX_TIM3_Init+0xe8>)
 80025ee:	f000 fbfb 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 80025f2:	bf00      	nop
 80025f4:	3738      	adds	r7, #56	; 0x38
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200014f8 	.word	0x200014f8
 8002600:	40000400 	.word	0x40000400

08002604 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <MX_TIM7_Init+0x64>)
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <MX_TIM7_Init+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 120-1;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MX_TIM7_Init+0x64>)
 800261c:	2277      	movs	r2, #119	; 0x77
 800261e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <MX_TIM7_Init+0x64>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_TIM7_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_TIM7_Init+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <MX_TIM7_Init+0x64>)
 8002634:	f003 fa22 	bl	8005a7c <HAL_TIM_Base_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800263e:	f000 fa91 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <MX_TIM7_Init+0x64>)
 8002650:	f004 fce2 	bl	8007018 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800265a:	f000 fa83 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20001730 	.word	0x20001730
 800266c:	40001400 	.word	0x40001400

08002670 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800267a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800267e:	2206      	movs	r2, #6
 8002680:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002684:	2202      	movs	r2, #2
 8002686:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800268a:	2201      	movs	r2, #1
 800268c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800269c:	2201      	movs	r2, #1
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026ae:	f001 f83b 	bl	8003728 <HAL_PCD_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80026b8:	f000 fa54 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200010e4 	.word	0x200010e4

080026c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <MX_GPIO_Init+0x1cc>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <MX_GPIO_Init+0x1cc>)
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <MX_GPIO_Init+0x1cc>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <MX_GPIO_Init+0x1cc>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a66      	ldr	r2, [pc, #408]	; (8002890 <MX_GPIO_Init+0x1cc>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800270a:	4b61      	ldr	r3, [pc, #388]	; (8002890 <MX_GPIO_Init+0x1cc>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a60      	ldr	r2, [pc, #384]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002716:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272e:	4b58      	ldr	r3, [pc, #352]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <MX_GPIO_Init+0x1cc>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4a54      	ldr	r2, [pc, #336]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002746:	4b52      	ldr	r3, [pc, #328]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <MX_GPIO_Init+0x1cc>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a48      	ldr	r2, [pc, #288]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a42      	ldr	r2, [pc, #264]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b40      	ldr	r3, [pc, #256]	; (8002890 <MX_GPIO_Init+0x1cc>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800279a:	f001 f9e1 	bl	8003b60 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_Pin|BL_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	213c      	movs	r1, #60	; 0x3c
 80027a2:	483c      	ldr	r0, [pc, #240]	; (8002894 <MX_GPIO_Init+0x1d0>)
 80027a4:	f000 ff8e 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIG1_Pin|TRIG2_Pin|TRIG3_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	21a8      	movs	r1, #168	; 0xa8
 80027ac:	483a      	ldr	r0, [pc, #232]	; (8002898 <MX_GPIO_Init+0x1d4>)
 80027ae:	f000 ff89 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80027b8:	4838      	ldr	r0, [pc, #224]	; (800289c <MX_GPIO_Init+0x1d8>)
 80027ba:	f000 ff83 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2120      	movs	r1, #32
 80027c2:	4837      	ldr	r0, [pc, #220]	; (80028a0 <MX_GPIO_Init+0x1dc>)
 80027c4:	f000 ff7e 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin BL_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CE_Pin|BL_Pin|DC_Pin|RST_Pin;
 80027c8:	233c      	movs	r3, #60	; 0x3c
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	482d      	ldr	r0, [pc, #180]	; (8002894 <MX_GPIO_Init+0x1d0>)
 80027e0:	f000 fdc6 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <MX_GPIO_Init+0x1e0>)
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f6:	4619      	mov	r1, r3
 80027f8:	482b      	ldr	r0, [pc, #172]	; (80028a8 <MX_GPIO_Init+0x1e4>)
 80027fa:	f000 fdb9 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO1_Pin ECHO2_Pin ECHO3_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO2_Pin|ECHO3_Pin;
 80027fe:	f44f 7341 	mov.w	r3, #772	; 0x304
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <MX_GPIO_Init+0x1e0>)
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800280c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002810:	4619      	mov	r1, r3
 8002812:	4821      	ldr	r0, [pc, #132]	; (8002898 <MX_GPIO_Init+0x1d4>)
 8002814:	f000 fdac 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG1_Pin TRIG2_Pin TRIG3_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin|TRIG2_Pin|TRIG3_Pin;
 8002818:	23a8      	movs	r3, #168	; 0xa8
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281c:	2301      	movs	r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	481a      	ldr	r0, [pc, #104]	; (8002898 <MX_GPIO_Init+0x1d4>)
 8002830:	f000 fd9e 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002834:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	4813      	ldr	r0, [pc, #76]	; (800289c <MX_GPIO_Init+0x1d8>)
 800284e:	f000 fd8f 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002852:	2320      	movs	r3, #32
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002856:	2301      	movs	r3, #1
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	4619      	mov	r1, r3
 8002868:	480d      	ldr	r0, [pc, #52]	; (80028a0 <MX_GPIO_Init+0x1dc>)
 800286a:	f000 fd81 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800286e:	2340      	movs	r3, #64	; 0x40
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287e:	4619      	mov	r1, r3
 8002880:	4807      	ldr	r0, [pc, #28]	; (80028a0 <MX_GPIO_Init+0x1dc>)
 8002882:	f000 fd75 	bl	8003370 <HAL_GPIO_Init>

}
 8002886:	bf00      	nop
 8002888:	3738      	adds	r7, #56	; 0x38
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	48001000 	.word	0x48001000
 8002898:	48001400 	.word	0x48001400
 800289c:	48000400 	.word	0x48000400
 80028a0:	48001800 	.word	0x48001800
 80028a4:	10110000 	.word	0x10110000
 80028a8:	48000800 	.word	0x48000800

080028ac <hc_sr04_measure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hc_sr04_measure */
void hc_sr04_measure(void const * argument)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	choseSensor = 1;
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <hc_sr04_measure+0x118>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	4842      	ldr	r0, [pc, #264]	; (80029c8 <hc_sr04_measure+0x11c>)
 80028be:	f000 ff19 	bl	80036f4 <HAL_GPIO_TogglePin>
	triggerMeasureCenter();
 80028c2:	f7fe fc0d 	bl	80010e0 <triggerMeasureCenter>
	switch(choseSensor)
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <hc_sr04_measure+0x118>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d028      	beq.n	8002920 <hc_sr04_measure+0x74>
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d04b      	beq.n	800296a <hc_sr04_measure+0xbe>
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d16e      	bne.n	80029b4 <hc_sr04_measure+0x108>
	{
	case 1:
		tmp_mesCenter = triggerMeasureCenter();
 80028d6:	f7fe fc03 	bl	80010e0 <triggerMeasureCenter>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <hc_sr04_measure+0x120>)
 80028e0:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesCenter != 0) && (mesCenter > tmp_mesCenter)) || (mesCenter == 0))
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <hc_sr04_measure+0x124>)
 80028e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028ea:	4323      	orrs	r3, r4
 80028ec:	d009      	beq.n	8002902 <hc_sr04_measure+0x56>
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <hc_sr04_measure+0x124>)
 80028f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028f4:	4a35      	ldr	r2, [pc, #212]	; (80029cc <hc_sr04_measure+0x120>)
 80028f6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80028fa:	42a2      	cmp	r2, r4
 80028fc:	bf08      	it	eq
 80028fe:	4299      	cmpeq	r1, r3
 8002900:	d304      	bcc.n	800290c <hc_sr04_measure+0x60>
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <hc_sr04_measure+0x124>)
 8002904:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002908:	4323      	orrs	r3, r4
 800290a:	d105      	bne.n	8002918 <hc_sr04_measure+0x6c>
		{
			mesCenter = tmp_mesCenter;
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <hc_sr04_measure+0x120>)
 800290e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002912:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <hc_sr04_measure+0x124>)
 8002914:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 2;
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <hc_sr04_measure+0x118>)
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
		break;
 800291e:	e04d      	b.n	80029bc <hc_sr04_measure+0x110>
	case 2:
		tmp_mesLeft = triggerMeasureLeft();
 8002920:	f7fe fc04 	bl	800112c <triggerMeasureLeft>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <hc_sr04_measure+0x128>)
 800292a:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesLeft != 0) && (mesLeft > tmp_mesLeft)) || (mesLeft == 0))
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <hc_sr04_measure+0x12c>)
 8002930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002934:	4323      	orrs	r3, r4
 8002936:	d009      	beq.n	800294c <hc_sr04_measure+0xa0>
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <hc_sr04_measure+0x12c>)
 800293a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <hc_sr04_measure+0x128>)
 8002940:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002944:	42a2      	cmp	r2, r4
 8002946:	bf08      	it	eq
 8002948:	4299      	cmpeq	r1, r3
 800294a:	d304      	bcc.n	8002956 <hc_sr04_measure+0xaa>
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <hc_sr04_measure+0x12c>)
 800294e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002952:	4323      	orrs	r3, r4
 8002954:	d105      	bne.n	8002962 <hc_sr04_measure+0xb6>
		{
			mesLeft = tmp_mesLeft;
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <hc_sr04_measure+0x128>)
 8002958:	e9d3 3400 	ldrd	r3, r4, [r3]
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <hc_sr04_measure+0x12c>)
 800295e:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 3;
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <hc_sr04_measure+0x118>)
 8002964:	2203      	movs	r2, #3
 8002966:	701a      	strb	r2, [r3, #0]
		break;
 8002968:	e028      	b.n	80029bc <hc_sr04_measure+0x110>
	case 3:
		tmp_mesRight = triggerMeasureRight();
 800296a:	f7fe fc05 	bl	8001178 <triggerMeasureRight>
 800296e:	4603      	mov	r3, r0
 8002970:	460c      	mov	r4, r1
 8002972:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <hc_sr04_measure+0x130>)
 8002974:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesRight != 0) && (mesRight > tmp_mesRight)) || (mesRight == 0))
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <hc_sr04_measure+0x134>)
 800297a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800297e:	4323      	orrs	r3, r4
 8002980:	d009      	beq.n	8002996 <hc_sr04_measure+0xea>
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <hc_sr04_measure+0x134>)
 8002984:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <hc_sr04_measure+0x130>)
 800298a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800298e:	42a2      	cmp	r2, r4
 8002990:	bf08      	it	eq
 8002992:	4299      	cmpeq	r1, r3
 8002994:	d304      	bcc.n	80029a0 <hc_sr04_measure+0xf4>
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <hc_sr04_measure+0x134>)
 8002998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800299c:	4323      	orrs	r3, r4
 800299e:	d105      	bne.n	80029ac <hc_sr04_measure+0x100>
		{
			mesRight = tmp_mesRight;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <hc_sr04_measure+0x130>)
 80029a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <hc_sr04_measure+0x134>)
 80029a8:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 1;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <hc_sr04_measure+0x118>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
		break;
 80029b2:	e003      	b.n	80029bc <hc_sr04_measure+0x110>
	default:
		choseSensor = 1;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <hc_sr04_measure+0x118>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
		break;
 80029ba:	bf00      	nop
	}

    osDelay(20);
 80029bc:	2014      	movs	r0, #20
 80029be:	f005 fc76 	bl	80082ae <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80029c2:	e77a      	b.n	80028ba <hc_sr04_measure+0xe>
 80029c4:	20001055 	.word	0x20001055
 80029c8:	48000400 	.word	0x48000400
 80029cc:	20001668 	.word	0x20001668
 80029d0:	200014f0 	.word	0x200014f0
 80029d4:	20001660 	.word	0x20001660
 80029d8:	200016c0 	.word	0x200016c0
 80029dc:	20001788 	.word	0x20001788
 80029e0:	20000fe0 	.word	0x20000fe0

080029e4 <display_pii>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_pii */
void display_pii(void const * argument)
{
 80029e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e8:	b09e      	sub	sp, #120	; 0x78
 80029ea:	af1c      	add	r7, sp, #112	; 0x70
 80029ec:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	if(begin == 0)
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <display_pii+0xc4>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d121      	bne.n	8002a3a <display_pii+0x56>
	{
		lcdWelcome(lcd);
 80029f6:	4c2d      	ldr	r4, [pc, #180]	; (8002aac <display_pii+0xc8>)
 80029f8:	4668      	mov	r0, sp
 80029fa:	f104 0310 	add.w	r3, r4, #16
 80029fe:	2258      	movs	r2, #88	; 0x58
 8002a00:	4619      	mov	r1, r3
 8002a02:	f006 fe31 	bl	8009668 <memcpy>
 8002a06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a0a:	f7fe fcc5 	bl	8001398 <lcdWelcome>
		begin = 1;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <display_pii+0xc4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
		osDelay(4000);
 8002a14:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002a18:	f005 fc49 	bl	80082ae <osDelay>
		lcdClear(lcd);
 8002a1c:	4c23      	ldr	r4, [pc, #140]	; (8002aac <display_pii+0xc8>)
 8002a1e:	4668      	mov	r0, sp
 8002a20:	f104 0310 	add.w	r3, r4, #16
 8002a24:	2258      	movs	r2, #88	; 0x58
 8002a26:	4619      	mov	r1, r3
 8002a28:	f006 fe1e 	bl	8009668 <memcpy>
 8002a2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a30:	f7fe fd2c 	bl	800148c <lcdClear>
		lcdClearBuffer(&lcd);
 8002a34:	481d      	ldr	r0, [pc, #116]	; (8002aac <display_pii+0xc8>)
 8002a36:	f7fe fe20 	bl	800167a <lcdClearBuffer>
	}

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a3e:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <display_pii+0xcc>)
 8002a40:	f000 fe58 	bl	80036f4 <HAL_GPIO_TogglePin>
	display_driver(mesLeft, mesCenter, mesRight, lcd);
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <display_pii+0xd0>)
 8002a46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <display_pii+0xd4>)
 8002a4c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <display_pii+0xd8>)
 8002a52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <display_pii+0xc8>)
 8002a58:	ab02      	add	r3, sp, #8
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	2268      	movs	r2, #104	; 0x68
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fe02 	bl	8009668 <memcpy>
 8002a64:	e9cd 4500 	strd	r4, r5, [sp]
 8002a68:	4652      	mov	r2, sl
 8002a6a:	465b      	mov	r3, fp
 8002a6c:	4640      	mov	r0, r8
 8002a6e:	4649      	mov	r1, r9
 8002a70:	f7ff fa40 	bl	8001ef4 <display_driver>

    mesLeft = 0;
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <display_pii+0xd0>)
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	e9c2 3400 	strd	r3, r4, [r2]
    mesCenter = 0;
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <display_pii+0xd4>)
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	e9c2 3400 	strd	r3, r4, [r2]
    mesRight = 0;
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <display_pii+0xd8>)
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	f04f 0400 	mov.w	r4, #0
 8002a9a:	e9c2 3400 	strd	r3, r4, [r2]
    osDelay(200);
 8002a9e:	20c8      	movs	r0, #200	; 0xc8
 8002aa0:	f005 fc05 	bl	80082ae <osDelay>
	if(begin == 0)
 8002aa4:	e7a3      	b.n	80029ee <display_pii+0xa>
 8002aa6:	bf00      	nop
 8002aa8:	20001670 	.word	0x20001670
 8002aac:	20000fec 	.word	0x20000fec
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	200016c0 	.word	0x200016c0
 8002ab8:	200014f0 	.word	0x200014f0
 8002abc:	20000fe0 	.word	0x20000fe0

08002ac0 <buzzer_work>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buzzer_work */
void buzzer_work(void const * argument)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buzzer_work */
  /* Infinite loop */
  for(;;)
  {
	  buzzerValue = mesCenter;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <buzzer_work+0x70>)
 8002aca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <buzzer_work+0x74>)
 8002ad2:	701a      	strb	r2, [r3, #0]
	  if(mesLeft < buzzerValue)
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <buzzer_work+0x74>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <buzzer_work+0x78>)
 8002ae0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002ae4:	42a2      	cmp	r2, r4
 8002ae6:	bf08      	it	eq
 8002ae8:	4299      	cmpeq	r1, r3
 8002aea:	d205      	bcs.n	8002af8 <buzzer_work+0x38>
	  {
		  buzzerValue = mesLeft;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <buzzer_work+0x78>)
 8002aee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <buzzer_work+0x74>)
 8002af6:	701a      	strb	r2, [r3, #0]
	  }
	  if(mesRight < buzzerValue)
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <buzzer_work+0x74>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f04f 0400 	mov.w	r4, #0
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <buzzer_work+0x7c>)
 8002b04:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002b08:	42a2      	cmp	r2, r4
 8002b0a:	bf08      	it	eq
 8002b0c:	4299      	cmpeq	r1, r3
 8002b0e:	d205      	bcs.n	8002b1c <buzzer_work+0x5c>
	  {
		  buzzerValue = mesRight;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <buzzer_work+0x7c>)
 8002b12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <buzzer_work+0x74>)
 8002b1a:	701a      	strb	r2, [r3, #0]
	  }
	  buzzerDriver(buzzerValue);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <buzzer_work+0x74>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f04f 0400 	mov.w	r4, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f7ff f97d 	bl	8001e28 <buzzerDriver>
	  buzzerValue = mesCenter;
 8002b2e:	e7cb      	b.n	8002ac8 <buzzer_work+0x8>
 8002b30:	200014f0 	.word	0x200014f0
 8002b34:	2000177c 	.word	0x2000177c
 8002b38:	200016c0 	.word	0x200016c0
 8002b3c:	20000fe0 	.word	0x20000fe0

08002b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b52:	f000 fae9 	bl	8003128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40001000 	.word	0x40001000

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_MspInit+0x44>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_MspInit+0x44>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6613      	str	r3, [r2, #96]	; 0x60
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_MspInit+0x44>)
 8002b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_MspInit+0x44>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_MspInit+0x44>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_MspInit+0x44>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <HAL_UART_MspInit+0xe0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002bea:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002c0e:	f000 ffa7 	bl	8003b60 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002c12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c24:	2308      	movs	r3, #8
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	481d      	ldr	r0, [pc, #116]	; (8002ca4 <HAL_UART_MspInit+0xe8>)
 8002c30:	f000 fb9e 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c34:	e02d      	b.n	8002c92 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0xec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d128      	bne.n	8002c92 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c5e:	f043 0308 	orr.w	r3, r3, #8
 8002c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_UART_MspInit+0xe4>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c82:	2307      	movs	r3, #7
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c86:	f107 031c 	add.w	r3, r7, #28
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4807      	ldr	r0, [pc, #28]	; (8002cac <HAL_UART_MspInit+0xf0>)
 8002c8e:	f000 fb6f 	bl	8003370 <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40008000 	.word	0x40008000
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48001800 	.word	0x48001800
 8002ca8:	40004800 	.word	0x40004800
 8002cac:	48000c00 	.word	0x48000c00

08002cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_SPI_MspInit+0x7c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d128      	bne.n	8002d24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_SPI_MspInit+0x80>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002d02:	2382      	movs	r3, #130	; 0x82
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d12:	2305      	movs	r3, #5
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d20:	f000 fb26 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013000 	.word	0x40013000
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_TIM_OnePulse_MspInit+0x38>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10b      	bne.n	8002d5e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8002d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d50:	6613      	str	r3, [r2, #96]	; 0x60
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <HAL_TIM_Base_MspInit+0x68>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10c      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6593      	str	r3, [r2, #88]	; 0x58
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d9e:	e018      	b.n	8002dd2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_TIM_Base_MspInit+0x70>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d113      	bne.n	8002dd2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002db0:	f043 0320 	orr.w	r3, r3, #32
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_TIM_Base_MspInit+0x6c>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2037      	movs	r0, #55	; 0x37
 8002dc8:	f000 faa8 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dcc:	2037      	movs	r0, #55	; 0x37
 8002dce:	f000 fac1 	bl	8003354 <HAL_NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40001400 	.word	0x40001400

08002de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_TIM_MspPostInit+0x64>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11c      	bne.n	8002e44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_TIM_MspPostInit+0x68>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <HAL_TIM_MspPostInit+0x68>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HAL_TIM_MspPostInit+0x68>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e22:	2340      	movs	r3, #64	; 0x40
 8002e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e40:	f000 fa96 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d154      	bne.n	8002f20 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ea0:	230a      	movs	r3, #10
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eae:	f000 fa5f 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eca:	f000 fa51 	bl	8003370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d114      	bne.n	8002f1c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002f0a:	f000 fe19 	bl	8003b40 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_PCD_MspInit+0xd4>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f18:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f1a:	e001      	b.n	8002f20 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002f1c:	f000 fe10 	bl	8003b40 <HAL_PWREx_EnableVddUSB>
}
 8002f20:	bf00      	nop
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	2036      	movs	r0, #54	; 0x36
 8002f42:	f000 f9eb 	bl	800331c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f46:	2036      	movs	r0, #54	; 0x36
 8002f48:	f000 fa04 	bl	8003354 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_InitTick+0xa0>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_InitTick+0xa0>)
 8002f52:	f043 0310 	orr.w	r3, r3, #16
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_InitTick+0xa0>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f64:	f107 0210 	add.w	r2, r7, #16
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 fc1a 	bl	80047a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002f74:	f001 fbec 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_InitTick+0xa4>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0c9b      	lsrs	r3, r3, #18
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <HAL_InitTick+0xac>)
 8002f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002f94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002fae:	f002 fd65 	bl	8005a7c <HAL_TIM_Base_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <HAL_InitTick+0xa8>)
 8002fba:	f002 fdb7 	bl	8005b2c <HAL_TIM_Base_Start_IT>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	e000      	b.n	8002fc4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	20001790 	.word	0x20001790
 8002fd8:	40001000 	.word	0x40001000

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <UsageFault_Handler+0x4>

08003002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <TIM6_DAC_IRQHandler+0x10>)
 8003016:	f003 f8bd 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20001790 	.word	0x20001790

08003024 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <TIM7_IRQHandler+0x10>)
 800302a:	f003 f8b3 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20001730 	.word	0x20001730

08003038 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <SystemInit+0x64>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	4a16      	ldr	r2, [pc, #88]	; (800309c <SystemInit+0x64>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <SystemInit+0x68>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <SystemInit+0x68>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <SystemInit+0x68>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <SystemInit+0x68>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <SystemInit+0x68>)
 8003064:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003068:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800306c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <SystemInit+0x68>)
 8003070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003074:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <SystemInit+0x68>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <SystemInit+0x68>)
 800307c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <SystemInit+0x68>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <SystemInit+0x64>)
 800308a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800308e:	609a      	str	r2, [r3, #8]
#endif
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00
 80030a0:	40021000 	.word	0x40021000

080030a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030a8:	f7ff ffc6 	bl	8003038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80030ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80030ae:	e003      	b.n	80030b8 <LoopCopyDataInit>

080030b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80030b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80030b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80030b6:	3104      	adds	r1, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80030b8:	480a      	ldr	r0, [pc, #40]	; (80030e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80030bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80030be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80030c0:	d3f6      	bcc.n	80030b0 <CopyDataInit>
	ldr	r2, =_sbss
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80030c4:	e002      	b.n	80030cc <LoopFillZerobss>

080030c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030c8:	f842 3b04 	str.w	r3, [r2], #4

080030cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <LoopForever+0x16>)
	cmp	r2, r3
 80030ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030d0:	d3f9      	bcc.n	80030c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d2:	f006 faa5 	bl	8009620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030d6:	f7ff f813 	bl	8002100 <main>

080030da <LoopForever>:

LoopForever:
    b LoopForever
 80030da:	e7fe      	b.n	80030da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030dc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80030e0:	08009b28 	.word	0x08009b28
	ldr	r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030e8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80030ec:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80030f0:	200017e0 	.word	0x200017e0

080030f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <ADC1_IRQHandler>

080030f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f900 	bl	8003306 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003106:	2000      	movs	r0, #0
 8003108:	f7ff ff10 	bl	8002f2c <HAL_InitTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	71fb      	strb	r3, [r7, #7]
 8003116:	e001      	b.n	800311c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003118:	f7ff fd2c 	bl	8002b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800311c:	79fb      	ldrb	r3, [r7, #7]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x20>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x24>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_IncTick+0x24>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000008 	.word	0x20000008
 800314c:	200017dc 	.word	0x200017dc

08003150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return uwTick;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_GetTick+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	200017dc 	.word	0x200017dc

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff ffee 	bl	8003150 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_Delay+0x40>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffde 	bl	8003150 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000008 	.word	0x20000008

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60d3      	str	r3, [r2, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff4c 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800332e:	f7ff ff61 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003332:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f7ff ffb1 	bl	80032a0 <NVIC_EncodePriority>
 800333e:	4602      	mov	r2, r0
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff80 	bl	800324c <__NVIC_SetPriority>
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff54 	bl	8003210 <__NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337e:	e166      	b.n	800364e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8158 	beq.w	8003648 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d00b      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d007      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ac:	2b11      	cmp	r3, #17
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b12      	cmp	r3, #18
 80033b6:	d130      	bne.n	800341a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ee:	2201      	movs	r2, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0201 	and.w	r2, r3, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0xea>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b12      	cmp	r3, #18
 8003458:	d123      	bne.n	80034a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	6939      	ldr	r1, [r7, #16]
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80b2 	beq.w	8003648 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_GPIO_Init+0x2fc>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	4a60      	ldr	r2, [pc, #384]	; (800366c <HAL_GPIO_Init+0x2fc>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6613      	str	r3, [r2, #96]	; 0x60
 80034f0:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_GPIO_Init+0x2fc>)
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034fc:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_GPIO_Init+0x300>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003526:	d02b      	beq.n	8003580 <HAL_GPIO_Init+0x210>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x304>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d025      	beq.n	800357c <HAL_GPIO_Init+0x20c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x308>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01f      	beq.n	8003578 <HAL_GPIO_Init+0x208>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x30c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d019      	beq.n	8003574 <HAL_GPIO_Init+0x204>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x310>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_GPIO_Init+0x200>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <HAL_GPIO_Init+0x314>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00d      	beq.n	800356c <HAL_GPIO_Init+0x1fc>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a4d      	ldr	r2, [pc, #308]	; (8003688 <HAL_GPIO_Init+0x318>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <HAL_GPIO_Init+0x1f8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a4c      	ldr	r2, [pc, #304]	; (800368c <HAL_GPIO_Init+0x31c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_GPIO_Init+0x1f4>
 8003560:	2307      	movs	r3, #7
 8003562:	e00e      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003564:	2308      	movs	r3, #8
 8003566:	e00c      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003568:	2306      	movs	r3, #6
 800356a:	e00a      	b.n	8003582 <HAL_GPIO_Init+0x212>
 800356c:	2305      	movs	r3, #5
 800356e:	e008      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003570:	2304      	movs	r3, #4
 8003572:	e006      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003574:	2303      	movs	r3, #3
 8003576:	e004      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003578:	2302      	movs	r3, #2
 800357a:	e002      	b.n	8003582 <HAL_GPIO_Init+0x212>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003580:	2300      	movs	r3, #0
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	f002 0203 	and.w	r2, r2, #3
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	4093      	lsls	r3, r2
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003592:	4937      	ldr	r1, [pc, #220]	; (8003670 <HAL_GPIO_Init+0x300>)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035a0:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_GPIO_Init+0x320>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035c4:	4a32      	ldr	r2, [pc, #200]	; (8003690 <HAL_GPIO_Init+0x320>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_GPIO_Init+0x320>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_GPIO_Init+0x320>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f4:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_GPIO_Init+0x320>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_GPIO_Init+0x320>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_GPIO_Init+0x320>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_GPIO_Init+0x320>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f ae91 	bne.w	8003380 <HAL_GPIO_Init+0x10>
  }
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	40010000 	.word	0x40010000
 8003674:	48000400 	.word	0x48000400
 8003678:	48000800 	.word	0x48000800
 800367c:	48000c00 	.word	0x48000c00
 8003680:	48001000 	.word	0x48001000
 8003684:	48001400 	.word	0x48001400
 8003688:	48001800 	.word	0x48001800
 800368c:	48001c00 	.word	0x48001c00
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e001      	b.n	80036b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43d9      	mvns	r1, r3
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	400b      	ands	r3, r1
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	b08f      	sub	sp, #60	; 0x3c
 800372c:	af0a      	add	r7, sp, #40	; 0x28
 800372e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e116      	b.n	8003968 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fb7d 	bl	8002e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f004 faef 	bl	8007d5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	687e      	ldr	r6, [r7, #4]
 8003786:	466d      	mov	r5, sp
 8003788:	f106 0410 	add.w	r4, r6, #16
 800378c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003798:	e885 0003 	stmia.w	r5, {r0, r1}
 800379c:	1d33      	adds	r3, r6, #4
 800379e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f004 fa89 	bl	8007cb8 <USB_CoreInit>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d7      	b.n	8003968 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 fadd 	bl	8007d7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e04a      	b.n	8003860 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	333d      	adds	r3, #61	; 0x3d
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	333c      	adds	r3, #60	; 0x3c
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	b298      	uxth	r0, r3
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3342      	adds	r3, #66	; 0x42
 8003806:	4602      	mov	r2, r0
 8003808:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	333f      	adds	r3, #63	; 0x3f
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3344      	adds	r3, #68	; 0x44
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3348      	adds	r3, #72	; 0x48
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3350      	adds	r3, #80	; 0x50
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	3301      	adds	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d3af      	bcc.n	80037ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e044      	b.n	80038fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	3301      	adds	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3b5      	bcc.n	8003870 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	687e      	ldr	r6, [r7, #4]
 800390c:	466d      	mov	r5, sp
 800390e:	f106 0410 	add.w	r4, r6, #16
 8003912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800391e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003922:	1d33      	adds	r3, r6, #4
 8003924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f004 fa54 	bl	8007dd4 <USB_DevInit>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e014      	b.n	8003968 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f80a 	bl	8003970 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fbe4 	bl	800812e <USB_DevDisconnect>

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003970 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	f043 0303 	orr.w	r3, r3, #3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c8:	d102      	bne.n	80039d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80039ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ce:	e00b      	b.n	80039e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80039d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d102      	bne.n	80039e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80039e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e4:	e000      	b.n	80039e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80039e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000

080039f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d141      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a06:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a12:	d131      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a14:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a24:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a2c:	4a41      	ldr	r2, [pc, #260]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2232      	movs	r2, #50	; 0x32
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a3f      	ldr	r2, [pc, #252]	; (8003b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4a:	e002      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d102      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f2      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d158      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e057      	b.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a78:	4b2e      	ldr	r3, [pc, #184]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a88:	e04d      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a90:	d141      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a92:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9e:	d131      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aa0:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa6:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2232      	movs	r2, #50	; 0x32
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	0c9b      	lsrs	r3, r3, #18
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ad6:	e002      	b.n	8003ade <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d102      	bne.n	8003af2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f2      	bne.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afe:	d112      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e011      	b.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b14:	e007      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b24:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40007000 	.word	0x40007000
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	431bde83 	.word	0x431bde83

08003b40 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b4e:	6053      	str	r3, [r2, #4]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000

08003b60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6e:	6053      	str	r3, [r2, #4]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40007000 	.word	0x40007000

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f000 bc16 	b.w	80043c0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b94:	4ba0      	ldr	r3, [pc, #640]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9e:	4b9e      	ldr	r3, [pc, #632]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80e4 	beq.w	8003d7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4c>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	f040 808b 	bne.w	8003cda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	f040 8087 	bne.w	8003cda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bcc:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_OscConfig+0x64>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e3ed      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_RCC_OscConfig+0x7e>
 8003bf4:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	e005      	b.n	8003c0a <HAL_RCC_OscConfig+0x8a>
 8003bfe:	4b86      	ldr	r3, [pc, #536]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d223      	bcs.n	8003c56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fdfa 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e3ce      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c22:	4b7d      	ldr	r3, [pc, #500]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7c      	ldr	r2, [pc, #496]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c28:	f043 0308 	orr.w	r3, r3, #8
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4977      	ldr	r1, [pc, #476]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c40:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4972      	ldr	r1, [pc, #456]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	e025      	b.n	8003ca2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	496a      	ldr	r1, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	4965      	ldr	r1, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fdba 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e38e      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca2:	f000 fcbf 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a5a      	ldr	r2, [pc, #360]	; (8003e1c <HAL_RCC_OscConfig+0x29c>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	fa21 f303 	lsr.w	r3, r1, r3
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_RCC_OscConfig+0x2a0>)
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cc2:	4b58      	ldr	r3, [pc, #352]	; (8003e24 <HAL_RCC_OscConfig+0x2a4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f930 	bl	8002f2c <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d052      	beq.n	8003d7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	e372      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d032      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4c      	ldr	r2, [pc, #304]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cee:	f7ff fa2f 	bl	8003150 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf6:	f7ff fa2b 	bl	8003150 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e35b      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d08:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d1a:	f043 0308 	orr.w	r3, r3, #8
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	493a      	ldr	r1, [pc, #232]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
 8003d46:	e01a      	b.n	8003d7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d48:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d54:	f7ff f9fc 	bl	8003150 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d5c:	f7ff f9f8 	bl	8003150 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e328      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1dc>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d073      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x21c>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d10e      	bne.n	8003db4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d063      	beq.n	8003e70 <HAL_RCC_OscConfig+0x2f0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d15f      	bne.n	8003e70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e305      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x24c>
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e01d      	b.n	8003e08 <HAL_RCC_OscConfig+0x288>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x270>
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a0f      	ldr	r2, [pc, #60]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x288>
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <HAL_RCC_OscConfig+0x298>)
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7ff f99e 	bl	8003150 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	e010      	b.n	8003e3a <HAL_RCC_OscConfig+0x2ba>
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08009ab8 	.word	0x08009ab8
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7ff f992 	bl	8003150 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e2c2      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3a:	4baf      	ldr	r3, [pc, #700]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x2a8>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7ff f982 	bl	8003150 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7ff f97e 	bl	8003150 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e2ae      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e62:	4ba5      	ldr	r3, [pc, #660]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2d0>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d060      	beq.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_OscConfig+0x310>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d116      	bne.n	8003ebe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e90:	4b99      	ldr	r3, [pc, #612]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x328>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e28b      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	4990      	ldr	r1, [pc, #576]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ebc:	e040      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d023      	beq.n	8003f0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec6:	4b8c      	ldr	r3, [pc, #560]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a8b      	ldr	r2, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7ff f93d 	bl	8003150 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eda:	f7ff f939 	bl	8003150 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e269      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eec:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	497c      	ldr	r1, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	e018      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a79      	ldr	r2, [pc, #484]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7ff f919 	bl	8003150 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f22:	f7ff f915 	bl	8003150 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e245      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f54:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7ff f8f4 	bl	8003150 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7ff f8f0 	bl	8003150 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e220      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ef      	beq.n	8003f6c <HAL_RCC_OscConfig+0x3ec>
 8003f8c:	e01b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7ff f8d7 	bl	8003150 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7ff f8d3 	bl	8003150 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e203      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ef      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a6 	beq.w	8004120 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fd8:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_RCC_OscConfig+0x57c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d118      	bne.n	800403e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x57c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a3a      	ldr	r2, [pc, #232]	; (80040fc <HAL_RCC_OscConfig+0x57c>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004018:	f7ff f89a 	bl	8003150 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7ff f896 	bl	8003150 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1c6      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004032:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x57c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_RCC_OscConfig+0x4d8>
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004056:	e024      	b.n	80040a2 <HAL_RCC_OscConfig+0x522>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d110      	bne.n	8004082 <HAL_RCC_OscConfig+0x502>
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004080:	e00f      	b.n	80040a2 <HAL_RCC_OscConfig+0x522>
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7ff f851 	bl	8003150 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7ff f84d 	bl	8003150 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e17b      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x578>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ed      	beq.n	80040b2 <HAL_RCC_OscConfig+0x532>
 80040d6:	e01a      	b.n	800410e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7ff f83a 	bl	8003150 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040de:	e00f      	b.n	8004100 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7ff f836 	bl	8003150 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d906      	bls.n	8004100 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e164      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004100:	4ba8      	ldr	r3, [pc, #672]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e8      	bne.n	80040e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4ba3      	ldr	r3, [pc, #652]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4aa2      	ldr	r2, [pc, #648]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004134:	4b9b      	ldr	r3, [pc, #620]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413a:	4a9a      	ldr	r2, [pc, #616]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7ff f804 	bl	8003150 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800414c:	f7ff f800 	bl	8003150 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e130      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415e:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x5cc>
 800416c:	e01b      	b.n	80041a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416e:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004174:	4a8b      	ldr	r2, [pc, #556]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fe ffe7 	bl	8003150 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004186:	f7fe ffe3 	bl	8003150 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e113      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004198:	4b82      	ldr	r3, [pc, #520]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8107 	beq.w	80043be <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f040 80cb 	bne.w	8004350 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ba:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d12c      	bne.n	8004228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	3b01      	subs	r3, #1
 80041da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d123      	bne.n	8004228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d11b      	bne.n	8004228 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d113      	bne.n	8004228 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d109      	bne.n	8004228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d06d      	beq.n	8004304 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d068      	beq.n	8004300 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800422e:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800423a:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0ba      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a55      	ldr	r2, [pc, #340]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004254:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004256:	f7fe ff7b 	bl	8003150 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fe ff77 	bl	8003150 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0a7      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427c:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <HAL_RCC_OscConfig+0x828>)
 8004282:	4013      	ands	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800428c:	3a01      	subs	r2, #1
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004296:	0212      	lsls	r2, r2, #8
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800429e:	0852      	lsrs	r2, r2, #1
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0552      	lsls	r2, r2, #21
 80042a4:	4311      	orrs	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042aa:	0852      	lsrs	r2, r2, #1
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0652      	lsls	r2, r2, #25
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b6:	06d2      	lsls	r2, r2, #27
 80042b8:	430a      	orrs	r2, r1
 80042ba:	493a      	ldr	r1, [pc, #232]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c0:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042cc:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d8:	f7fe ff3a 	bl	8003150 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fe ff36 	bl	8003150 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e066      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fe:	e05e      	b.n	80043be <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e05d      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d156      	bne.n	80043be <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004328:	f7fe ff12 	bl	8003150 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe ff0e 	bl	8003150 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e03e      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x7b0>
 800434e:	e036      	b.n	80043be <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d031      	beq.n	80043ba <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800435c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004360:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_OscConfig+0x824>)
 8004380:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fe fee1 	bl	8003150 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	e00c      	b.n	80043ac <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe fedd 	bl	8003150 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d905      	bls.n	80043ac <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e00d      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
 80043a4:	40021000 	.word	0x40021000
 80043a8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x848>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ec      	bne.n	8004392 <HAL_RCC_OscConfig+0x812>
 80043b8:	e001      	b.n	80043be <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e10f      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b89      	ldr	r3, [pc, #548]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b86      	ldr	r3, [pc, #536]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 020f 	bic.w	r2, r3, #15
 80043fa:	4984      	ldr	r1, [pc, #528]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b82      	ldr	r3, [pc, #520]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0f7      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8089 	beq.w	8004534 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d133      	bne.n	8004492 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	4b79      	ldr	r3, [pc, #484]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0e4      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800443a:	f000 fa41 	bl	80048c0 <RCC_GetSysClockFreqFromPLLSource>
 800443e:	4602      	mov	r2, r0
 8004440:	4b74      	ldr	r3, [pc, #464]	; (8004614 <HAL_RCC_ClockConfig+0x248>)
 8004442:	429a      	cmp	r2, r3
 8004444:	d955      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004446:	4b72      	ldr	r3, [pc, #456]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004452:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445a:	4a6d      	ldr	r2, [pc, #436]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e044      	b.n	80044f2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03e      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x126>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d13a      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800447c:	4b64      	ldr	r3, [pc, #400]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004484:	4a62      	ldr	r2, [pc, #392]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e02f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449a:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d115      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0ac      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0a0      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e098      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044d2:	f000 f8a7 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b4e      	ldr	r3, [pc, #312]	; (8004614 <HAL_RCC_ClockConfig+0x248>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d909      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044de:	4b4c      	ldr	r3, [pc, #304]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4944      	ldr	r1, [pc, #272]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fe fe24 	bl	8003150 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fe fe20 	bl	8003150 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e070      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4930      	ldr	r1, [pc, #192]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
 8004552:	e008      	b.n	8004566 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d105      	bne.n	8004566 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 8004560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004564:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004566:	4b29      	ldr	r3, [pc, #164]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d210      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 020f 	bic.w	r2, r3, #15
 800457c:	4923      	ldr	r1, [pc, #140]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <HAL_RCC_ClockConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e036      	b.n	8004604 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4918      	ldr	r1, [pc, #96]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d4:	f000 f826 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045d8:	4601      	mov	r1, r0
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_ClockConfig+0x244>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <HAL_RCC_ClockConfig+0x24c>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa21 f303 	lsr.w	r3, r1, r3
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x250>)
 80045f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x254>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fc97 	bl	8002f2c <HAL_InitTick>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]

  return status;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40022000 	.word	0x40022000
 8004610:	40021000 	.word	0x40021000
 8004614:	04c4b400 	.word	0x04c4b400
 8004618:	08009ab8 	.word	0x08009ab8
 800461c:	20000000 	.word	0x20000000
 8004620:	20000004 	.word	0x20000004

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800463c:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d121      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d11e      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004664:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e005      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004680:	4a2a      	ldr	r2, [pc, #168]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d102      	bne.n	80046a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_GetSysClockFreq+0x10c>)
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e004      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b0c      	cmp	r3, #12
 80046b0:	d133      	bne.n	800471a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0xaa>
 80046c6:	e005      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046ca:	617b      	str	r3, [r7, #20]
      break;
 80046cc:	e005      	b.n	80046da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046d0:	617b      	str	r3, [r7, #20]
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	617b      	str	r3, [r7, #20]
      break;
 80046d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	3301      	adds	r3, #1
 80046e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	fb02 f203 	mul.w	r2, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_GetSysClockFreq+0x104>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	0e5b      	lsrs	r3, r3, #25
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	3301      	adds	r3, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800471a:	69bb      	ldr	r3, [r7, #24]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40021000 	.word	0x40021000
 800472c:	08009ad0 	.word	0x08009ad0
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4601      	mov	r1, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	08009ac8 	.word	0x08009ac8

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004780:	f7ff ffda 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004784:	4601      	mov	r1, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08009ac8 	.word	0x08009ac8

080047a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	220f      	movs	r2, #15
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0203 	and.w	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_GetClockConfig+0x5c>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_RCC_GetClockConfig+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	40022000 	.word	0x40022000

0800480c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff f8c8 	bl	80039b8 <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
 800482a:	e014      	b.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004844:	f7ff f8b8 	bl	80039b8 <HAL_PWREx_GetVoltageRange>
 8004848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d10b      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d913      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2ba0      	cmp	r3, #160	; 0xa0
 8004868:	d902      	bls.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e00d      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e00a      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d902      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800487c:	2302      	movs	r3, #2
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e004      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d101      	bne.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	4909      	ldr	r1, [pc, #36]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40022000 	.word	0x40022000

080048c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d118      	bne.n	8004908 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048d6:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e005      	b.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f2:	4b23      	ldr	r3, [pc, #140]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004906:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d002      	beq.n	800491e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d003      	beq.n	8004924 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800491c:	e005      	b.n	800492a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004920:	613b      	str	r3, [r7, #16]
    break;
 8004922:	e005      	b.n	8004930 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004926:	613b      	str	r3, [r7, #16]
    break;
 8004928:	e002      	b.n	8004930 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	613b      	str	r3, [r7, #16]
    break;
 800492e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	3301      	adds	r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	fb02 f203 	mul.w	r2, r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0e5b      	lsrs	r3, r3, #25
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	3301      	adds	r3, #1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004970:	683b      	ldr	r3, [r7, #0]
}
 8004972:	4618      	mov	r0, r3
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	08009ad0 	.word	0x08009ad0
 8004988:	00f42400 	.word	0x00f42400
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004998:	2300      	movs	r3, #0
 800499a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800499c:	2300      	movs	r3, #0
 800499e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d03d      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d00b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d804      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049c0:	e01d      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80049c2:	2b60      	cmp	r3, #96	; 0x60
 80049c4:	d01e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d01c      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049ca:	e018      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049cc:	4b86      	ldr	r3, [pc, #536]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a85      	ldr	r2, [pc, #532]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d8:	e015      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fafd 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ea:	e00c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3320      	adds	r3, #32
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fbe4 	bl	80051c0 <RCCEx_PLLSAI2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	74fb      	strb	r3, [r7, #19]
      break;
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a0c:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a12:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1a:	4973      	ldr	r1, [pc, #460]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d042      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3c:	d00f      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d805      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4c:	d017      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004a4e:	e01f      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a54:	d01f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d01c      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a5c:	e018      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4a61      	ldr	r2, [pc, #388]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a6a:	e015      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fab4 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3320      	adds	r3, #32
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fb9b 	bl	80051c0 <RCCEx_PLLSAI2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	74fb      	strb	r3, [r7, #19]
      break;
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a9e:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	494e      	ldr	r1, [pc, #312]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ab4:	e001      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 809f 	beq.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4a40      	ldr	r2, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0a:	f7fe fb21 	bl	8003150 <HAL_GetTick>
 8004b0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b10:	e009      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fe fb1d 	bl	8003150 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d902      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	74fb      	strb	r3, [r7, #19]
        break;
 8004b24:	e005      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b26:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ef      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d15b      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d019      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b82:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d016      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe fadc 	bl	8003150 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fad8 	bl	8003150 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d902      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ec      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be0:	e008      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	74bb      	strb	r3, [r7, #18]
 8004be6:	e005      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf4:	7c7b      	ldrb	r3, [r7, #17]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfa:	4ba0      	ldr	r3, [pc, #640]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4a9f      	ldr	r2, [pc, #636]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c12:	4b9a      	ldr	r3, [pc, #616]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 0203 	bic.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	4996      	ldr	r1, [pc, #600]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c34:	4b91      	ldr	r3, [pc, #580]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 020c 	bic.w	r2, r3, #12
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	498e      	ldr	r1, [pc, #568]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c56:	4b89      	ldr	r3, [pc, #548]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	4985      	ldr	r1, [pc, #532]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c78:	4b80      	ldr	r3, [pc, #512]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	497d      	ldr	r1, [pc, #500]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9a:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	4974      	ldr	r1, [pc, #464]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	496c      	ldr	r1, [pc, #432]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cec:	4963      	ldr	r1, [pc, #396]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d00:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0e:	495b      	ldr	r1, [pc, #364]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d22:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	4952      	ldr	r1, [pc, #328]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d44:	4b4d      	ldr	r3, [pc, #308]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	494a      	ldr	r1, [pc, #296]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d66:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	4941      	ldr	r1, [pc, #260]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d88:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	4939      	ldr	r1, [pc, #228]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d028      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	4930      	ldr	r1, [pc, #192]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd4:	60d3      	str	r3, [r2, #12]
 8004dd6:	e011      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2101      	movs	r1, #1
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f8f9 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d04d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e10:	d108      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e22:	e012      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e2a:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e42:	490e      	ldr	r1, [pc, #56]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e52:	d106      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
 8004e60:	e020      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a02      	ldr	r2, [pc, #8]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e76:	60d3      	str	r3, [r2, #12]
 8004e78:	e014      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f8a5 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d028      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb0:	4b4a      	ldr	r3, [pc, #296]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ebe:	4947      	ldr	r1, [pc, #284]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ece:	d106      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a41      	ldr	r2, [pc, #260]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	e011      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2101      	movs	r1, #1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f876 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef8:	7cfb      	ldrb	r3, [r7, #19]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0e:	4b33      	ldr	r3, [pc, #204]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1e:	492f      	ldr	r1, [pc, #188]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2102      	movs	r1, #2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f851 	bl	8004fe0 <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f5e:	f023 0204 	bic.w	r2, r3, #4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f68:	491c      	ldr	r1, [pc, #112]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f82:	f023 0218 	bic.w	r2, r3, #24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	4913      	ldr	r1, [pc, #76]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d017      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fa0:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	490a      	ldr	r1, [pc, #40]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000

08004fe0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fee:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ffa:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0203 	and.w	r2, r3, #3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d103      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
       ||
 800500e:	2b00      	cmp	r3, #0
 8005010:	d13f      	bne.n	8005092 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e03c      	b.n	8005092 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d00c      	beq.n	800503a <RCCEx_PLLSAI1_Config+0x5a>
 8005020:	2b03      	cmp	r3, #3
 8005022:	d013      	beq.n	800504c <RCCEx_PLLSAI1_Config+0x6c>
 8005024:	2b01      	cmp	r3, #1
 8005026:	d120      	bne.n	800506a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005028:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d11d      	bne.n	8005070 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005038:	e01a      	b.n	8005070 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800503a:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	2b00      	cmp	r3, #0
 8005044:	d116      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504a:	e013      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504c:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10f      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005058:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005068:	e006      	b.n	8005078 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
      break;
 800506e:	e004      	b.n	800507a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005070:	bf00      	nop
 8005072:	e002      	b.n	800507a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005078:	bf00      	nop
    }

    if(status == HAL_OK)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005080:	4b4b      	ldr	r3, [pc, #300]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4948      	ldr	r1, [pc, #288]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 8086 	bne.w	80051a6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800509a:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a44      	ldr	r2, [pc, #272]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a6:	f7fe f853 	bl	8003150 <HAL_GetTick>
 80050aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ac:	e009      	b.n	80050c2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ae:	f7fe f84f 	bl	8003150 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d902      	bls.n	80050c2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	73fb      	strb	r3, [r7, #15]
        break;
 80050c0:	e005      	b.n	80050ce <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ef      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d168      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d113      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050da:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	0211      	lsls	r1, r2, #8
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68d2      	ldr	r2, [r2, #12]
 80050ec:	06d2      	lsls	r2, r2, #27
 80050ee:	4311      	orrs	r1, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	3a01      	subs	r2, #1
 80050f6:	0112      	lsls	r2, r2, #4
 80050f8:	430a      	orrs	r2, r1
 80050fa:	492d      	ldr	r1, [pc, #180]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
 8005100:	e02d      	b.n	800515e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d115      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005108:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
 8005114:	0211      	lsls	r1, r2, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6912      	ldr	r2, [r2, #16]
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	3a01      	subs	r2, #1
 800511e:	0552      	lsls	r2, r2, #21
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6852      	ldr	r2, [r2, #4]
 8005126:	3a01      	subs	r2, #1
 8005128:	0112      	lsls	r2, r2, #4
 800512a:	430a      	orrs	r2, r1
 800512c:	4920      	ldr	r1, [pc, #128]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
 8005132:	e014      	b.n	800515e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005134:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	4b20      	ldr	r3, [pc, #128]	; (80051bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6952      	ldr	r2, [r2, #20]
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0652      	lsls	r2, r2, #25
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6852      	ldr	r2, [r2, #4]
 8005152:	3a01      	subs	r2, #1
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	430a      	orrs	r2, r1
 8005158:	4915      	ldr	r1, [pc, #84]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005168:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fd fff1 	bl	8003150 <HAL_GetTick>
 800516e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005170:	e009      	b.n	8005186 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005172:	f7fd ffed 	bl	8003150 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d902      	bls.n	8005186 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	73fb      	strb	r3, [r7, #15]
          break;
 8005184:	e005      	b.n	8005192 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ef      	beq.n	8005172 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000
 80051b4:	07ff800f 	.word	0x07ff800f
 80051b8:	ff9f800f 	.word	0xff9f800f
 80051bc:	f9ff800f 	.word	0xf9ff800f

080051c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ce:	4b70      	ldr	r3, [pc, #448]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00e      	beq.n	80051f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051da:	4b6d      	ldr	r3, [pc, #436]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0203 	and.w	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d103      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
       ||
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d13f      	bne.n	8005272 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e03c      	b.n	8005272 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d00c      	beq.n	800521a <RCCEx_PLLSAI2_Config+0x5a>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d013      	beq.n	800522c <RCCEx_PLLSAI2_Config+0x6c>
 8005204:	2b01      	cmp	r3, #1
 8005206:	d120      	bne.n	800524a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005208:	4b61      	ldr	r3, [pc, #388]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11d      	bne.n	8005250 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e01a      	b.n	8005250 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800521a:	4b5d      	ldr	r3, [pc, #372]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005222:	2b00      	cmp	r3, #0
 8005224:	d116      	bne.n	8005254 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522a:	e013      	b.n	8005254 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005238:	4b55      	ldr	r3, [pc, #340]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005248:	e006      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
      break;
 800524e:	e004      	b.n	800525a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005250:	bf00      	nop
 8005252:	e002      	b.n	800525a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005254:	bf00      	nop
 8005256:	e000      	b.n	800525a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005258:	bf00      	nop
    }

    if(status == HAL_OK)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f023 0203 	bic.w	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4948      	ldr	r1, [pc, #288]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f040 8086 	bne.w	8005386 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800527a:	4b45      	ldr	r3, [pc, #276]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a44      	ldr	r2, [pc, #272]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fd ff63 	bl	8003150 <HAL_GetTick>
 800528a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800528c:	e009      	b.n	80052a2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800528e:	f7fd ff5f 	bl	8003150 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d902      	bls.n	80052a2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	73fb      	strb	r3, [r7, #15]
        break;
 80052a0:	e005      	b.n	80052ae <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ef      	bne.n	800528e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d168      	bne.n	8005386 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d113      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ba:	4b35      	ldr	r3, [pc, #212]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <RCCEx_PLLSAI2_Config+0x1d4>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6892      	ldr	r2, [r2, #8]
 80052c6:	0211      	lsls	r1, r2, #8
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68d2      	ldr	r2, [r2, #12]
 80052cc:	06d2      	lsls	r2, r2, #27
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	492d      	ldr	r1, [pc, #180]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	614b      	str	r3, [r1, #20]
 80052e0:	e02d      	b.n	800533e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d115      	bne.n	8005314 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052e8:	4b29      	ldr	r3, [pc, #164]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6892      	ldr	r2, [r2, #8]
 80052f4:	0211      	lsls	r1, r2, #8
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6912      	ldr	r2, [r2, #16]
 80052fa:	0852      	lsrs	r2, r2, #1
 80052fc:	3a01      	subs	r2, #1
 80052fe:	0552      	lsls	r2, r2, #21
 8005300:	4311      	orrs	r1, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6852      	ldr	r2, [r2, #4]
 8005306:	3a01      	subs	r2, #1
 8005308:	0112      	lsls	r2, r2, #4
 800530a:	430a      	orrs	r2, r1
 800530c:	4920      	ldr	r1, [pc, #128]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800530e:	4313      	orrs	r3, r2
 8005310:	614b      	str	r3, [r1, #20]
 8005312:	e014      	b.n	800533e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005314:	4b1e      	ldr	r3, [pc, #120]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	4b20      	ldr	r3, [pc, #128]	; (800539c <RCCEx_PLLSAI2_Config+0x1dc>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6892      	ldr	r2, [r2, #8]
 8005320:	0211      	lsls	r1, r2, #8
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6952      	ldr	r2, [r2, #20]
 8005326:	0852      	lsrs	r2, r2, #1
 8005328:	3a01      	subs	r2, #1
 800532a:	0652      	lsls	r2, r2, #25
 800532c:	4311      	orrs	r1, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6852      	ldr	r2, [r2, #4]
 8005332:	3a01      	subs	r2, #1
 8005334:	0112      	lsls	r2, r2, #4
 8005336:	430a      	orrs	r2, r1
 8005338:	4915      	ldr	r1, [pc, #84]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005348:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fd ff01 	bl	8003150 <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005350:	e009      	b.n	8005366 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005352:	f7fd fefd 	bl	8003150 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d902      	bls.n	8005366 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
          break;
 8005364:	e005      	b.n	8005372 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ef      	beq.n	8005352 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005382:	4313      	orrs	r3, r2
 8005384:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	07ff800f 	.word	0x07ff800f
 8005398:	ff9f800f 	.word	0xff9f800f
 800539c:	f9ff800f 	.word	0xf9ff800f

080053a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e095      	b.n	80054de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c2:	d009      	beq.n	80053d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	61da      	str	r2, [r3, #28]
 80053ca:	e005      	b.n	80053d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fc5c 	bl	8002cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005418:	d902      	bls.n	8005420 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e002      	b.n	8005426 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005424:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800542e:	d007      	beq.n	8005440 <HAL_SPI_Init+0xa0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005438:	d002      	beq.n	8005440 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	ea42 0103 	orr.w	r1, r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	f003 0204 	and.w	r2, r3, #4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b088      	sub	sp, #32
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_SPI_Transmit+0x22>
 8005504:	2302      	movs	r3, #2
 8005506:	e158      	b.n	80057ba <HAL_SPI_Transmit+0x2d4>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005510:	f7fd fe1e 	bl	8003150 <HAL_GetTick>
 8005514:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d002      	beq.n	800552c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005526:	2302      	movs	r3, #2
 8005528:	77fb      	strb	r3, [r7, #31]
    goto error;
 800552a:	e13d      	b.n	80057a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_Transmit+0x52>
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800553c:	e134      	b.n	80057a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2203      	movs	r2, #3
 8005542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	d10f      	bne.n	80055aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055d0:	d94b      	bls.n	800566a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0xfa>
 80055da:	8afb      	ldrh	r3, [r7, #22]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d13e      	bne.n	800565e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005604:	e02b      	b.n	800565e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d112      	bne.n	800563a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005638:	e011      	b.n	800565e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563a:	f7fd fd89 	bl	8003150 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d803      	bhi.n	8005652 <HAL_SPI_Transmit+0x16c>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Transmit+0x172>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800565c:	e0a4      	b.n	80057a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ce      	bne.n	8005606 <HAL_SPI_Transmit+0x120>
 8005668:	e07c      	b.n	8005764 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x192>
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d170      	bne.n	800575a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	d912      	bls.n	80056a8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b02      	subs	r3, #2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056a6:	e058      	b.n	800575a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056ce:	e044      	b.n	800575a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d12b      	bne.n	8005736 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d912      	bls.n	800570e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b02      	subs	r3, #2
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800570c:	e025      	b.n	800575a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005734:	e011      	b.n	800575a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005736:	f7fd fd0b 	bl	8003150 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d803      	bhi.n	800574e <HAL_SPI_Transmit+0x268>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d102      	bne.n	8005754 <HAL_SPI_Transmit+0x26e>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005758:	e026      	b.n	80057a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1b5      	bne.n	80056d0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f941 	bl	80059f0 <SPI_EndRxTxTransaction>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e000      	b.n	80057a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057d4:	f7fd fcbc 	bl	8003150 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	4413      	add	r3, r2
 80057e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057e4:	f7fd fcb4 	bl	8003150 <HAL_GetTick>
 80057e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057ea:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	015b      	lsls	r3, r3, #5
 80057f0:	0d1b      	lsrs	r3, r3, #20
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fa:	e054      	b.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d050      	beq.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005804:	f7fd fca4 	bl	8003150 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	429a      	cmp	r2, r3
 8005812:	d902      	bls.n	800581a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d13d      	bne.n	8005896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d111      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583c:	d004      	beq.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005846:	d107      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005860:	d10f      	bne.n	8005882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e017      	b.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d19b      	bne.n	80057fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000000 	.word	0x20000000

080058d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058e2:	f7fd fc35 	bl	8003150 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058f2:	f7fd fc2d 	bl	8003150 <HAL_GetTick>
 80058f6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058f8:	4b3c      	ldr	r3, [pc, #240]	; (80059ec <SPI_WaitFifoStateUntilTimeout+0x118>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00da      	lsls	r2, r3, #3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	0d1b      	lsrs	r3, r3, #20
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005910:	e05f      	b.n	80059d2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005918:	d106      	bne.n	8005928 <SPI_WaitFifoStateUntilTimeout+0x54>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d050      	beq.n	80059d2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005930:	f7fd fc0e 	bl	8003150 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	429a      	cmp	r2, r3
 800593e:	d902      	bls.n	8005946 <SPI_WaitFifoStateUntilTimeout+0x72>
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d13d      	bne.n	80059c2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d111      	bne.n	8005984 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005968:	d004      	beq.n	8005974 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d107      	bne.n	8005984 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d10f      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e010      	b.n	80059e4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d197      	bne.n	8005912 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000000 	.word	0x20000000

080059f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff ff63 	bl	80058d4 <SPI_WaitFifoStateUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e027      	b.n	8005a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2180      	movs	r1, #128	; 0x80
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fec8 	bl	80057c4 <SPI_WaitFlagStateUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e014      	b.n	8005a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff ff3c 	bl	80058d4 <SPI_WaitFifoStateUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e000      	b.n	8005a74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e049      	b.n	8005b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fd f966 	bl	8002d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fe7c 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e04f      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a23      	ldr	r2, [pc, #140]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d018      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x76>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d115      	bne.n	8005bce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	d015      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0xb4>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bba:	d011      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	e008      	b.n	8005be0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e000      	b.n	8005be2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	00010007 	.word	0x00010007

08005c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e049      	b.n	8005cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f841 	bl	8005cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f000 fdb4 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_TIM_PWM_Start+0x24>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e03c      	b.n	8005d6e <HAL_TIM_PWM_Start+0x9e>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d109      	bne.n	8005d0e <HAL_TIM_PWM_Start+0x3e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	e02f      	b.n	8005d6e <HAL_TIM_PWM_Start+0x9e>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start+0x58>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e022      	b.n	8005d6e <HAL_TIM_PWM_Start+0x9e>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d109      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x72>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e015      	b.n	8005d6e <HAL_TIM_PWM_Start+0x9e>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x8c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e008      	b.n	8005d6e <HAL_TIM_PWM_Start+0x9e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e09c      	b.n	8005eb0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <HAL_TIM_PWM_Start+0xb6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d84:	e023      	b.n	8005dce <HAL_TIM_PWM_Start+0xfe>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Start+0xc6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d94:	e01b      	b.n	8005dce <HAL_TIM_PWM_Start+0xfe>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Start+0xd6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da4:	e013      	b.n	8005dce <HAL_TIM_PWM_Start+0xfe>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Start+0xe6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db4:	e00b      	b.n	8005dce <HAL_TIM_PWM_Start+0xfe>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0xf6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	e003      	b.n	8005dce <HAL_TIM_PWM_Start+0xfe>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 f8f8 	bl	8006fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a35      	ldr	r2, [pc, #212]	; (8005eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x13e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a34      	ldr	r2, [pc, #208]	; (8005ebc <HAL_TIM_PWM_Start+0x1ec>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x13e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a32      	ldr	r2, [pc, #200]	; (8005ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x13e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a31      	ldr	r2, [pc, #196]	; (8005ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x13e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2f      	ldr	r2, [pc, #188]	; (8005ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x142>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_PWM_Start+0x144>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01d      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3a:	d018      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <HAL_TIM_PWM_Start+0x1fc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <HAL_TIM_PWM_Start+0x200>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <HAL_TIM_PWM_Start+0x204>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <HAL_TIM_PWM_Start+0x1ec>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x19e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d115      	bne.n	8005e9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <HAL_TIM_PWM_Start+0x208>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d015      	beq.n	8005eac <HAL_TIM_PWM_Start+0x1dc>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d011      	beq.n	8005eac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e98:	e008      	b.n	8005eac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e000      	b.n	8005eae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	00010007 	.word	0x00010007

08005edc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 f86c 	bl	8006fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a3e      	ldr	r2, [pc, #248]	; (8005ff4 <HAL_TIM_PWM_Stop+0x118>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIM_PWM_Stop+0x4a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3d      	ldr	r2, [pc, #244]	; (8005ff8 <HAL_TIM_PWM_Stop+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIM_PWM_Stop+0x4a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a3b      	ldr	r2, [pc, #236]	; (8005ffc <HAL_TIM_PWM_Stop+0x120>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIM_PWM_Stop+0x4a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a3a      	ldr	r2, [pc, #232]	; (8006000 <HAL_TIM_PWM_Stop+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIM_PWM_Stop+0x4a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a38      	ldr	r2, [pc, #224]	; (8006004 <HAL_TIM_PWM_Stop+0x128>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_PWM_Stop+0x4e>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_TIM_PWM_Stop+0x50>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d017      	beq.n	8005f60 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10f      	bne.n	8005f60 <HAL_TIM_PWM_Stop+0x84>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6a1a      	ldr	r2, [r3, #32]
 8005f46:	f240 4344 	movw	r3, #1092	; 0x444
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_PWM_Stop+0x84>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <HAL_TIM_PWM_Stop+0xb4>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	f240 4344 	movw	r3, #1092	; 0x444
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_PWM_Stop+0xb4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <HAL_TIM_PWM_Stop+0xc4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9e:	e023      	b.n	8005fe8 <HAL_TIM_PWM_Stop+0x10c>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d104      	bne.n	8005fb0 <HAL_TIM_PWM_Stop+0xd4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fae:	e01b      	b.n	8005fe8 <HAL_TIM_PWM_Stop+0x10c>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d104      	bne.n	8005fc0 <HAL_TIM_PWM_Stop+0xe4>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbe:	e013      	b.n	8005fe8 <HAL_TIM_PWM_Stop+0x10c>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d104      	bne.n	8005fd0 <HAL_TIM_PWM_Stop+0xf4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fce:	e00b      	b.n	8005fe8 <HAL_TIM_PWM_Stop+0x10c>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d104      	bne.n	8005fe0 <HAL_TIM_PWM_Stop+0x104>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fde:	e003      	b.n	8005fe8 <HAL_TIM_PWM_Stop+0x10c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e041      	b.n	80060a0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fc fe7f 	bl	8002d34 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fbb5 	bl	80067b8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0208 	bic.w	r2, r2, #8
 800605c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d108      	bne.n	80060ea <HAL_TIM_OnePulse_Start+0x42>
   || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d105      	bne.n	80060ea <HAL_TIM_OnePulse_Start+0x42>
   || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060de:	7b7b      	ldrb	r3, [r7, #13]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d102      	bne.n	80060ea <HAL_TIM_OnePulse_Start+0x42>
   || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060e4:	7b3b      	ldrb	r3, [r7, #12]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d001      	beq.n	80060ee <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e044      	b.n	8006178 <HAL_TIM_OnePulse_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	2100      	movs	r1, #0
 8006116:	4618      	mov	r0, r3
 8006118:	f000 ff58 	bl	8006fcc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	2104      	movs	r1, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f000 ff51 	bl	8006fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_TIM_OnePulse_Start+0xd8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <HAL_TIM_OnePulse_Start+0xb4>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_TIM_OnePulse_Start+0xdc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00e      	beq.n	800615c <HAL_TIM_OnePulse_Start+0xb4>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a11      	ldr	r2, [pc, #68]	; (8006188 <HAL_TIM_OnePulse_Start+0xe0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d009      	beq.n	800615c <HAL_TIM_OnePulse_Start+0xb4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a0f      	ldr	r2, [pc, #60]	; (800618c <HAL_TIM_OnePulse_Start+0xe4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <HAL_TIM_OnePulse_Start+0xb4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <HAL_TIM_OnePulse_Start+0xe8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <HAL_TIM_OnePulse_Start+0xb8>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_TIM_OnePulse_Start+0xba>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <HAL_TIM_OnePulse_Start+0xce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40013400 	.word	0x40013400
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800

08006194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0202 	mvn.w	r2, #2
 80061c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 facf 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fac1 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fad2 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 faa5 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa97 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 faa8 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0208 	mvn.w	r2, #8
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa7b 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa6d 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa7e 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0210 	mvn.w	r2, #16
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2208      	movs	r2, #8
 80062c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa51 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa43 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa54 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0201 	mvn.w	r2, #1
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fc fc14 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fefc 	bl	800713c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006352:	d10e      	bne.n	8006372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d107      	bne.n	8006372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 feef 	bl	8007150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d10e      	bne.n	800639e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d107      	bne.n	800639e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fa02 	bl	80067a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0220 	mvn.w	r2, #32
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 feaf 	bl	8007128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0fd      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b14      	cmp	r3, #20
 80063fa:	f200 80f0 	bhi.w	80065de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006459 	.word	0x08006459
 8006408:	080065df 	.word	0x080065df
 800640c:	080065df 	.word	0x080065df
 8006410:	080065df 	.word	0x080065df
 8006414:	08006499 	.word	0x08006499
 8006418:	080065df 	.word	0x080065df
 800641c:	080065df 	.word	0x080065df
 8006420:	080065df 	.word	0x080065df
 8006424:	080064db 	.word	0x080064db
 8006428:	080065df 	.word	0x080065df
 800642c:	080065df 	.word	0x080065df
 8006430:	080065df 	.word	0x080065df
 8006434:	0800651b 	.word	0x0800651b
 8006438:	080065df 	.word	0x080065df
 800643c:	080065df 	.word	0x080065df
 8006440:	080065df 	.word	0x080065df
 8006444:	0800655d 	.word	0x0800655d
 8006448:	080065df 	.word	0x080065df
 800644c:	080065df 	.word	0x080065df
 8006450:	080065df 	.word	0x080065df
 8006454:	0800659d 	.word	0x0800659d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fa44 	bl	80068ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0208 	orr.w	r2, r2, #8
 8006472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0204 	bic.w	r2, r2, #4
 8006482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	619a      	str	r2, [r3, #24]
      break;
 8006496:	e0a3      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fab4 	bl	8006a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	021a      	lsls	r2, r3, #8
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	619a      	str	r2, [r3, #24]
      break;
 80064d8:	e082      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fb1d 	bl	8006b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0208 	orr.w	r2, r2, #8
 80064f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0204 	bic.w	r2, r2, #4
 8006504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	61da      	str	r2, [r3, #28]
      break;
 8006518:	e062      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fb85 	bl	8006c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	021a      	lsls	r2, r3, #8
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	61da      	str	r2, [r3, #28]
      break;
 800655a:	e041      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fbce 	bl	8006d04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0208 	orr.w	r2, r2, #8
 8006576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0204 	bic.w	r2, r2, #4
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800659a:	e021      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fc12 	bl	8006dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065dc:	e000      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80065de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_TIM_ConfigClockSource+0x18>
 8006608:	2302      	movs	r3, #2
 800660a:	e0a8      	b.n	800675e <HAL_TIM_ConfigClockSource+0x16a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800662e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d067      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x124>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d80b      	bhi.n	8006664 <HAL_TIM_ConfigClockSource+0x70>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d073      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x144>
 8006650:	2b10      	cmp	r3, #16
 8006652:	d802      	bhi.n	800665a <HAL_TIM_ConfigClockSource+0x66>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d06f      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006658:	e078      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800665a:	2b20      	cmp	r3, #32
 800665c:	d06c      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x144>
 800665e:	2b30      	cmp	r3, #48	; 0x30
 8006660:	d06a      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006662:	e073      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006664:	2b70      	cmp	r3, #112	; 0x70
 8006666:	d00d      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x90>
 8006668:	2b70      	cmp	r3, #112	; 0x70
 800666a:	d804      	bhi.n	8006676 <HAL_TIM_ConfigClockSource+0x82>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d033      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0xe4>
 8006670:	2b60      	cmp	r3, #96	; 0x60
 8006672:	d041      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006674:	e06a      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d066      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x156>
 800667c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006680:	d017      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006682:	e063      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f000 fc7a 	bl	8006f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
      break;
 80066b0:	e04c      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6899      	ldr	r1, [r3, #8]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f000 fc63 	bl	8006f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d4:	609a      	str	r2, [r3, #8]
      break;
 80066d6:	e039      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f000 fbd7 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2150      	movs	r1, #80	; 0x50
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc30 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 80066f6:	e029      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6859      	ldr	r1, [r3, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	461a      	mov	r2, r3
 8006706:	f000 fbf6 	bl	8006ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2160      	movs	r1, #96	; 0x60
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc20 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006716:	e019      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	461a      	mov	r2, r3
 8006726:	f000 fbb7 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2140      	movs	r1, #64	; 0x40
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fc10 	bl	8006f56 <TIM_ITRx_SetConfig>
      break;
 8006736:	e009      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fc07 	bl	8006f56 <TIM_ITRx_SetConfig>
        break;
 8006748:	e000      	b.n	800674c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800674a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3d      	ldr	r2, [pc, #244]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3a      	ldr	r2, [pc, #232]	; (80068dc <TIM_Base_SetConfig+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a11      	ldr	r2, [pc, #68]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2c      	ldr	r2, [pc, #176]	; (80069f8 <TIM_OC1_SetConfig+0x10c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00f      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a2b      	ldr	r2, [pc, #172]	; (80069fc <TIM_OC1_SetConfig+0x110>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <TIM_OC1_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <TIM_OC1_SetConfig+0x118>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_OC1_SetConfig+0x80>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <TIM_OC1_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d10c      	bne.n	8006986 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0308 	bic.w	r3, r3, #8
 8006972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <TIM_OC1_SetConfig+0x10c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00f      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <TIM_OC1_SetConfig+0x110>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00b      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_OC1_SetConfig+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_OC1_SetConfig+0x118>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC1_SetConfig+0xc2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <TIM_OC1_SetConfig+0x11c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40013400 	.word	0x40013400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0320 	bic.w	r3, r3, #32
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_OC2_SetConfig+0x100>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC2_SetConfig+0x6c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <TIM_OC2_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <TIM_OC2_SetConfig+0x100>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <TIM_OC2_SetConfig+0x104>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <TIM_OC2_SetConfig+0x108>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <TIM_OC2_SetConfig+0x10c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC2_SetConfig+0xb0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <TIM_OC2_SetConfig+0x110>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d113      	bne.n	8006ae4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800

08006b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a27      	ldr	r2, [pc, #156]	; (8006c1c <TIM_OC3_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC3_SetConfig+0x6a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <TIM_OC3_SetConfig+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <TIM_OC3_SetConfig+0xfc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <TIM_OC3_SetConfig+0x100>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <TIM_OC3_SetConfig+0x104>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <TIM_OC3_SetConfig+0x108>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC3_SetConfig+0xae>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <TIM_OC3_SetConfig+0x10c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d113      	bne.n	8006bf6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800

08006c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	031b      	lsls	r3, r3, #12
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <TIM_OC4_SetConfig+0xc0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <TIM_OC4_SetConfig+0xc4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <TIM_OC4_SetConfig+0xc8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC4_SetConfig+0xcc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x84>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <TIM_OC4_SetConfig+0xd0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d109      	bne.n	8006cc8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	019b      	lsls	r3, r3, #6
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <TIM_OC5_SetConfig+0xb4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00f      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC5_SetConfig+0xb8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <TIM_OC5_SetConfig+0xbc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <TIM_OC5_SetConfig+0xc0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <TIM_OC5_SetConfig+0x7a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <TIM_OC5_SetConfig+0xc4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d109      	bne.n	8006d92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <TIM_OC6_SetConfig+0xb8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <TIM_OC6_SetConfig+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <TIM_OC6_SetConfig+0xc0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC6_SetConfig+0xc4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC6_SetConfig+0x7c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <TIM_OC6_SetConfig+0xc8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d109      	bne.n	8006e5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40013400 	.word	0x40013400
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40014400 	.word	0x40014400
 8006e94:	40014800 	.word	0x40014800

08006e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 030a 	bic.w	r3, r3, #10
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b087      	sub	sp, #28
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0210 	bic.w	r2, r3, #16
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	031b      	lsls	r3, r3, #12
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	621a      	str	r2, [r3, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f043 0307 	orr.w	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	609a      	str	r2, [r3, #8]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	2201      	movs	r2, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1a      	ldr	r2, [r3, #32]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1a      	ldr	r2, [r3, #32]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	fa01 f303 	lsl.w	r3, r1, r3
 8007004:	431a      	orrs	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800702c:	2302      	movs	r3, #2
 800702e:	e068      	b.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800706a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1e      	ldr	r2, [pc, #120]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a2:	d018      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a13      	ldr	r2, [pc, #76]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a14      	ldr	r2, [pc, #80]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10c      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40014000 	.word	0x40014000

08007128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e042      	b.n	80071fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fb fd17 	bl	8002bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	; 0x24
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f82c 	bl	8007204 <UART_SetConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e022      	b.n	80071fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 faf2 	bl	80077a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb79 	bl	80078ec <UART_CheckIdleState>
 80071fa:	4603      	mov	r3, r0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007208:	b088      	sub	sp, #32
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4313      	orrs	r3, r2
 8007228:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4bb1      	ldr	r3, [pc, #708]	; (8007500 <UART_SetConfig+0x2fc>)
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	69f9      	ldr	r1, [r7, #28]
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4aa6      	ldr	r2, [pc, #664]	; (8007504 <UART_SetConfig+0x300>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	4313      	orrs	r3, r2
 8007276:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007282:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	69f9      	ldr	r1, [r7, #28]
 800728c:	430b      	orrs	r3, r1
 800728e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	f023 010f 	bic.w	r1, r3, #15
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a97      	ldr	r2, [pc, #604]	; (8007508 <UART_SetConfig+0x304>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d121      	bne.n	80072f4 <UART_SetConfig+0xf0>
 80072b0:	4b96      	ldr	r3, [pc, #600]	; (800750c <UART_SetConfig+0x308>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d816      	bhi.n	80072ec <UART_SetConfig+0xe8>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0xc0>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e1 	.word	0x080072e1
 80072cc:	080072db 	.word	0x080072db
 80072d0:	080072e7 	.word	0x080072e7
 80072d4:	2301      	movs	r3, #1
 80072d6:	76fb      	strb	r3, [r7, #27]
 80072d8:	e0e8      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072da:	2302      	movs	r3, #2
 80072dc:	76fb      	strb	r3, [r7, #27]
 80072de:	e0e5      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072e0:	2304      	movs	r3, #4
 80072e2:	76fb      	strb	r3, [r7, #27]
 80072e4:	e0e2      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072e6:	2308      	movs	r3, #8
 80072e8:	76fb      	strb	r3, [r7, #27]
 80072ea:	e0df      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072ec:	2310      	movs	r3, #16
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	bf00      	nop
 80072f2:	e0db      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a85      	ldr	r2, [pc, #532]	; (8007510 <UART_SetConfig+0x30c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d134      	bne.n	8007368 <UART_SetConfig+0x164>
 80072fe:	4b83      	ldr	r3, [pc, #524]	; (800750c <UART_SetConfig+0x308>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b0c      	cmp	r3, #12
 800730a:	d829      	bhi.n	8007360 <UART_SetConfig+0x15c>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x110>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007355 	.word	0x08007355
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	08007361 	.word	0x08007361
 8007334:	0800734f 	.word	0x0800734f
 8007338:	08007361 	.word	0x08007361
 800733c:	08007361 	.word	0x08007361
 8007340:	08007361 	.word	0x08007361
 8007344:	0800735b 	.word	0x0800735b
 8007348:	2300      	movs	r3, #0
 800734a:	76fb      	strb	r3, [r7, #27]
 800734c:	e0ae      	b.n	80074ac <UART_SetConfig+0x2a8>
 800734e:	2302      	movs	r3, #2
 8007350:	76fb      	strb	r3, [r7, #27]
 8007352:	e0ab      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007354:	2304      	movs	r3, #4
 8007356:	76fb      	strb	r3, [r7, #27]
 8007358:	e0a8      	b.n	80074ac <UART_SetConfig+0x2a8>
 800735a:	2308      	movs	r3, #8
 800735c:	76fb      	strb	r3, [r7, #27]
 800735e:	e0a5      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007360:	2310      	movs	r3, #16
 8007362:	76fb      	strb	r3, [r7, #27]
 8007364:	bf00      	nop
 8007366:	e0a1      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a69      	ldr	r2, [pc, #420]	; (8007514 <UART_SetConfig+0x310>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d120      	bne.n	80073b4 <UART_SetConfig+0x1b0>
 8007372:	4b66      	ldr	r3, [pc, #408]	; (800750c <UART_SetConfig+0x308>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800737c:	2b10      	cmp	r3, #16
 800737e:	d00f      	beq.n	80073a0 <UART_SetConfig+0x19c>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d802      	bhi.n	800738a <UART_SetConfig+0x186>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <UART_SetConfig+0x190>
 8007388:	e010      	b.n	80073ac <UART_SetConfig+0x1a8>
 800738a:	2b20      	cmp	r3, #32
 800738c:	d005      	beq.n	800739a <UART_SetConfig+0x196>
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d009      	beq.n	80073a6 <UART_SetConfig+0x1a2>
 8007392:	e00b      	b.n	80073ac <UART_SetConfig+0x1a8>
 8007394:	2300      	movs	r3, #0
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e088      	b.n	80074ac <UART_SetConfig+0x2a8>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e085      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e082      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e07f      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	bf00      	nop
 80073b2:	e07b      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a57      	ldr	r2, [pc, #348]	; (8007518 <UART_SetConfig+0x314>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d120      	bne.n	8007400 <UART_SetConfig+0x1fc>
 80073be:	4b53      	ldr	r3, [pc, #332]	; (800750c <UART_SetConfig+0x308>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d00f      	beq.n	80073ec <UART_SetConfig+0x1e8>
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d802      	bhi.n	80073d6 <UART_SetConfig+0x1d2>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <UART_SetConfig+0x1dc>
 80073d4:	e010      	b.n	80073f8 <UART_SetConfig+0x1f4>
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d005      	beq.n	80073e6 <UART_SetConfig+0x1e2>
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d009      	beq.n	80073f2 <UART_SetConfig+0x1ee>
 80073de:	e00b      	b.n	80073f8 <UART_SetConfig+0x1f4>
 80073e0:	2300      	movs	r3, #0
 80073e2:	76fb      	strb	r3, [r7, #27]
 80073e4:	e062      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073e6:	2302      	movs	r3, #2
 80073e8:	76fb      	strb	r3, [r7, #27]
 80073ea:	e05f      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073ec:	2304      	movs	r3, #4
 80073ee:	76fb      	strb	r3, [r7, #27]
 80073f0:	e05c      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073f2:	2308      	movs	r3, #8
 80073f4:	76fb      	strb	r3, [r7, #27]
 80073f6:	e059      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073f8:	2310      	movs	r3, #16
 80073fa:	76fb      	strb	r3, [r7, #27]
 80073fc:	bf00      	nop
 80073fe:	e055      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a45      	ldr	r2, [pc, #276]	; (800751c <UART_SetConfig+0x318>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d124      	bne.n	8007454 <UART_SetConfig+0x250>
 800740a:	4b40      	ldr	r3, [pc, #256]	; (800750c <UART_SetConfig+0x308>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007418:	d012      	beq.n	8007440 <UART_SetConfig+0x23c>
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d802      	bhi.n	8007426 <UART_SetConfig+0x222>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <UART_SetConfig+0x230>
 8007424:	e012      	b.n	800744c <UART_SetConfig+0x248>
 8007426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742a:	d006      	beq.n	800743a <UART_SetConfig+0x236>
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0x242>
 8007432:	e00b      	b.n	800744c <UART_SetConfig+0x248>
 8007434:	2300      	movs	r3, #0
 8007436:	76fb      	strb	r3, [r7, #27]
 8007438:	e038      	b.n	80074ac <UART_SetConfig+0x2a8>
 800743a:	2302      	movs	r3, #2
 800743c:	76fb      	strb	r3, [r7, #27]
 800743e:	e035      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007440:	2304      	movs	r3, #4
 8007442:	76fb      	strb	r3, [r7, #27]
 8007444:	e032      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007446:	2308      	movs	r3, #8
 8007448:	76fb      	strb	r3, [r7, #27]
 800744a:	e02f      	b.n	80074ac <UART_SetConfig+0x2a8>
 800744c:	2310      	movs	r3, #16
 800744e:	76fb      	strb	r3, [r7, #27]
 8007450:	bf00      	nop
 8007452:	e02b      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <UART_SetConfig+0x300>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d124      	bne.n	80074a8 <UART_SetConfig+0x2a4>
 800745e:	4b2b      	ldr	r3, [pc, #172]	; (800750c <UART_SetConfig+0x308>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746c:	d012      	beq.n	8007494 <UART_SetConfig+0x290>
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d802      	bhi.n	800747a <UART_SetConfig+0x276>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <UART_SetConfig+0x284>
 8007478:	e012      	b.n	80074a0 <UART_SetConfig+0x29c>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747e:	d006      	beq.n	800748e <UART_SetConfig+0x28a>
 8007480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007484:	d009      	beq.n	800749a <UART_SetConfig+0x296>
 8007486:	e00b      	b.n	80074a0 <UART_SetConfig+0x29c>
 8007488:	2300      	movs	r3, #0
 800748a:	76fb      	strb	r3, [r7, #27]
 800748c:	e00e      	b.n	80074ac <UART_SetConfig+0x2a8>
 800748e:	2302      	movs	r3, #2
 8007490:	76fb      	strb	r3, [r7, #27]
 8007492:	e00b      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007494:	2304      	movs	r3, #4
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e008      	b.n	80074ac <UART_SetConfig+0x2a8>
 800749a:	2308      	movs	r3, #8
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e005      	b.n	80074ac <UART_SetConfig+0x2a8>
 80074a0:	2310      	movs	r3, #16
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	bf00      	nop
 80074a6:	e001      	b.n	80074ac <UART_SetConfig+0x2a8>
 80074a8:	2310      	movs	r3, #16
 80074aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <UART_SetConfig+0x300>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f040 80a1 	bne.w	80075fa <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074b8:	7efb      	ldrb	r3, [r7, #27]
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d836      	bhi.n	800752c <UART_SetConfig+0x328>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x2c0>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	080074f7 	.word	0x080074f7
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	08007525 	.word	0x08007525
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fd f932 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6178      	str	r0, [r7, #20]
        break;
 80074ee:	e022      	b.n	8007536 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <UART_SetConfig+0x31c>)
 80074f2:	617b      	str	r3, [r7, #20]
        break;
 80074f4:	e01f      	b.n	8007536 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fd f895 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80074fa:	6178      	str	r0, [r7, #20]
        break;
 80074fc:	e01b      	b.n	8007536 <UART_SetConfig+0x332>
 80074fe:	bf00      	nop
 8007500:	cfff69f3 	.word	0xcfff69f3
 8007504:	40008000 	.word	0x40008000
 8007508:	40013800 	.word	0x40013800
 800750c:	40021000 	.word	0x40021000
 8007510:	40004400 	.word	0x40004400
 8007514:	40004800 	.word	0x40004800
 8007518:	40004c00 	.word	0x40004c00
 800751c:	40005000 	.word	0x40005000
 8007520:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007528:	617b      	str	r3, [r7, #20]
        break;
 800752a:	e004      	b.n	8007536 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	76bb      	strb	r3, [r7, #26]
        break;
 8007534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 811d 	beq.w	8007778 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	4a97      	ldr	r2, [pc, #604]	; (80077a0 <UART_SetConfig+0x59c>)
 8007544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007548:	461a      	mov	r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007550:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d305      	bcc.n	800756e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	429a      	cmp	r2, r3
 800756c:	d902      	bls.n	8007574 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	76bb      	strb	r3, [r7, #26]
 8007572:	e101      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4618      	mov	r0, r3
 8007578:	f04f 0100 	mov.w	r1, #0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a87      	ldr	r2, [pc, #540]	; (80077a0 <UART_SetConfig+0x59c>)
 8007582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f04f 0400 	mov.w	r4, #0
 800758c:	461a      	mov	r2, r3
 800758e:	4623      	mov	r3, r4
 8007590:	f7f9 fb1a 	bl	8000bc8 <__aeabi_uldivmod>
 8007594:	4603      	mov	r3, r0
 8007596:	460c      	mov	r4, r1
 8007598:	4619      	mov	r1, r3
 800759a:	4622      	mov	r2, r4
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	0214      	lsls	r4, r2, #8
 80075a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075aa:	020b      	lsls	r3, r1, #8
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6852      	ldr	r2, [r2, #4]
 80075b0:	0852      	lsrs	r2, r2, #1
 80075b2:	4611      	mov	r1, r2
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	eb13 0b01 	adds.w	fp, r3, r1
 80075bc:	eb44 0c02 	adc.w	ip, r4, r2
 80075c0:	4658      	mov	r0, fp
 80075c2:	4661      	mov	r1, ip
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	461a      	mov	r2, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	f7f9 fafa 	bl	8000bc8 <__aeabi_uldivmod>
 80075d4:	4603      	mov	r3, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e0:	d308      	bcc.n	80075f4 <UART_SetConfig+0x3f0>
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e8:	d204      	bcs.n	80075f4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	e0c1      	b.n	8007778 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	76bb      	strb	r3, [r7, #26]
 80075f8:	e0be      	b.n	8007778 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007602:	d164      	bne.n	80076ce <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007604:	7efb      	ldrb	r3, [r7, #27]
 8007606:	2b08      	cmp	r3, #8
 8007608:	d827      	bhi.n	800765a <UART_SetConfig+0x456>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x40c>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	0800765b 	.word	0x0800765b
 8007620:	0800764b 	.word	0x0800764b
 8007624:	0800765b 	.word	0x0800765b
 8007628:	0800765b 	.word	0x0800765b
 800762c:	0800765b 	.word	0x0800765b
 8007630:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fd f88c 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8007638:	6178      	str	r0, [r7, #20]
        break;
 800763a:	e013      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fd f89e 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8007640:	6178      	str	r0, [r7, #20]
        break;
 8007642:	e00f      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <UART_SetConfig+0x5a0>)
 8007646:	617b      	str	r3, [r7, #20]
        break;
 8007648:	e00c      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fc ffeb 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 800764e:	6178      	str	r0, [r7, #20]
        break;
 8007650:	e008      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007656:	617b      	str	r3, [r7, #20]
        break;
 8007658:	e004      	b.n	8007664 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	76bb      	strb	r3, [r7, #26]
        break;
 8007662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8086 	beq.w	8007778 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	4a4b      	ldr	r2, [pc, #300]	; (80077a0 <UART_SetConfig+0x59c>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	461a      	mov	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	fbb3 f3f2 	udiv	r3, r3, r2
 800767e:	005a      	lsls	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	441a      	add	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	b29b      	uxth	r3, r3
 8007692:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d916      	bls.n	80076c8 <UART_SetConfig+0x4c4>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a0:	d212      	bcs.n	80076c8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f023 030f 	bic.w	r3, r3, #15
 80076aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	89fa      	ldrh	r2, [r7, #14]
 80076c4:	60da      	str	r2, [r3, #12]
 80076c6:	e057      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	76bb      	strb	r3, [r7, #26]
 80076cc:	e054      	b.n	8007778 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ce:	7efb      	ldrb	r3, [r7, #27]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d828      	bhi.n	8007726 <UART_SetConfig+0x522>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x4d8>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007727 	.word	0x08007727
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800771f 	.word	0x0800771f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fd f826 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8007704:	6178      	str	r0, [r7, #20]
        break;
 8007706:	e013      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007708:	f7fd f838 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 800770c:	6178      	str	r0, [r7, #20]
        break;
 800770e:	e00f      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007710:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <UART_SetConfig+0x5a0>)
 8007712:	617b      	str	r3, [r7, #20]
        break;
 8007714:	e00c      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007716:	f7fc ff85 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 800771a:	6178      	str	r0, [r7, #20]
        break;
 800771c:	e008      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	617b      	str	r3, [r7, #20]
        break;
 8007724:	e004      	b.n	8007730 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	76bb      	strb	r3, [r7, #26]
        break;
 800772e:	bf00      	nop
    }

    if (pclk != 0U)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d020      	beq.n	8007778 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <UART_SetConfig+0x59c>)
 800773c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007740:	461a      	mov	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	fbb3 f2f2 	udiv	r2, r3, r2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d908      	bls.n	8007774 <UART_SetConfig+0x570>
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d204      	bcs.n	8007774 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	e001      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007794:	7ebb      	ldrb	r3, [r7, #26]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80077a0:	08009b00 	.word	0x08009b00
 80077a4:	00f42400 	.word	0x00f42400

080077a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d10a      	bne.n	80078be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80078fc:	f7fb fc28 	bl	8003150 <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10e      	bne.n	800792e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82c 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e022      	b.n	8007974 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f816 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00c      	b.n	8007974 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798c:	e062      	b.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d05e      	beq.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007996:	f7fb fbdb 	bl	8003150 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <UART_WaitOnFlagUntilTimeout+0x30>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11d      	bne.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079ba:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e045      	b.n	8007a74 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02e      	beq.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a04:	d126      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a1e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e00f      	b.n	8007a74 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69da      	ldr	r2, [r3, #28]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	bf0c      	ite	eq
 8007a64:	2301      	moveq	r3, #1
 8007a66:	2300      	movne	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d08d      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e027      	b.n	8007ae2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2224      	movs	r2, #36	; 0x24
 8007a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e02d      	b.n	8007b62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2224      	movs	r2, #36	; 0x24
 8007b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f850 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e02d      	b.n	8007bde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2224      	movs	r2, #36	; 0x24
 8007b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f812 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007bf0:	4a2f      	ldr	r2, [pc, #188]	; (8007cb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007bfe:	4a2d      	ldr	r2, [pc, #180]	; (8007cb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d108      	bne.n	8007c26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c24:	e03d      	b.n	8007ca2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c26:	2308      	movs	r3, #8
 8007c28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0e5b      	lsrs	r3, r3, #25
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	0f5b      	lsrs	r3, r3, #29
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007c4e:	7fbb      	ldrb	r3, [r7, #30]
 8007c50:	7f3a      	ldrb	r2, [r7, #28]
 8007c52:	f107 0120 	add.w	r1, r7, #32
 8007c56:	440a      	add	r2, r1
 8007c58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
 8007c60:	7f3a      	ldrb	r2, [r7, #28]
 8007c62:	f107 0120 	add.w	r1, r7, #32
 8007c66:	440a      	add	r2, r1
 8007c68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007c78:	7ffb      	ldrb	r3, [r7, #31]
 8007c7a:	7f7a      	ldrb	r2, [r7, #29]
 8007c7c:	f107 0120 	add.w	r1, r7, #32
 8007c80:	440a      	add	r2, r1
 8007c82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	7f7a      	ldrb	r2, [r7, #29]
 8007c8c:	f107 0120 	add.w	r1, r7, #32
 8007c90:	440a      	add	r2, r1
 8007c92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ca2:	bf00      	nop
 8007ca4:	3724      	adds	r7, #36	; 0x24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	080098c0 	.word	0x080098c0
 8007cb4:	080098c8 	.word	0x080098c8

08007cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cb8:	b084      	sub	sp, #16
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	f107 001c 	add.w	r0, r7, #28
 8007cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d122      	bne.n	8007d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d105      	bne.n	8007d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa30 	bl	8008170 <USB_CoreReset>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	e01a      	b.n	8007d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa24 	bl	8008170 <USB_CoreReset>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d3e:	e005      	b.n	8007d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d58:	b004      	add	sp, #16
 8007d5a:	4770      	bx	lr

08007d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f023 0201 	bic.w	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d106      	bne.n	8007daa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	e00b      	b.n	8007dc2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	e001      	b.n	8007dc2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e003      	b.n	8007dca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007dc2:	2032      	movs	r0, #50	; 0x32
 8007dc4:	f7fb f9d0 	bl	8003168 <HAL_Delay>

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e009      	b.n	8007e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3340      	adds	r3, #64	; 0x40
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b0e      	cmp	r3, #14
 8007e0c:	d9f2      	bls.n	8007df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11c      	bne.n	8007e4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e22:	f043 0302 	orr.w	r3, r3, #2
 8007e26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e005      	b.n	8007e5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e60:	461a      	mov	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e74:	461a      	mov	r2, r3
 8007e76:	680b      	ldr	r3, [r1, #0]
 8007e78:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e7a:	2103      	movs	r1, #3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f93d 	bl	80080fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e82:	2110      	movs	r1, #16
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8f1 	bl	800806c <USB_FlushTxFifo>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f90f 	bl	80080b8 <USB_FlushRxFifo>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	461a      	mov	r2, r3
 8007eac:	2300      	movs	r3, #0
 8007eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	e043      	b.n	8007f56 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee4:	d118      	bne.n	8007f18 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	e013      	b.n	8007f2a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e008      	b.n	8007f2a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f24:	461a      	mov	r2, r3
 8007f26:	2300      	movs	r3, #0
 8007f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	461a      	mov	r2, r3
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3301      	adds	r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3b7      	bcc.n	8007ece <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	e043      	b.n	8007fec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f7a:	d118      	bne.n	8007fae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e013      	b.n	8007fc0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e008      	b.n	8007fc0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fba:	461a      	mov	r2, r3
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3b7      	bcc.n	8007f64 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f043 0210 	orr.w	r2, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <USB_DevInit+0x294>)
 8008028:	4313      	orrs	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800802e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f043 0208 	orr.w	r2, r3, #8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d107      	bne.n	8008056 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804e:	f043 0304 	orr.w	r3, r3, #4
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008062:	b004      	add	sp, #16
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	803c3800 	.word	0x803c3800

0800806c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	f043 0220 	orr.w	r2, r3, #32
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a09      	ldr	r2, [pc, #36]	; (80080b4 <USB_FlushTxFifo+0x48>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d901      	bls.n	8008098 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e006      	b.n	80080a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d0f0      	beq.n	8008086 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	00030d40 	.word	0x00030d40

080080b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2210      	movs	r2, #16
 80080c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3301      	adds	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <USB_FlushRxFifo+0x40>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d901      	bls.n	80080dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e006      	b.n	80080ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d0f0      	beq.n	80080ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	00030d40 	.word	0x00030d40

080080fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800811c:	4313      	orrs	r3, r2
 800811e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008148:	f023 0303 	bic.w	r3, r3, #3
 800814c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800815c:	f043 0302 	orr.w	r3, r3, #2
 8008160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4a13      	ldr	r2, [pc, #76]	; (80081d4 <USB_CoreReset+0x64>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d901      	bls.n	800818e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e01b      	b.n	80081c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	daf2      	bge.n	800817c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f043 0201 	orr.w	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <USB_CoreReset+0x64>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d901      	bls.n	80081b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e006      	b.n	80081c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d0f0      	beq.n	80081a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	00030d40 	.word	0x00030d40

080081d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081ea:	2b84      	cmp	r3, #132	; 0x84
 80081ec:	d005      	beq.n	80081fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	3303      	adds	r3, #3
 80081f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081fa:	68fb      	ldr	r3, [r7, #12]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800820c:	f000 fada 	bl	80087c4 <vTaskStartScheduler>
  
  return osOK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	bd80      	pop	{r7, pc}

08008216 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008218:	b089      	sub	sp, #36	; 0x24
 800821a:	af04      	add	r7, sp, #16
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <osThreadCreate+0x54>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01c      	beq.n	800826a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685c      	ldr	r4, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681d      	ldr	r5, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691e      	ldr	r6, [r3, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ffc8 	bl	80081d8 <makeFreeRtosPriority>
 8008248:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008252:	9202      	str	r2, [sp, #8]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	9100      	str	r1, [sp, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	4632      	mov	r2, r6
 800825c:	4629      	mov	r1, r5
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f8ed 	bl	800843e <xTaskCreateStatic>
 8008264:	4603      	mov	r3, r0
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	e01c      	b.n	80082a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685c      	ldr	r4, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008276:	b29e      	uxth	r6, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ffaa 	bl	80081d8 <makeFreeRtosPriority>
 8008284:	4602      	mov	r2, r0
 8008286:	f107 030c 	add.w	r3, r7, #12
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	9200      	str	r2, [sp, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	4632      	mov	r2, r6
 8008292:	4629      	mov	r1, r5
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f92c 	bl	80084f2 <xTaskCreate>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d001      	beq.n	80082a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <osDelay+0x16>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e000      	b.n	80082c6 <osDelay+0x18>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fa48 	bl	800875c <vTaskDelay>
  
  return osOK;
 80082cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f103 0208 	add.w	r2, r3, #8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0208 	add.w	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f103 0208 	add.w	r2, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d103      	bne.n	8008398 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e00c      	b.n	80083b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3308      	adds	r3, #8
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e002      	b.n	80083a6 <vListInsert+0x2e>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d2f6      	bcs.n	80083a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6892      	ldr	r2, [r2, #8]
 8008400:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6852      	ldr	r2, [r2, #4]
 800840a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d103      	bne.n	800841e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800843e:	b580      	push	{r7, lr}
 8008440:	b08e      	sub	sp, #56	; 0x38
 8008442:	af04      	add	r7, sp, #16
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	623b      	str	r3, [r7, #32]
 8008464:	e7fe      	b.n	8008464 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	2b00      	cmp	r3, #0
 800846a:	d109      	bne.n	8008480 <xTaskCreateStatic+0x42>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61fb      	str	r3, [r7, #28]
 800847e:	e7fe      	b.n	800847e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008480:	2354      	movs	r3, #84	; 0x54
 8008482:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b54      	cmp	r3, #84	; 0x54
 8008488:	d009      	beq.n	800849e <xTaskCreateStatic+0x60>
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	61bb      	str	r3, [r7, #24]
 800849c:	e7fe      	b.n	800849c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800849e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01e      	beq.n	80084e4 <xTaskCreateStatic+0xa6>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01b      	beq.n	80084e4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084be:	2300      	movs	r3, #0
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f850 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084de:	f000 f8d3 	bl	8008688 <prvAddNewTaskToReadyList>
 80084e2:	e001      	b.n	80084e8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e8:	697b      	ldr	r3, [r7, #20]
	}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3728      	adds	r7, #40	; 0x28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b08c      	sub	sp, #48	; 0x30
 80084f6:	af04      	add	r7, sp, #16
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f000 feb4 	bl	8009274 <pvPortMalloc>
 800850c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008514:	2054      	movs	r0, #84	; 0x54
 8008516:	f000 fead 	bl	8009274 <pvPortMalloc>
 800851a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
 8008528:	e005      	b.n	8008536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f000 ff64 	bl	80093f8 <vPortFree>
 8008530:	e001      	b.n	8008536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	2300      	movs	r3, #0
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f80e 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008560:	69f8      	ldr	r0, [r7, #28]
 8008562:	f000 f891 	bl	8008688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008566:	2301      	movs	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	e002      	b.n	8008572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295
 8008570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008572:	69bb      	ldr	r3, [r7, #24]
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008594:	3b01      	subs	r3, #1
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	f023 0307 	bic.w	r3, r3, #7
 80085a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <prvInitialiseNewTask+0x46>
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e7fe      	b.n	80085c0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01f      	beq.n	8008608 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	e012      	b.n	80085f4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	7819      	ldrb	r1, [r3, #0]
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	3334      	adds	r3, #52	; 0x34
 80085de:	460a      	mov	r2, r1
 80085e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	3301      	adds	r3, #1
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d9e9      	bls.n	80085ce <prvInitialiseNewTask+0x52>
 80085fa:	e000      	b.n	80085fe <prvInitialiseNewTask+0x82>
			{
				break;
 80085fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008606:	e003      	b.n	8008610 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	2b06      	cmp	r3, #6
 8008614:	d901      	bls.n	800861a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008616:	2306      	movs	r3, #6
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008624:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	3304      	adds	r3, #4
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fe70 	bl	8008316 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	3318      	adds	r3, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fe6b 	bl	8008316 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	f1c3 0207 	rsb	r2, r3, #7
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2200      	movs	r2, #0
 800865a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	69b8      	ldr	r0, [r7, #24]
 800866a:	f000 fbfd 	bl	8008e68 <pxPortInitialiseStack>
 800866e:	4602      	mov	r2, r0
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008680:	bf00      	nop
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008690:	f000 fd14 	bl	80090bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008694:	4b2a      	ldr	r3, [pc, #168]	; (8008740 <prvAddNewTaskToReadyList+0xb8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	4a29      	ldr	r2, [pc, #164]	; (8008740 <prvAddNewTaskToReadyList+0xb8>)
 800869c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800869e:	4b29      	ldr	r3, [pc, #164]	; (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086a6:	4a27      	ldr	r2, [pc, #156]	; (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086ac:	4b24      	ldr	r3, [pc, #144]	; (8008740 <prvAddNewTaskToReadyList+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d110      	bne.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086b4:	f000 fab8 	bl	8008c28 <prvInitialiseTaskLists>
 80086b8:	e00d      	b.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <prvAddNewTaskToReadyList+0xc0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d802      	bhi.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086d0:	4a1c      	ldr	r2, [pc, #112]	; (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086d6:	4b1d      	ldr	r3, [pc, #116]	; (800874c <prvAddNewTaskToReadyList+0xc4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a1b      	ldr	r2, [pc, #108]	; (800874c <prvAddNewTaskToReadyList+0xc4>)
 80086de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	2201      	movs	r2, #1
 80086e6:	409a      	lsls	r2, r3
 80086e8:	4b19      	ldr	r3, [pc, #100]	; (8008750 <prvAddNewTaskToReadyList+0xc8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4a18      	ldr	r2, [pc, #96]	; (8008750 <prvAddNewTaskToReadyList+0xc8>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a15      	ldr	r2, [pc, #84]	; (8008754 <prvAddNewTaskToReadyList+0xcc>)
 8008700:	441a      	add	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7ff fe11 	bl	8008330 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800870e:	f000 fd03 	bl	8009118 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <prvAddNewTaskToReadyList+0xc0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00e      	beq.n	8008738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800871a:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <prvAddNewTaskToReadyList+0xbc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	429a      	cmp	r2, r3
 8008726:	d207      	bcs.n	8008738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008728:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <prvAddNewTaskToReadyList+0xd0>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000380 	.word	0x20000380
 8008744:	20000280 	.word	0x20000280
 8008748:	2000038c 	.word	0x2000038c
 800874c:	2000039c 	.word	0x2000039c
 8008750:	20000388 	.word	0x20000388
 8008754:	20000284 	.word	0x20000284
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <vTaskDelay+0x60>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <vTaskDelay+0x2e>
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	e7fe      	b.n	8008788 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800878a:	f000 f879 	bl	8008880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800878e:	2100      	movs	r1, #0
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb03 	bl	8008d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008796:	f000 f881 	bl	800889c <xTaskResumeAll>
 800879a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vTaskDelay+0x64>)
 80087a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	200003a8 	.word	0x200003a8
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	; 0x28
 80087c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087d2:	463a      	mov	r2, r7
 80087d4:	1d39      	adds	r1, r7, #4
 80087d6:	f107 0308 	add.w	r3, r7, #8
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f8 fbb6 	bl	8000f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	9202      	str	r2, [sp, #8]
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	2300      	movs	r3, #0
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	2300      	movs	r3, #0
 80087f0:	460a      	mov	r2, r1
 80087f2:	491d      	ldr	r1, [pc, #116]	; (8008868 <vTaskStartScheduler+0xa4>)
 80087f4:	481d      	ldr	r0, [pc, #116]	; (800886c <vTaskStartScheduler+0xa8>)
 80087f6:	f7ff fe22 	bl	800843e <xTaskCreateStatic>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <vTaskStartScheduler+0xac>)
 80087fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008800:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <vTaskStartScheduler+0xac>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e001      	b.n	8008812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d115      	bne.n	8008844 <vTaskStartScheduler+0x80>
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vTaskStartScheduler+0xb0>)
 800882c:	f04f 32ff 	mov.w	r2, #4294967295
 8008830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <vTaskStartScheduler+0xb4>)
 8008834:	2201      	movs	r2, #1
 8008836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008838:	4b10      	ldr	r3, [pc, #64]	; (800887c <vTaskStartScheduler+0xb8>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800883e:	f000 fb9f 	bl	8008f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008842:	e00d      	b.n	8008860 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d109      	bne.n	8008860 <vTaskStartScheduler+0x9c>
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	e7fe      	b.n	800885e <vTaskStartScheduler+0x9a>
}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	080098d0 	.word	0x080098d0
 800886c:	08008bf9 	.word	0x08008bf9
 8008870:	200003a4 	.word	0x200003a4
 8008874:	200003a0 	.word	0x200003a0
 8008878:	2000038c 	.word	0x2000038c
 800887c:	20000384 	.word	0x20000384

08008880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <vTaskSuspendAll+0x18>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	4a03      	ldr	r2, [pc, #12]	; (8008898 <vTaskSuspendAll+0x18>)
 800888c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	200003a8 	.word	0x200003a8

0800889c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088aa:	4b41      	ldr	r3, [pc, #260]	; (80089b0 <xTaskResumeAll+0x114>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <xTaskResumeAll+0x2a>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	e7fe      	b.n	80088c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088c6:	f000 fbf9 	bl	80090bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ca:	4b39      	ldr	r3, [pc, #228]	; (80089b0 <xTaskResumeAll+0x114>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <xTaskResumeAll+0x114>)
 80088d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d4:	4b36      	ldr	r3, [pc, #216]	; (80089b0 <xTaskResumeAll+0x114>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d161      	bne.n	80089a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088dc:	4b35      	ldr	r3, [pc, #212]	; (80089b4 <xTaskResumeAll+0x118>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d05d      	beq.n	80089a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e4:	e02e      	b.n	8008944 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e6:	4b34      	ldr	r3, [pc, #208]	; (80089b8 <xTaskResumeAll+0x11c>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3318      	adds	r3, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fd79 	bl	80083ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fd74 	bl	80083ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	2201      	movs	r2, #1
 8008908:	409a      	lsls	r2, r3
 800890a:	4b2c      	ldr	r3, [pc, #176]	; (80089bc <xTaskResumeAll+0x120>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <xTaskResumeAll+0x120>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <xTaskResumeAll+0x124>)
 8008922:	441a      	add	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7ff fd00 	bl	8008330 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <xTaskResumeAll+0x128>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	429a      	cmp	r2, r3
 800893c:	d302      	bcc.n	8008944 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800893e:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <xTaskResumeAll+0x12c>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008944:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <xTaskResumeAll+0x11c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1cc      	bne.n	80088e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008952:	f000 fa03 	bl	8008d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008956:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <xTaskResumeAll+0x130>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d010      	beq.n	8008984 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008962:	f000 f837 	bl	80089d4 <xTaskIncrementTick>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800896c:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <xTaskResumeAll+0x12c>)
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3b01      	subs	r3, #1
 8008976:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1f1      	bne.n	8008962 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <xTaskResumeAll+0x130>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008984:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <xTaskResumeAll+0x12c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <xTaskResumeAll+0x134>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a0:	f000 fbba 	bl	8009118 <vPortExitCritical>

	return xAlreadyYielded;
 80089a4:	68bb      	ldr	r3, [r7, #8]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	200003a8 	.word	0x200003a8
 80089b4:	20000380 	.word	0x20000380
 80089b8:	20000340 	.word	0x20000340
 80089bc:	20000388 	.word	0x20000388
 80089c0:	20000284 	.word	0x20000284
 80089c4:	20000280 	.word	0x20000280
 80089c8:	20000394 	.word	0x20000394
 80089cc:	20000390 	.word	0x20000390
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089de:	4b4e      	ldr	r3, [pc, #312]	; (8008b18 <xTaskIncrementTick+0x144>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8087 	bne.w	8008af6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089e8:	4b4c      	ldr	r3, [pc, #304]	; (8008b1c <xTaskIncrementTick+0x148>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f0:	4a4a      	ldr	r2, [pc, #296]	; (8008b1c <xTaskIncrementTick+0x148>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d11f      	bne.n	8008a3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80089fc:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <xTaskIncrementTick+0x14c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <xTaskIncrementTick+0x46>
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	e7fe      	b.n	8008a18 <xTaskIncrementTick+0x44>
 8008a1a:	4b41      	ldr	r3, [pc, #260]	; (8008b20 <xTaskIncrementTick+0x14c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	4b40      	ldr	r3, [pc, #256]	; (8008b24 <xTaskIncrementTick+0x150>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a3e      	ldr	r2, [pc, #248]	; (8008b20 <xTaskIncrementTick+0x14c>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4a3e      	ldr	r2, [pc, #248]	; (8008b24 <xTaskIncrementTick+0x150>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	4b3e      	ldr	r3, [pc, #248]	; (8008b28 <xTaskIncrementTick+0x154>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	4a3c      	ldr	r2, [pc, #240]	; (8008b28 <xTaskIncrementTick+0x154>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	f000 f990 	bl	8008d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a3c:	4b3b      	ldr	r3, [pc, #236]	; (8008b2c <xTaskIncrementTick+0x158>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d348      	bcc.n	8008ad8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a46:	4b36      	ldr	r3, [pc, #216]	; (8008b20 <xTaskIncrementTick+0x14c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a50:	4b36      	ldr	r3, [pc, #216]	; (8008b2c <xTaskIncrementTick+0x158>)
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	601a      	str	r2, [r3, #0]
					break;
 8008a58:	e03e      	b.n	8008ad8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <xTaskIncrementTick+0x14c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d203      	bcs.n	8008a7a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a72:	4a2e      	ldr	r2, [pc, #184]	; (8008b2c <xTaskIncrementTick+0x158>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a78:	e02e      	b.n	8008ad8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fcb3 	bl	80083ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3318      	adds	r3, #24
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fcaa 	bl	80083ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	409a      	lsls	r2, r3
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <xTaskIncrementTick+0x15c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <xTaskIncrementTick+0x15c>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <xTaskIncrementTick+0x160>)
 8008ab6:	441a      	add	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7ff fc36 	bl	8008330 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <xTaskIncrementTick+0x164>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d3b9      	bcc.n	8008a46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad6:	e7b6      	b.n	8008a46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ad8:	4b17      	ldr	r3, [pc, #92]	; (8008b38 <xTaskIncrementTick+0x164>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4915      	ldr	r1, [pc, #84]	; (8008b34 <xTaskIncrementTick+0x160>)
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d907      	bls.n	8008b00 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008af0:	2301      	movs	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e004      	b.n	8008b00 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <xTaskIncrementTick+0x168>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	4a0f      	ldr	r2, [pc, #60]	; (8008b3c <xTaskIncrementTick+0x168>)
 8008afe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <xTaskIncrementTick+0x16c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b0c:	697b      	ldr	r3, [r7, #20]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200003a8 	.word	0x200003a8
 8008b1c:	20000384 	.word	0x20000384
 8008b20:	20000338 	.word	0x20000338
 8008b24:	2000033c 	.word	0x2000033c
 8008b28:	20000398 	.word	0x20000398
 8008b2c:	200003a0 	.word	0x200003a0
 8008b30:	20000388 	.word	0x20000388
 8008b34:	20000284 	.word	0x20000284
 8008b38:	20000280 	.word	0x20000280
 8008b3c:	20000390 	.word	0x20000390
 8008b40:	20000394 	.word	0x20000394

08008b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b4a:	4b26      	ldr	r3, [pc, #152]	; (8008be4 <vTaskSwitchContext+0xa0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b52:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <vTaskSwitchContext+0xa4>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b58:	e03e      	b.n	8008bd8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008b5a:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <vTaskSwitchContext+0xa4>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b60:	4b22      	ldr	r3, [pc, #136]	; (8008bec <vTaskSwitchContext+0xa8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	fab3 f383 	clz	r3, r3
 8008b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	f1c3 031f 	rsb	r3, r3, #31
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	491e      	ldr	r1, [pc, #120]	; (8008bf0 <vTaskSwitchContext+0xac>)
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <vTaskSwitchContext+0x5a>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	e7fe      	b.n	8008b9c <vTaskSwitchContext+0x58>
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a11      	ldr	r2, [pc, #68]	; (8008bf0 <vTaskSwitchContext+0xac>)
 8008baa:	4413      	add	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	605a      	str	r2, [r3, #4]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d104      	bne.n	8008bce <vTaskSwitchContext+0x8a>
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	605a      	str	r2, [r3, #4]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	4a07      	ldr	r2, [pc, #28]	; (8008bf4 <vTaskSwitchContext+0xb0>)
 8008bd6:	6013      	str	r3, [r2, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	200003a8 	.word	0x200003a8
 8008be8:	20000394 	.word	0x20000394
 8008bec:	20000388 	.word	0x20000388
 8008bf0:	20000284 	.word	0x20000284
 8008bf4:	20000280 	.word	0x20000280

08008bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c00:	f000 f852 	bl	8008ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <prvIdleTask+0x28>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d9f9      	bls.n	8008c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <prvIdleTask+0x2c>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c1c:	e7f0      	b.n	8008c00 <prvIdleTask+0x8>
 8008c1e:	bf00      	nop
 8008c20:	20000284 	.word	0x20000284
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e00c      	b.n	8008c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a12      	ldr	r2, [pc, #72]	; (8008c88 <prvInitialiseTaskLists+0x60>)
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fb47 	bl	80082d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b06      	cmp	r3, #6
 8008c52:	d9ef      	bls.n	8008c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c54:	480d      	ldr	r0, [pc, #52]	; (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c56:	f7ff fb3e 	bl	80082d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c5a:	480d      	ldr	r0, [pc, #52]	; (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c5c:	f7ff fb3b 	bl	80082d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c60:	480c      	ldr	r0, [pc, #48]	; (8008c94 <prvInitialiseTaskLists+0x6c>)
 8008c62:	f7ff fb38 	bl	80082d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c66:	480c      	ldr	r0, [pc, #48]	; (8008c98 <prvInitialiseTaskLists+0x70>)
 8008c68:	f7ff fb35 	bl	80082d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c6c:	480b      	ldr	r0, [pc, #44]	; (8008c9c <prvInitialiseTaskLists+0x74>)
 8008c6e:	f7ff fb32 	bl	80082d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <prvInitialiseTaskLists+0x78>)
 8008c74:	4a05      	ldr	r2, [pc, #20]	; (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <prvInitialiseTaskLists+0x7c>)
 8008c7a:	4a05      	ldr	r2, [pc, #20]	; (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000284 	.word	0x20000284
 8008c8c:	20000310 	.word	0x20000310
 8008c90:	20000324 	.word	0x20000324
 8008c94:	20000340 	.word	0x20000340
 8008c98:	20000354 	.word	0x20000354
 8008c9c:	2000036c 	.word	0x2000036c
 8008ca0:	20000338 	.word	0x20000338
 8008ca4:	2000033c 	.word	0x2000033c

08008ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cae:	e019      	b.n	8008ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cb0:	f000 fa04 	bl	80090bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <prvCheckTasksWaitingTermination+0x4c>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fb92 	bl	80083ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <prvCheckTasksWaitingTermination+0x50>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <prvCheckTasksWaitingTermination+0x50>)
 8008cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cda:	f000 fa1d 	bl	8009118 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f80e 	bl	8008d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e1      	bne.n	8008cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000354 	.word	0x20000354
 8008cf8:	20000380 	.word	0x20000380
 8008cfc:	20000368 	.word	0x20000368

08008d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d108      	bne.n	8008d24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fb6e 	bl	80093f8 <vPortFree>
				vPortFree( pxTCB );
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fb6b 	bl	80093f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d22:	e017      	b.n	8008d54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d103      	bne.n	8008d36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb62 	bl	80093f8 <vPortFree>
	}
 8008d34:	e00e      	b.n	8008d54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d009      	beq.n	8008d54 <prvDeleteTCB+0x54>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e7fe      	b.n	8008d52 <prvDeleteTCB+0x52>
	}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <prvResetNextTaskUnblockTime+0x38>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <prvResetNextTaskUnblockTime+0x3c>)
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d74:	e008      	b.n	8008d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <prvResetNextTaskUnblockTime+0x38>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <prvResetNextTaskUnblockTime+0x3c>)
 8008d86:	6013      	str	r3, [r2, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000338 	.word	0x20000338
 8008d98:	200003a0 	.word	0x200003a0

08008d9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008da6:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dac:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fb19 	bl	80083ea <uxListRemove>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	43da      	mvns	r2, r3
 8008dcc:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	4a20      	ldr	r2, [pc, #128]	; (8008e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ddc:	d10a      	bne.n	8008df4 <prvAddCurrentTaskToDelayedList+0x58>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	481a      	ldr	r0, [pc, #104]	; (8008e58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dee:	f7ff fa9f 	bl	8008330 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008df2:	e026      	b.n	8008e42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dfc:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d209      	bcs.n	8008e20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7ff faad 	bl	8008378 <vListInsert>
}
 8008e1e:	e010      	b.n	8008e42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	f7ff faa3 	bl	8008378 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e32:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d202      	bcs.n	8008e42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6013      	str	r3, [r2, #0]
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000384 	.word	0x20000384
 8008e50:	20000280 	.word	0x20000280
 8008e54:	20000388 	.word	0x20000388
 8008e58:	2000036c 	.word	0x2000036c
 8008e5c:	2000033c 	.word	0x2000033c
 8008e60:	20000338 	.word	0x20000338
 8008e64:	200003a0 	.word	0x200003a0

08008e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3b04      	subs	r3, #4
 8008e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f023 0201 	bic.w	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3b04      	subs	r3, #4
 8008e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e98:	4a0c      	ldr	r2, [pc, #48]	; (8008ecc <pxPortInitialiseStack+0x64>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3b14      	subs	r3, #20
 8008ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f06f 0202 	mvn.w	r2, #2
 8008eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3b20      	subs	r3, #32
 8008ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	08008ed1 	.word	0x08008ed1

08008ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <prvTaskExitError+0x50>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee2:	d009      	beq.n	8008ef8 <prvTaskExitError+0x28>
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e7fe      	b.n	8008ef6 <prvTaskExitError+0x26>
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f0a:	bf00      	nop
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0fc      	beq.n	8008f0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	2000000c 	.word	0x2000000c
	...

08008f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f30:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <pxCurrentTCBConst2>)
 8008f32:	6819      	ldr	r1, [r3, #0]
 8008f34:	6808      	ldr	r0, [r1, #0]
 8008f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3a:	f380 8809 	msr	PSP, r0
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f04f 0000 	mov.w	r0, #0
 8008f46:	f380 8811 	msr	BASEPRI, r0
 8008f4a:	4770      	bx	lr
 8008f4c:	f3af 8000 	nop.w

08008f50 <pxCurrentTCBConst2>:
 8008f50:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop

08008f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f58:	4808      	ldr	r0, [pc, #32]	; (8008f7c <prvPortStartFirstTask+0x24>)
 8008f5a:	6800      	ldr	r0, [r0, #0]
 8008f5c:	6800      	ldr	r0, [r0, #0]
 8008f5e:	f380 8808 	msr	MSP, r0
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8814 	msr	CONTROL, r0
 8008f6a:	b662      	cpsie	i
 8008f6c:	b661      	cpsie	f
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	df00      	svc	0
 8008f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f7a:	bf00      	nop
 8008f7c:	e000ed08 	.word	0xe000ed08

08008f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f86:	4b44      	ldr	r3, [pc, #272]	; (8009098 <xPortStartScheduler+0x118>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a44      	ldr	r2, [pc, #272]	; (800909c <xPortStartScheduler+0x11c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d109      	bne.n	8008fa4 <xPortStartScheduler+0x24>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	e7fe      	b.n	8008fa2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fa4:	4b3c      	ldr	r3, [pc, #240]	; (8009098 <xPortStartScheduler+0x118>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a3d      	ldr	r2, [pc, #244]	; (80090a0 <xPortStartScheduler+0x120>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d109      	bne.n	8008fc2 <xPortStartScheduler+0x42>
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	e7fe      	b.n	8008fc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fc2:	4b38      	ldr	r3, [pc, #224]	; (80090a4 <xPortStartScheduler+0x124>)
 8008fc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	22ff      	movs	r2, #255	; 0xff
 8008fd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	4b30      	ldr	r3, [pc, #192]	; (80090a8 <xPortStartScheduler+0x128>)
 8008fe8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fea:	4b30      	ldr	r3, [pc, #192]	; (80090ac <xPortStartScheduler+0x12c>)
 8008fec:	2207      	movs	r2, #7
 8008fee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ff0:	e009      	b.n	8009006 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008ff2:	4b2e      	ldr	r3, [pc, #184]	; (80090ac <xPortStartScheduler+0x12c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	4a2c      	ldr	r2, [pc, #176]	; (80090ac <xPortStartScheduler+0x12c>)
 8008ffa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800900e:	2b80      	cmp	r3, #128	; 0x80
 8009010:	d0ef      	beq.n	8008ff2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009012:	4b26      	ldr	r3, [pc, #152]	; (80090ac <xPortStartScheduler+0x12c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f1c3 0307 	rsb	r3, r3, #7
 800901a:	2b04      	cmp	r3, #4
 800901c:	d009      	beq.n	8009032 <xPortStartScheduler+0xb2>
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
 8009030:	e7fe      	b.n	8009030 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009032:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <xPortStartScheduler+0x12c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	4a1c      	ldr	r2, [pc, #112]	; (80090ac <xPortStartScheduler+0x12c>)
 800903a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800903c:	4b1b      	ldr	r3, [pc, #108]	; (80090ac <xPortStartScheduler+0x12c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009044:	4a19      	ldr	r2, [pc, #100]	; (80090ac <xPortStartScheduler+0x12c>)
 8009046:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	b2da      	uxtb	r2, r3
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009050:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <xPortStartScheduler+0x130>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a16      	ldr	r2, [pc, #88]	; (80090b0 <xPortStartScheduler+0x130>)
 8009056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800905a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800905c:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <xPortStartScheduler+0x130>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <xPortStartScheduler+0x130>)
 8009062:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009066:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009068:	f000 f8d6 	bl	8009218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <xPortStartScheduler+0x134>)
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009072:	f000 f8f5 	bl	8009260 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009076:	4b10      	ldr	r3, [pc, #64]	; (80090b8 <xPortStartScheduler+0x138>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a0f      	ldr	r2, [pc, #60]	; (80090b8 <xPortStartScheduler+0x138>)
 800907c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009080:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009082:	f7ff ff69 	bl	8008f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009086:	f7ff fd5d 	bl	8008b44 <vTaskSwitchContext>
	prvTaskExitError();
 800908a:	f7ff ff21 	bl	8008ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	e000ed00 	.word	0xe000ed00
 800909c:	410fc271 	.word	0x410fc271
 80090a0:	410fc270 	.word	0x410fc270
 80090a4:	e000e400 	.word	0xe000e400
 80090a8:	200003ac 	.word	0x200003ac
 80090ac:	200003b0 	.word	0x200003b0
 80090b0:	e000ed20 	.word	0xe000ed20
 80090b4:	2000000c 	.word	0x2000000c
 80090b8:	e000ef34 	.word	0xe000ef34

080090bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <vPortEnterCritical+0x54>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	4a0d      	ldr	r2, [pc, #52]	; (8009110 <vPortEnterCritical+0x54>)
 80090dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <vPortEnterCritical+0x54>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d10e      	bne.n	8009104 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <vPortEnterCritical+0x58>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d009      	beq.n	8009104 <vPortEnterCritical+0x48>
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	e7fe      	b.n	8009102 <vPortEnterCritical+0x46>
	}
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	2000000c 	.word	0x2000000c
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800911e:	4b11      	ldr	r3, [pc, #68]	; (8009164 <vPortExitCritical+0x4c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <vPortExitCritical+0x22>
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	607b      	str	r3, [r7, #4]
 8009138:	e7fe      	b.n	8009138 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800913a:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <vPortExitCritical+0x4c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3b01      	subs	r3, #1
 8009140:	4a08      	ldr	r2, [pc, #32]	; (8009164 <vPortExitCritical+0x4c>)
 8009142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <vPortExitCritical+0x4c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <vPortExitCritical+0x3e>
 800914c:	2300      	movs	r3, #0
 800914e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	2000000c 	.word	0x2000000c
	...

08009170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009170:	f3ef 8009 	mrs	r0, PSP
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <pxCurrentTCBConst>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	f01e 0f10 	tst.w	lr, #16
 8009180:	bf08      	it	eq
 8009182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	6010      	str	r0, [r2, #0]
 800918c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009194:	f380 8811 	msr	BASEPRI, r0
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f7ff fcd0 	bl	8008b44 <vTaskSwitchContext>
 80091a4:	f04f 0000 	mov.w	r0, #0
 80091a8:	f380 8811 	msr	BASEPRI, r0
 80091ac:	bc09      	pop	{r0, r3}
 80091ae:	6819      	ldr	r1, [r3, #0]
 80091b0:	6808      	ldr	r0, [r1, #0]
 80091b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b6:	f01e 0f10 	tst.w	lr, #16
 80091ba:	bf08      	it	eq
 80091bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091c0:	f380 8809 	msr	PSP, r0
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w

080091d0 <pxCurrentTCBConst>:
 80091d0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091f0:	f7ff fbf0 	bl	80089d4 <xTaskIncrementTick>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <SysTick_Handler+0x3c>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	2300      	movs	r3, #0
 8009204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <vPortSetupTimerInterrupt+0x34>)
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009222:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <vPortSetupTimerInterrupt+0x38>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <vPortSetupTimerInterrupt+0x3c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <vPortSetupTimerInterrupt+0x40>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	099b      	lsrs	r3, r3, #6
 8009234:	4a09      	ldr	r2, [pc, #36]	; (800925c <vPortSetupTimerInterrupt+0x44>)
 8009236:	3b01      	subs	r3, #1
 8009238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <vPortSetupTimerInterrupt+0x34>)
 800923c:	2207      	movs	r2, #7
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	e000e010 	.word	0xe000e010
 8009250:	e000e018 	.word	0xe000e018
 8009254:	20000000 	.word	0x20000000
 8009258:	10624dd3 	.word	0x10624dd3
 800925c:	e000e014 	.word	0xe000e014

08009260 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009260:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009270 <vPortEnableVFP+0x10>
 8009264:	6801      	ldr	r1, [r0, #0]
 8009266:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800926a:	6001      	str	r1, [r0, #0]
 800926c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800926e:	bf00      	nop
 8009270:	e000ed88 	.word	0xe000ed88

08009274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009280:	f7ff fafe 	bl	8008880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009284:	4b57      	ldr	r3, [pc, #348]	; (80093e4 <pvPortMalloc+0x170>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800928c:	f000 f90c 	bl	80094a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009290:	4b55      	ldr	r3, [pc, #340]	; (80093e8 <pvPortMalloc+0x174>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4013      	ands	r3, r2
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 808c 	bne.w	80093b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01c      	beq.n	80092de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80092a4:	2208      	movs	r2, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d013      	beq.n	80092de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f023 0307 	bic.w	r3, r3, #7
 80092bc:	3308      	adds	r3, #8
 80092be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <pvPortMalloc+0x6a>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e7fe      	b.n	80092dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d068      	beq.n	80093b6 <pvPortMalloc+0x142>
 80092e4:	4b41      	ldr	r3, [pc, #260]	; (80093ec <pvPortMalloc+0x178>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d863      	bhi.n	80093b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092ee:	4b40      	ldr	r3, [pc, #256]	; (80093f0 <pvPortMalloc+0x17c>)
 80092f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092f2:	4b3f      	ldr	r3, [pc, #252]	; (80093f0 <pvPortMalloc+0x17c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f8:	e004      	b.n	8009304 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d903      	bls.n	8009316 <pvPortMalloc+0xa2>
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f1      	bne.n	80092fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009316:	4b33      	ldr	r3, [pc, #204]	; (80093e4 <pvPortMalloc+0x170>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	429a      	cmp	r2, r3
 800931e:	d04a      	beq.n	80093b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2208      	movs	r2, #8
 8009326:	4413      	add	r3, r2
 8009328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	2308      	movs	r3, #8
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	d91e      	bls.n	8009380 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4413      	add	r3, r2
 8009348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <pvPortMalloc+0xf4>
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e7fe      	b.n	8009366 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800937a:	69b8      	ldr	r0, [r7, #24]
 800937c:	f000 f8f6 	bl	800956c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009380:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <pvPortMalloc+0x178>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	4a18      	ldr	r2, [pc, #96]	; (80093ec <pvPortMalloc+0x178>)
 800938c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <pvPortMalloc+0x178>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b18      	ldr	r3, [pc, #96]	; (80093f4 <pvPortMalloc+0x180>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d203      	bcs.n	80093a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <pvPortMalloc+0x178>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <pvPortMalloc+0x180>)
 80093a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <pvPortMalloc+0x174>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093b6:	f7ff fa71 	bl	800889c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d009      	beq.n	80093d8 <pvPortMalloc+0x164>
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e7fe      	b.n	80093d6 <pvPortMalloc+0x162>
	return pvReturn;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3728      	adds	r7, #40	; 0x28
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000f74 	.word	0x20000f74
 80093e8:	20000f80 	.word	0x20000f80
 80093ec:	20000f78 	.word	0x20000f78
 80093f0:	20000f6c 	.word	0x20000f6c
 80093f4:	20000f7c 	.word	0x20000f7c

080093f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d046      	beq.n	8009498 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800940a:	2308      	movs	r3, #8
 800940c:	425b      	negs	r3, r3
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4413      	add	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <vPortFree+0xa8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <vPortFree+0x42>
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e7fe      	b.n	8009438 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d009      	beq.n	8009456 <vPortFree+0x5e>
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	e7fe      	b.n	8009454 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <vPortFree+0xa8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d019      	beq.n	8009498 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d115      	bne.n	8009498 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortFree+0xa8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	43db      	mvns	r3, r3
 8009476:	401a      	ands	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800947c:	f7ff fa00 	bl	8008880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <vPortFree+0xac>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4413      	add	r3, r2
 800948a:	4a06      	ldr	r2, [pc, #24]	; (80094a4 <vPortFree+0xac>)
 800948c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f000 f86c 	bl	800956c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009494:	f7ff fa02 	bl	800889c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009498:	bf00      	nop
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000f80 	.word	0x20000f80
 80094a4:	20000f78 	.word	0x20000f78

080094a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80094b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <prvHeapInit+0xac>)
 80094b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3307      	adds	r3, #7
 80094c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <prvHeapInit+0xac>)
 80094d8:	4413      	add	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094e0:	4a1d      	ldr	r2, [pc, #116]	; (8009558 <prvHeapInit+0xb0>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e6:	4b1c      	ldr	r3, [pc, #112]	; (8009558 <prvHeapInit+0xb0>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094f4:	2208      	movs	r2, #8
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <prvHeapInit+0xb4>)
 8009508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <prvHeapInit+0xb4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <prvHeapInit+0xb4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <prvHeapInit+0xb4>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <prvHeapInit+0xb8>)
 8009536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4a09      	ldr	r2, [pc, #36]	; (8009564 <prvHeapInit+0xbc>)
 800953e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <prvHeapInit+0xc0>)
 8009542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009546:	601a      	str	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	200003b4 	.word	0x200003b4
 8009558:	20000f6c 	.word	0x20000f6c
 800955c:	20000f74 	.word	0x20000f74
 8009560:	20000f7c 	.word	0x20000f7c
 8009564:	20000f78 	.word	0x20000f78
 8009568:	20000f80 	.word	0x20000f80

0800956c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009574:	4b28      	ldr	r3, [pc, #160]	; (8009618 <prvInsertBlockIntoFreeList+0xac>)
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e002      	b.n	8009580 <prvInsertBlockIntoFreeList+0x14>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d8f7      	bhi.n	800957a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4413      	add	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d108      	bne.n	80095ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	441a      	add	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d118      	bne.n	80095f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b15      	ldr	r3, [pc, #84]	; (800961c <prvInsertBlockIntoFreeList+0xb0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d00d      	beq.n	80095ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	441a      	add	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	e008      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <prvInsertBlockIntoFreeList+0xb0>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e003      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d002      	beq.n	800960a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	20000f6c 	.word	0x20000f6c
 800961c:	20000f74 	.word	0x20000f74

08009620 <__libc_init_array>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4e0d      	ldr	r6, [pc, #52]	; (8009658 <__libc_init_array+0x38>)
 8009624:	4c0d      	ldr	r4, [pc, #52]	; (800965c <__libc_init_array+0x3c>)
 8009626:	1ba4      	subs	r4, r4, r6
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	2500      	movs	r5, #0
 800962c:	42a5      	cmp	r5, r4
 800962e:	d109      	bne.n	8009644 <__libc_init_array+0x24>
 8009630:	4e0b      	ldr	r6, [pc, #44]	; (8009660 <__libc_init_array+0x40>)
 8009632:	4c0c      	ldr	r4, [pc, #48]	; (8009664 <__libc_init_array+0x44>)
 8009634:	f000 f82c 	bl	8009690 <_init>
 8009638:	1ba4      	subs	r4, r4, r6
 800963a:	10a4      	asrs	r4, r4, #2
 800963c:	2500      	movs	r5, #0
 800963e:	42a5      	cmp	r5, r4
 8009640:	d105      	bne.n	800964e <__libc_init_array+0x2e>
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009648:	4798      	blx	r3
 800964a:	3501      	adds	r5, #1
 800964c:	e7ee      	b.n	800962c <__libc_init_array+0xc>
 800964e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009652:	4798      	blx	r3
 8009654:	3501      	adds	r5, #1
 8009656:	e7f2      	b.n	800963e <__libc_init_array+0x1e>
 8009658:	08009b20 	.word	0x08009b20
 800965c:	08009b20 	.word	0x08009b20
 8009660:	08009b20 	.word	0x08009b20
 8009664:	08009b24 	.word	0x08009b24

08009668 <memcpy>:
 8009668:	b510      	push	{r4, lr}
 800966a:	1e43      	subs	r3, r0, #1
 800966c:	440a      	add	r2, r1
 800966e:	4291      	cmp	r1, r2
 8009670:	d100      	bne.n	8009674 <memcpy+0xc>
 8009672:	bd10      	pop	{r4, pc}
 8009674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967c:	e7f7      	b.n	800966e <memcpy+0x6>

0800967e <memset>:
 800967e:	4402      	add	r2, r0
 8009680:	4603      	mov	r3, r0
 8009682:	4293      	cmp	r3, r2
 8009684:	d100      	bne.n	8009688 <memset+0xa>
 8009686:	4770      	bx	lr
 8009688:	f803 1b01 	strb.w	r1, [r3], #1
 800968c:	e7f9      	b.n	8009682 <memset+0x4>
	...

08009690 <_init>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr

0800969c <_fini>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr
