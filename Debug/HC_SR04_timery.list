
HC_SR04_timery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aebc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d0  0800b5d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d8  0800b5d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  20000080  0800b65c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  0800b65c  0002198c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023696  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041c1  00000000  00000000  00043742  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bd8  00000000  00000000  00047908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f0  00000000  00000000  000494e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f198  00000000  00000000  0004aed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016d1b  00000000  00000000  0007a068  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118281  00000000  00000000  00090d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a9004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e24  00000000  00000000  001a9080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b064 	.word	0x0800b064

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	0800b064 	.word	0x0800b064

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b994 	b.w	8001048 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f828 	bl	8000d7c <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <__aeabi_d2ulz+0x3c>)
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc71 	bl	8000628 <__aeabi_dmul>
 8000d46:	f000 f981 	bl	800104c <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fbf2 	bl	8000534 <__aeabi_ui2d>
 8000d50:	2200      	movs	r2, #0
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <__aeabi_d2ulz+0x40>)
 8000d54:	f7ff fc68 	bl	8000628 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faaa 	bl	80002b8 <__aeabi_dsub>
 8000d64:	f000 f972 	bl	800104c <__aeabi_d2uiz>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4310      	orrs	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	bdd0      	pop	{r4, r6, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	3df00000 	.word	0x3df00000
 8000d78:	41f00000 	.word	0x41f00000

08000d7c <__udivmoddi4>:
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	9e08      	ldr	r6, [sp, #32]
 8000d82:	4604      	mov	r4, r0
 8000d84:	4688      	mov	r8, r1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d14b      	bne.n	8000e22 <__udivmoddi4+0xa6>
 8000d8a:	428a      	cmp	r2, r1
 8000d8c:	4615      	mov	r5, r2
 8000d8e:	d967      	bls.n	8000e60 <__udivmoddi4+0xe4>
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	b14a      	cbz	r2, 8000daa <__udivmoddi4+0x2e>
 8000d96:	f1c2 0720 	rsb	r7, r2, #32
 8000d9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000da2:	4095      	lsls	r5, r2
 8000da4:	ea47 0803 	orr.w	r8, r7, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	0c23      	lsrs	r3, r4, #16
 8000db0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db4:	fa1f fc85 	uxth.w	ip, r5
 8000db8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000dbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x60>
 8000dc8:	18eb      	adds	r3, r5, r3
 8000dca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dce:	f080 811b 	bcs.w	8001008 <__udivmoddi4+0x28c>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 8118 	bls.w	8001008 <__udivmoddi4+0x28c>
 8000dd8:	3f02      	subs	r7, #2
 8000dda:	442b      	add	r3, r5
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x8c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x290>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x290>
 8000e04:	3802      	subs	r0, #2
 8000e06:	442c      	add	r4, r5
 8000e08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	2700      	movs	r7, #0
 8000e12:	b11e      	cbz	r6, 8000e1c <__udivmoddi4+0xa0>
 8000e14:	40d4      	lsrs	r4, r2
 8000e16:	2300      	movs	r3, #0
 8000e18:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d909      	bls.n	8000e3a <__udivmoddi4+0xbe>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	f000 80eb 	beq.w	8001002 <__udivmoddi4+0x286>
 8000e2c:	2700      	movs	r7, #0
 8000e2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e32:	4638      	mov	r0, r7
 8000e34:	4639      	mov	r1, r7
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	fab3 f783 	clz	r7, r3
 8000e3e:	2f00      	cmp	r7, #0
 8000e40:	d147      	bne.n	8000ed2 <__udivmoddi4+0x156>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xd0>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80fa 	bhi.w	8001040 <__udivmoddi4+0x2c4>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4698      	mov	r8, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d0e0      	beq.n	8000e1c <__udivmoddi4+0xa0>
 8000e5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5e:	e7dd      	b.n	8000e1c <__udivmoddi4+0xa0>
 8000e60:	b902      	cbnz	r2, 8000e64 <__udivmoddi4+0xe8>
 8000e62:	deff      	udf	#255	; 0xff
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 808f 	bne.w	8000f8c <__udivmoddi4+0x210>
 8000e6e:	1b49      	subs	r1, r1, r5
 8000e70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e74:	fa1f f885 	uxth.w	r8, r5
 8000e78:	2701      	movs	r7, #1
 8000e7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7e:	0c23      	lsrs	r3, r4, #16
 8000e80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e88:	fb08 f10c 	mul.w	r1, r8, ip
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x124>
 8000e90:	18eb      	adds	r3, r5, r3
 8000e92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x122>
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2bc>
 8000e9e:	4684      	mov	ip, r0
 8000ea0:	1a59      	subs	r1, r3, r1
 8000ea2:	b2a3      	uxth	r3, r4
 8000ea4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000eac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eb0:	fb08 f800 	mul.w	r8, r8, r0
 8000eb4:	45a0      	cmp	r8, r4
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x14c>
 8000eb8:	192c      	adds	r4, r5, r4
 8000eba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x14a>
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	f200 80b6 	bhi.w	8001032 <__udivmoddi4+0x2b6>
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	eba4 0408 	sub.w	r4, r4, r8
 8000ecc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ed0:	e79f      	b.n	8000e12 <__udivmoddi4+0x96>
 8000ed2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed6:	40bb      	lsls	r3, r7
 8000ed8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000edc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ee0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000eec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ef0:	4325      	orrs	r5, r4
 8000ef2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef6:	0c2c      	lsrs	r4, r5, #16
 8000ef8:	fb08 3319 	mls	r3, r8, r9, r3
 8000efc:	fa1f fa8e 	uxth.w	sl, lr
 8000f00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f04:	fb09 f40a 	mul.w	r4, r9, sl
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b0>
 8000f14:	eb1e 0303 	adds.w	r3, lr, r3
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	f080 8087 	bcs.w	800102e <__udivmoddi4+0x2b2>
 8000f20:	429c      	cmp	r4, r3
 8000f22:	f240 8084 	bls.w	800102e <__udivmoddi4+0x2b2>
 8000f26:	f1a9 0902 	sub.w	r9, r9, #2
 8000f2a:	4473      	add	r3, lr
 8000f2c:	1b1b      	subs	r3, r3, r4
 8000f2e:	b2ad      	uxth	r5, r5
 8000f30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f34:	fb08 3310 	mls	r3, r8, r0, r3
 8000f38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f40:	45a2      	cmp	sl, r4
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1da>
 8000f44:	eb1e 0404 	adds.w	r4, lr, r4
 8000f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f4c:	d26b      	bcs.n	8001026 <__udivmoddi4+0x2aa>
 8000f4e:	45a2      	cmp	sl, r4
 8000f50:	d969      	bls.n	8001026 <__udivmoddi4+0x2aa>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4474      	add	r4, lr
 8000f56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	eba4 040a 	sub.w	r4, r4, sl
 8000f62:	454c      	cmp	r4, r9
 8000f64:	46c2      	mov	sl, r8
 8000f66:	464b      	mov	r3, r9
 8000f68:	d354      	bcc.n	8001014 <__udivmoddi4+0x298>
 8000f6a:	d051      	beq.n	8001010 <__udivmoddi4+0x294>
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d069      	beq.n	8001044 <__udivmoddi4+0x2c8>
 8000f70:	ebb1 050a 	subs.w	r5, r1, sl
 8000f74:	eb64 0403 	sbc.w	r4, r4, r3
 8000f78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f7c:	40fd      	lsrs	r5, r7
 8000f7e:	40fc      	lsrs	r4, r7
 8000f80:	ea4c 0505 	orr.w	r5, ip, r5
 8000f84:	e9c6 5400 	strd	r5, r4, [r6]
 8000f88:	2700      	movs	r7, #0
 8000f8a:	e747      	b.n	8000e1c <__udivmoddi4+0xa0>
 8000f8c:	f1c2 0320 	rsb	r3, r2, #32
 8000f90:	fa20 f703 	lsr.w	r7, r0, r3
 8000f94:	4095      	lsls	r5, r2
 8000f96:	fa01 f002 	lsl.w	r0, r1, r2
 8000f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa2:	4338      	orrs	r0, r7
 8000fa4:	0c01      	lsrs	r1, r0, #16
 8000fa6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000faa:	fa1f f885 	uxth.w	r8, r5
 8000fae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb6:	fb07 f308 	mul.w	r3, r7, r8
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d907      	bls.n	8000fd2 <__udivmoddi4+0x256>
 8000fc2:	1869      	adds	r1, r5, r1
 8000fc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc8:	d22f      	bcs.n	800102a <__udivmoddi4+0x2ae>
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d92d      	bls.n	800102a <__udivmoddi4+0x2ae>
 8000fce:	3f02      	subs	r7, #2
 8000fd0:	4429      	add	r1, r5
 8000fd2:	1acb      	subs	r3, r1, r3
 8000fd4:	b281      	uxth	r1, r0
 8000fd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe2:	fb00 f308 	mul.w	r3, r0, r8
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d907      	bls.n	8000ffa <__udivmoddi4+0x27e>
 8000fea:	1869      	adds	r1, r5, r1
 8000fec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ff0:	d217      	bcs.n	8001022 <__udivmoddi4+0x2a6>
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d915      	bls.n	8001022 <__udivmoddi4+0x2a6>
 8000ff6:	3802      	subs	r0, #2
 8000ff8:	4429      	add	r1, r5
 8000ffa:	1ac9      	subs	r1, r1, r3
 8000ffc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001000:	e73b      	b.n	8000e7a <__udivmoddi4+0xfe>
 8001002:	4637      	mov	r7, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e709      	b.n	8000e1c <__udivmoddi4+0xa0>
 8001008:	4607      	mov	r7, r0
 800100a:	e6e7      	b.n	8000ddc <__udivmoddi4+0x60>
 800100c:	4618      	mov	r0, r3
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x8c>
 8001010:	4541      	cmp	r1, r8
 8001012:	d2ab      	bcs.n	8000f6c <__udivmoddi4+0x1f0>
 8001014:	ebb8 0a02 	subs.w	sl, r8, r2
 8001018:	eb69 020e 	sbc.w	r2, r9, lr
 800101c:	3801      	subs	r0, #1
 800101e:	4613      	mov	r3, r2
 8001020:	e7a4      	b.n	8000f6c <__udivmoddi4+0x1f0>
 8001022:	4660      	mov	r0, ip
 8001024:	e7e9      	b.n	8000ffa <__udivmoddi4+0x27e>
 8001026:	4618      	mov	r0, r3
 8001028:	e795      	b.n	8000f56 <__udivmoddi4+0x1da>
 800102a:	4667      	mov	r7, ip
 800102c:	e7d1      	b.n	8000fd2 <__udivmoddi4+0x256>
 800102e:	4681      	mov	r9, r0
 8001030:	e77c      	b.n	8000f2c <__udivmoddi4+0x1b0>
 8001032:	3802      	subs	r0, #2
 8001034:	442c      	add	r4, r5
 8001036:	e747      	b.n	8000ec8 <__udivmoddi4+0x14c>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	442b      	add	r3, r5
 800103e:	e72f      	b.n	8000ea0 <__udivmoddi4+0x124>
 8001040:	4638      	mov	r0, r7
 8001042:	e708      	b.n	8000e56 <__udivmoddi4+0xda>
 8001044:	4637      	mov	r7, r6
 8001046:	e6e9      	b.n	8000e1c <__udivmoddi4+0xa0>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_d2uiz>:
 800104c:	004a      	lsls	r2, r1, #1
 800104e:	d211      	bcs.n	8001074 <__aeabi_d2uiz+0x28>
 8001050:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001054:	d211      	bcs.n	800107a <__aeabi_d2uiz+0x2e>
 8001056:	d50d      	bpl.n	8001074 <__aeabi_d2uiz+0x28>
 8001058:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800105c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001060:	d40e      	bmi.n	8001080 <__aeabi_d2uiz+0x34>
 8001062:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800106a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800106e:	fa23 f002 	lsr.w	r0, r3, r2
 8001072:	4770      	bx	lr
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	4770      	bx	lr
 800107a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800107e:	d102      	bne.n	8001086 <__aeabi_d2uiz+0x3a>
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr

0800108c <delay22>:

}


void delay22(uint16_t time)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim16);
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <delay22+0x34>)
 8001098:	f005 fa82 	bl	80065a0 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <delay22+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim16))<time);
 80010a4:	bf00      	nop
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <delay22+0x34>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3f9      	bcc.n	80010a6 <delay22+0x1a>

	HAL_TIM_Base_Stop_IT(&htim16);
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <delay22+0x34>)
 80010b4:	f005 fae4 	bl	8006680 <HAL_TIM_Base_Stop_IT>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000188c 	.word	0x2000188c

080010c4 <Set_Pin_Output>:
	}
}*/


void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f002 fe76 	bl	8003de4 <HAL_GPIO_Init>
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 fe58 	bl	8003de4 <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <startDHT11>:



void startDHT11(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	//Set_Pin_Output(DHT11_PORT, DHT11_PIN);
	Set_Pin_Output(DHT11_2_PORT, DHT11_2_PIN);
 8001140:	2102      	movs	r1, #2
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <startDHT11+0x3c>)
 8001144:	f7ff ffbe 	bl	80010c4 <Set_Pin_Output>
	//HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
	HAL_GPIO_WritePin(DHT11_2_PORT, DHT11_2_PIN, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2102      	movs	r1, #2
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <startDHT11+0x3c>)
 800114e:	f002 fff3 	bl	8004138 <HAL_GPIO_WritePin>
	delay22(18000);
 8001152:	f244 6050 	movw	r0, #18000	; 0x4650
 8001156:	f7ff ff99 	bl	800108c <delay22>
	//HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
	HAL_GPIO_WritePin(DHT11_2_PORT, DHT11_2_PIN, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	2102      	movs	r1, #2
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <startDHT11+0x3c>)
 8001160:	f002 ffea 	bl	8004138 <HAL_GPIO_WritePin>
	delay22(20);
 8001164:	2014      	movs	r0, #20
 8001166:	f7ff ff91 	bl	800108c <delay22>
	//Set_Pin_Input(GPIOA, GPIO_PIN_3);
	Set_Pin_Input(DHT11_2_PORT, DHT11_2_PIN);
 800116a:	2102      	movs	r1, #2
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <startDHT11+0x3c>)
 800116e:	f7ff ffc7 	bl	8001100 <Set_Pin_Input>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	48001800 	.word	0x48001800

0800117c <checkResponse>:

uint8_t checkResponse(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	80bb      	strh	r3, [r7, #4]
	//delayuSecTim16(40);
	delay22(40);
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f7ff ff7e 	bl	800108c <delay22>
	if (!(HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN)))
 8001190:	2102      	movs	r1, #2
 8001192:	4812      	ldr	r0, [pc, #72]	; (80011dc <checkResponse+0x60>)
 8001194:	f002 ffb8 	bl	8004108 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10e      	bne.n	80011bc <checkResponse+0x40>
	{
		//delayuSecTim16(80);
		delay22(80);
 800119e:	2050      	movs	r0, #80	; 0x50
 80011a0:	f7ff ff74 	bl	800108c <delay22>
		if (HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN))
 80011a4:	2102      	movs	r1, #2
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <checkResponse+0x60>)
 80011a8:	f002 ffae 	bl	8004108 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <checkResponse+0x3c>
			Response = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e001      	b.n	80011bc <checkResponse+0x40>
		else Response = -1;
 80011b8:	23ff      	movs	r3, #255	; 0xff
 80011ba:	71fb      	strb	r3, [r7, #7]
	}
	if(Response == 1)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <checkResponse+0x56>
	{
		while(HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN));
 80011c2:	bf00      	nop
 80011c4:	2102      	movs	r1, #2
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <checkResponse+0x60>)
 80011c8:	f002 ff9e 	bl	8004108 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f8      	bne.n	80011c4 <checkResponse+0x48>
	else
	{

	}

	return Response;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	48001800 	.word	0x48001800

080011e0 <readDHT11>:

uint8_t readDHT11(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0; j<8; j++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	e033      	b.n	8001254 <readDHT11+0x74>
	{
		while(!(HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN)));
 80011ec:	bf00      	nop
 80011ee:	2102      	movs	r1, #2
 80011f0:	481c      	ldr	r0, [pc, #112]	; (8001264 <readDHT11+0x84>)
 80011f2:	f002 ff89 	bl	8004108 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f8      	beq.n	80011ee <readDHT11+0xe>
		delay22(40);
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f7ff ff45 	bl	800108c <delay22>
		if(!(HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN)))
 8001202:	2102      	movs	r1, #2
 8001204:	4817      	ldr	r0, [pc, #92]	; (8001264 <readDHT11+0x84>)
 8001206:	f002 ff7f 	bl	8004108 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10c      	bne.n	800122a <readDHT11+0x4a>
		{
			i&=~(1UL<<(7-j));
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	b2da      	uxtb	r2, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4013      	ands	r3, r2
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	e009      	b.n	800123e <readDHT11+0x5e>
			
		}
		else i|=(1UL<<(7-j));
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	f1c3 0307 	rsb	r3, r3, #7
 8001230:	2201      	movs	r2, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4313      	orrs	r3, r2
 800123c:	71fb      	strb	r3, [r7, #7]
		while((HAL_GPIO_ReadPin(DHT11_2_PORT, DHT11_2_PIN)));
 800123e:	bf00      	nop
 8001240:	2102      	movs	r1, #2
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <readDHT11+0x84>)
 8001244:	f002 ff60 	bl	8004108 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f8      	bne.n	8001240 <readDHT11+0x60>
	for(j=0; j<8; j++)
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	3301      	adds	r3, #1
 8001252:	71bb      	strb	r3, [r7, #6]
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b07      	cmp	r3, #7
 8001258:	d9c8      	bls.n	80011ec <readDHT11+0xc>
	}
	return i;
 800125a:	79fb      	ldrb	r3, [r7, #7]
	
	
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48001800 	.word	0x48001800

08001268 <measureDHT11>:

uint8_t measureDHT11(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	uint8_t humidityByte1;
	uint8_t humidityByte2;
	uint8_t tempByte1;
	uint8_t tempByte2;

	startDHT11();
 800126e:	f7ff ff65 	bl	800113c <startDHT11>
	//HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
	//HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
	//delay22(20);
	//HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
	//checkDHT11 = 0;
	if(checkDHT11 != 0)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <measureDHT11+0x4c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <measureDHT11+0x3a>
	{
		//checkResponse();
		responde = checkResponse();
 800127a:	f7ff ff7f 	bl	800117c <checkResponse>
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
		humidityByte1 = readDHT11();
 8001282:	f7ff ffad 	bl	80011e0 <readDHT11>
 8001286:	4603      	mov	r3, r0
 8001288:	717b      	strb	r3, [r7, #5]
		humidityByte2 = readDHT11();
 800128a:	f7ff ffa9 	bl	80011e0 <readDHT11>
 800128e:	4603      	mov	r3, r0
 8001290:	713b      	strb	r3, [r7, #4]
		tempByte1 = readDHT11();
 8001292:	f7ff ffa5 	bl	80011e0 <readDHT11>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
		tempByte2 = readDHT11();
 800129a:	f7ff ffa1 	bl	80011e0 <readDHT11>
 800129e:	4603      	mov	r3, r0
 80012a0:	70fb      	strb	r3, [r7, #3]
	}
	checkDHT11 = 1;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <measureDHT11+0x4c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]


	return tempByte1;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20001000 	.word	0x20001000

080012b8 <soundSpeedCalibration>:

uint16_t soundSpeedCalibration(uint8_t tempByte1)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

	float newSoundSpeed;
	uint8_t tempTempByte1 = tempByte1;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	75fb      	strb	r3, [r7, #23]
	float a = tempByte1 * 0.6;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f943 	bl	8000554 <__aeabi_i2d>
 80012ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001378 <soundSpeedCalibration+0xc0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f9a8 	bl	8000628 <__aeabi_dmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	4618      	mov	r0, r3
 80012de:	4621      	mov	r1, r4
 80012e0:	f7ff fbb4 	bl	8000a4c <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	613b      	str	r3, [r7, #16]

	newSoundSpeed = 331.5 + a;
 80012e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001368 <soundSpeedCalibration+0xb0>
 80012f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f4:	edc7 7a03 	vstr	s15, [r7, #12]

	if((tempByte1 + 5 < tempTemp) || (tempByte1 - 5 > tempTemp))
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3305      	adds	r3, #5
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <soundSpeedCalibration+0xb4>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d41e      	bmi.n	8001352 <soundSpeedCalibration+0x9a>
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	3b05      	subs	r3, #5
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <soundSpeedCalibration+0xb4>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dc10      	bgt.n	8001352 <soundSpeedCalibration+0x9a>
	{

	}
	else
	{
		tempTemp = tempTempByte1;
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <soundSpeedCalibration+0xb4>)
 800133c:	edc3 7a00 	vstr	s15, [r3]
		soundSpeed2 = newSoundSpeed / 1000;
 8001340:	ed97 7a03 	vldr	s14, [r7, #12]
 8001344:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001370 <soundSpeedCalibration+0xb8>
 8001348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <soundSpeedCalibration+0xbc>)
 800134e:	edc3 7a00 	vstr	s15, [r3]
	}



	return newSoundSpeed;
 8001352:	edd7 7a03 	vldr	s15, [r7, #12]
 8001356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
 800135e:	b29b      	uxth	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	43a5c000 	.word	0x43a5c000
 800136c:	20000004 	.word	0x20000004
 8001370:	447a0000 	.word	0x447a0000
 8001374:	20000000 	.word	0x20000000
 8001378:	33333333 	.word	0x33333333
 800137c:	3fe33333 	.word	0x3fe33333

08001380 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000009c 	.word	0x2000009c
 80013b0:	200000f0 	.word	0x200000f0

080013b4 <uDelayTim1>:
volatile static uint32_t pulses_cnt = 0;
const float soundSpeed = 0.0343;
extern float soundSpeed2;

void uDelayTim1(uint64_t uTenSec)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	e9c7 0100 	strd	r0, r1, [r7]
//	uint8_t cnt;
//	HAL_TIM_Base_Start(&htim1);
	HAL_TIM_OnePulse_Start(&htim1, HAL_TIM_ACTIVE_CHANNEL_1);
 80013be:	2101      	movs	r1, #1
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <uDelayTim1+0x1c>)
 80013c2:	f005 fbd9 	bl	8006b78 <HAL_TIM_OnePulse_Start>
//	HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_ALL);
//	 __HAL_TIM_ENABLE(&htim1);    //send pulse
//	while(TIM1->CNT!=0){
//		cnt++;
//	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200016f4 	.word	0x200016f4

080013d4 <uDelayTim7>:

void uDelayTim7(uint64_t uSec)
{
 80013d4:	b490      	push	{r4, r7}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	e9c7 0100 	strd	r0, r1, [r7]
	if(uSec < 2) uSec = 2;
 80013de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	bf08      	it	eq
 80013e6:	2b02      	cmpeq	r3, #2
 80013e8:	d205      	bcs.n	80013f6 <uDelayTim7+0x22>
 80013ea:	f04f 0302 	mov.w	r3, #2
 80013ee:	f04f 0400 	mov.w	r4, #0
 80013f2:	e9c7 3400 	strd	r3, r4, [r7]
	TIM7->ARR = uSec - 1;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <uDelayTim7+0x7c>)
 80013fa:	3b01      	subs	r3, #1
 80013fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM7->EGR = 1;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <uDelayTim7+0x7c>)
 8001400:	2201      	movs	r2, #1
 8001402:	615a      	str	r2, [r3, #20]
	TIM7->SR %= ~1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <uDelayTim7+0x7c>)
 8001406:	6919      	ldr	r1, [r3, #16]
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <uDelayTim7+0x7c>)
 800140a:	f111 0f02 	cmn.w	r1, #2
 800140e:	bf2c      	ite	cs
 8001410:	2201      	movcs	r2, #1
 8001412:	2200      	movcc	r2, #0
 8001414:	4613      	mov	r3, r2
 8001416:	07db      	lsls	r3, r3, #31
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	1aca      	subs	r2, r1, r3
 800141e:	6102      	str	r2, [r0, #16]
	TIM7->CR1 |= 1;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <uDelayTim7+0x7c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <uDelayTim7+0x7c>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]
	while((TIM7->SR&0x0001) != 1);
 800142c:	bf00      	nop
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <uDelayTim7+0x7c>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d1f9      	bne.n	800142e <uDelayTim7+0x5a>
	TIM7->SR &= ~(0x0001);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <uDelayTim7+0x7c>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <uDelayTim7+0x7c>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6113      	str	r3, [r2, #16]
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bc90      	pop	{r4, r7}
 800144e:	4770      	bx	lr
 8001450:	40001400 	.word	0x40001400

08001454 <measureDistance>:
void clear_pulses_cnt(void) {
	pulses_cnt = 0;
}

uint64_t measureDistance(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);
 8001460:	bf00      	nop
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f002 fe4e 	bl	8004108 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f7      	beq.n	8001462 <measureDistance+0xe>
	cntTics = 0;
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <measureDistance+0xb0>)
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	e9c2 3400 	strd	r3, r4, [r2]

	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 8001480:	e00e      	b.n	80014a0 <measureDistance+0x4c>
	{
		cntTics++;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <measureDistance+0xb0>)
 8001484:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001488:	1c4b      	adds	r3, r1, #1
 800148a:	f142 0400 	adc.w	r4, r2, #0
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <measureDistance+0xb0>)
 8001490:	e9c2 3400 	strd	r3, r4, [r2]
		uDelayTim7(2);
 8001494:	f04f 0002 	mov.w	r0, #2
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	f7ff ff9a 	bl	80013d4 <uDelayTim7>
	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f002 fe2f 	bl	8004108 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d0e8      	beq.n	8001482 <measureDistance+0x2e>
	}

	//distance = cntTics * soundSpeed * 1.5;
	distance = cntTics * soundSpeed2 * 1.5;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <measureDistance+0xb0>)
 80014b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f7ff fbdf 	bl	8000c7c <__aeabi_ul2f>
 80014be:	ee07 0a10 	vmov	s14, r0
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <measureDistance+0xb4>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f852 	bl	8000578 <__aeabi_f2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <measureDistance+0xb8>)
 80014da:	f7ff f8a5 	bl	8000628 <__aeabi_dmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f7ff fc27 	bl	8000d38 <__aeabi_d2ulz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <measureDistance+0xbc>)
 80014f0:	e9c2 3400 	strd	r3, r4, [r2]
	return distance;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <measureDistance+0xbc>)
 80014f6:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	4621      	mov	r1, r4
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	20001050 	.word	0x20001050
 8001508:	20000000 	.word	0x20000000
 800150c:	3ff80000 	.word	0x3ff80000
 8001510:	20001018 	.word	0x20001018

08001514 <triggerMeasureCenter>:

uint64_t triggerMeasureCenter(void)
{
 8001514:	b598      	push	{r3, r4, r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2108      	movs	r1, #8
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <triggerMeasureCenter+0x44>)
 800151e:	f002 fe0b 	bl	8004138 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 8001522:	f04f 000a 	mov.w	r0, #10
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	f7ff ff43 	bl	80013b4 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2108      	movs	r1, #8
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <triggerMeasureCenter+0x44>)
 8001534:	f002 fe00 	bl	8004138 <HAL_GPIO_WritePin>

	/*__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_CC1);
	HAL_TIM_Base_Start(&htim7);
	HAL_TIM_Base_Start_IT(&htim7);*/

	distanceCenter = measureDistance(PORT_CENTER, PIN_CENTER_ECHO);
 8001538:	2104      	movs	r1, #4
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <triggerMeasureCenter+0x44>)
 800153c:	f7ff ff8a 	bl	8001454 <measureDistance>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <triggerMeasureCenter+0x48>)
 8001546:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceCenter;
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <triggerMeasureCenter+0x48>)
 800154c:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	bd98      	pop	{r3, r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	48001400 	.word	0x48001400
 800155c:	20001008 	.word	0x20001008

08001560 <triggerMeasureLeft>:

uint64_t triggerMeasureLeft(void)
{
 8001560:	b598      	push	{r3, r4, r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2120      	movs	r1, #32
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <triggerMeasureLeft+0x44>)
 800156a:	f002 fde5 	bl	8004138 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 800156e:	f04f 000a 	mov.w	r0, #10
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	f7ff ff1d 	bl	80013b4 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <triggerMeasureLeft+0x44>)
 8001580:	f002 fdda 	bl	8004138 <HAL_GPIO_WritePin>

	distanceLeft = measureDistance(PORT_LEFT, PIN_LEFT_ECHO);
 8001584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <triggerMeasureLeft+0x44>)
 800158a:	f7ff ff63 	bl	8001454 <measureDistance>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <triggerMeasureLeft+0x48>)
 8001594:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceLeft;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <triggerMeasureLeft+0x48>)
 800159a:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	bd98      	pop	{r3, r4, r7, pc}
 80015a4:	48001400 	.word	0x48001400
 80015a8:	20001020 	.word	0x20001020

080015ac <triggerMeasureRight>:

uint64_t triggerMeasureRight(void)
{
 80015ac:	b598      	push	{r3, r4, r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <triggerMeasureRight+0x44>)
 80015b6:	f002 fdbf 	bl	8004138 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 80015ba:	f04f 000a 	mov.w	r0, #10
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	f7ff fef7 	bl	80013b4 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <triggerMeasureRight+0x44>)
 80015cc:	f002 fdb4 	bl	8004138 <HAL_GPIO_WritePin>

	distanceRight = measureDistance(PORT_RIGHT, PIN_RIGHT_ECHO);
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4806      	ldr	r0, [pc, #24]	; (80015f0 <triggerMeasureRight+0x44>)
 80015d6:	f7ff ff3d 	bl	8001454 <measureDistance>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <triggerMeasureRight+0x48>)
 80015e0:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceRight;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <triggerMeasureRight+0x48>)
 80015e6:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	4621      	mov	r1, r4
 80015ee:	bd98      	pop	{r3, r4, r7, pc}
 80015f0:	48001400 	.word	0x48001400
 80015f4:	20001038 	.word	0x20001038

080015f8 <lcdInit>:

uint8_t dotOrNot;


void lcdInit(struct lcdConf *lcd)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	uint64_t i;
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_RESET);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6858      	ldr	r0, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f002 fd93 	bl	8004138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_SET);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6858      	ldr	r0, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7a1b      	ldrb	r3, [r3, #8]
 800161a:	b29b      	uxth	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	f002 fd8a 	bl	8004138 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->bl_port, lcd->bl_pin, GPIO_PIN_SET);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6958      	ldr	r0, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7e1b      	ldrb	r3, [r3, #24]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f002 fd81 	bl	8004138 <HAL_GPIO_WritePin>

	lcdCmdMode(lcd, 0x21);
 8001636:	2121      	movs	r1, #33	; 0x21
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f835 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x04);
 800163e:	2104      	movs	r1, #4
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f831 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x10 | 0x04);
 8001646:	2114      	movs	r1, #20
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f82d 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x80 | 0x38);
 800164e:	21b8      	movs	r1, #184	; 0xb8
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f829 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x20);
 8001656:	2120      	movs	r1, #32
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f825 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x08 | 0x04);
 800165e:	210c      	movs	r1, #12
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f821 	bl	80016a8 <lcdCmdMode>

	for(i=0; i<348; i++)
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001672:	e00a      	b.n	800168a <lcdInit+0x92>
	{
		lcdCmdMode(lcd, 0x00);
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f816 	bl	80016a8 <lcdCmdMode>
	for(i=0; i<348; i++)
 800167c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001680:	1c59      	adds	r1, r3, #1
 8001682:	f144 0200 	adc.w	r2, r4, #0
 8001686:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800168a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800168e:	f240 115b 	movw	r1, #347	; 0x15b
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	42a2      	cmp	r2, r4
 8001698:	bf08      	it	eq
 800169a:	4299      	cmpeq	r1, r3
 800169c:	d2ea      	bcs.n	8001674 <lcdInit+0x7c>
	}
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <lcdCmdMode>:

void lcdCmdMode(struct lcdConf *lcd, uint8_t cmd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_RESET);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68d8      	ldr	r0, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	4619      	mov	r1, r3
 80016c4:	f002 fd38 	bl	8004138 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69d8      	ldr	r0, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7c1b      	ldrb	r3, [r3, #16]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	f002 fd2f 	bl	8004138 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &cmd, 1, 100);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	1cf9      	adds	r1, r7, #3
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	2201      	movs	r2, #1
 80016e4:	f004 fc39 	bl	8005f5a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69d8      	ldr	r0, [r3, #28]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7c1b      	ldrb	r3, [r3, #16]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f002 fd1f 	bl	8004138 <HAL_GPIO_WritePin>

	if(cmd != 0x00 )
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <lcdCmdMode+0x64>
	{
		dotOrNot++;
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <lcdCmdMode+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <lcdCmdMode+0x6c>)
 800170a:	701a      	strb	r2, [r3, #0]
	}
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000105a 	.word	0x2000105a

08001718 <lcdDataMode>:

void lcdDataMode(struct lcdConf * lcd, uint8_t data)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_SET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68d8      	ldr	r0, [r3, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	b29b      	uxth	r3, r3
 8001730:	2201      	movs	r2, #1
 8001732:	4619      	mov	r1, r3
 8001734:	f002 fd00 	bl	8004138 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69d8      	ldr	r0, [r3, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7c1b      	ldrb	r3, [r3, #16]
 8001740:	b29b      	uxth	r3, r3
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	f002 fcf7 	bl	8004138 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &data, 1, 100);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	1cf9      	adds	r1, r7, #3
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	2201      	movs	r2, #1
 8001754:	f004 fc01 	bl	8005f5a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69d8      	ldr	r0, [r3, #28]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7c1b      	ldrb	r3, [r3, #16]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	f002 fce7 	bl	8004138 <HAL_GPIO_WritePin>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <lcdSetPlace>:

void lcdSetPlace(struct lcdConf *lcd, enum displayDirection direction, uint8_t col, uint8_t row)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	4608      	mov	r0, r1
 800177c:	4611      	mov	r1, r2
 800177e:	461a      	mov	r2, r3
 8001780:	4603      	mov	r3, r0
 8001782:	70fb      	strb	r3, [r7, #3]
 8001784:	460b      	mov	r3, r1
 8001786:	70bb      	strb	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
	if(direction == vertical)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d104      	bne.n	800179c <lcdSetPlace+0x2a>
	{
		lcdCmdMode(lcd, 0x20 | 0x02);
 8001792:	2122      	movs	r1, #34	; 0x22
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff87 	bl	80016a8 <lcdCmdMode>
 800179a:	e003      	b.n	80017a4 <lcdSetPlace+0x32>
	}
	else
	{
		lcdCmdMode(lcd, 0x20 | 0x00);
 800179c:	2120      	movs	r1, #32
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff82 	bl	80016a8 <lcdCmdMode>
	}
	lcdCmdMode(lcd, 0x80 | col);
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff7a 	bl	80016a8 <lcdCmdMode>
	lcdCmdMode(lcd, 0x40 | row);
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff72 	bl	80016a8 <lcdCmdMode>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <lcdWelcome>:

void lcdWelcome(struct lcdConf  lcd)
{
 80017cc:	b084      	sub	sp, #16
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	f107 0c20 	add.w	ip, r7, #32
 80017d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lcdClearBuffer(&lcd);
 80017dc:	f107 0020 	add.w	r0, r7, #32
 80017e0:	f000 f95d 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(&lcd, horizontal, 0, 0);
 80017e4:	2300      	movs	r3, #0
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	f107 0020 	add.w	r0, r7, #32
 80017ee:	f7ff ffc0 	bl	8001772 <lcdSetPlace>

	char layer1[] = "WITAMY";
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <lcdWelcome+0xdc>)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fc:	6018      	str	r0, [r3, #0]
 80017fe:	3304      	adds	r3, #4
 8001800:	8019      	strh	r1, [r3, #0]
 8001802:	3302      	adds	r3, #2
 8001804:	0c0a      	lsrs	r2, r1, #16
 8001806:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[1][3]), layer1, strlen(layer1));
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fcf7 	bl	8000200 <strlen>
 8001812:	4602      	mov	r2, r0
 8001814:	f107 0110 	add.w	r1, r7, #16
 8001818:	f107 0352 	add.w	r3, r7, #82	; 0x52
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fd29 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 8001822:	f107 0020 	add.w	r0, r7, #32
 8001826:	f000 f90b 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "({)";
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <lcdWelcome+0xe0>)
 800182c:	60fb      	str	r3, [r7, #12]

	memcpy(&(lcd.buffer[2][6]), layer2, strlen(layer2));
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	f107 010c 	add.w	r1, r7, #12
 800183e:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8001842:	4618      	mov	r0, r3
 8001844:	f008 fd16 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 8001848:	f107 0020 	add.w	r0, r7, #32
 800184c:	f000 f8f8 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "({)";
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <lcdWelcome+0xe0>)
 8001852:	60bb      	str	r3, [r7, #8]

	memcpy(&(lcd.buffer[3][3]), layer3, strlen(layer3));
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fcd1 	bl	8000200 <strlen>
 800185e:	4602      	mov	r2, r0
 8001860:	f107 0108 	add.w	r1, r7, #8
 8001864:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8001868:	4618      	mov	r0, r3
 800186a:	f008 fd03 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 800186e:	f107 0020 	add.w	r0, r7, #32
 8001872:	f000 f8e5 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "({)";
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <lcdWelcome+0xe0>)
 8001878:	607b      	str	r3, [r7, #4]

	memcpy(&(lcd.buffer[4][6]), layer4, strlen(layer4));
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcbf 	bl	8000200 <strlen>
 8001882:	4602      	mov	r2, r0
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fcf2 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 8001890:	f107 0020 	add.w	r0, r7, #32
 8001894:	f000 f8d4 	bl	8001a40 <lcdReadBuffer>
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018a2:	b004      	add	sp, #16
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	0800b07c 	.word	0x0800b07c
 80018ac:	00297b28 	.word	0x00297b28

080018b0 <lcdClear>:

void lcdClear(struct lcdConf  lcd)
{
 80018b0:	b084      	sub	sp, #16
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b090      	sub	sp, #64	; 0x40
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80018bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lcdClearBuffer(&lcd);
 80018c0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80018c4:	f000 f8eb 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(&lcd, horizontal, 0, 0);
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80018d2:	f7ff ff4e 	bl	8001772 <lcdSetPlace>

	char layer[] = "          ";
 80018d6:	4a41      	ldr	r2, [pc, #260]	; (80019dc <lcdClear+0x12c>)
 80018d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80018de:	c303      	stmia	r3!, {r0, r1}
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	3302      	adds	r3, #2
 80018e4:	0c12      	lsrs	r2, r2, #16
 80018e6:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[0][0]), layer, strlen(layer));
 80018e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018f8:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80018fc:	4618      	mov	r0, r3
 80018fe:	f008 fcb9 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 8001902:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001906:	f000 f89b 	bl	8001a40 <lcdReadBuffer>

	char layer1[] = "          ";
 800190a:	4a34      	ldr	r2, [pc, #208]	; (80019dc <lcdClear+0x12c>)
 800190c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001910:	ca07      	ldmia	r2, {r0, r1, r2}
 8001912:	c303      	stmia	r3!, {r0, r1}
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	3302      	adds	r3, #2
 8001918:	0c12      	lsrs	r2, r2, #16
 800191a:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[1][0]), layer1, strlen(layer1));
 800191c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fc6d 	bl	8000200 <strlen>
 8001926:	4602      	mov	r2, r0
 8001928:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800192c:	f107 0377 	add.w	r3, r7, #119	; 0x77
 8001930:	4618      	mov	r0, r3
 8001932:	f008 fc9f 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 8001936:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800193a:	f000 f881 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "          ";
 800193e:	4a27      	ldr	r2, [pc, #156]	; (80019dc <lcdClear+0x12c>)
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	ca07      	ldmia	r2, {r0, r1, r2}
 8001946:	c303      	stmia	r3!, {r0, r1}
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	3302      	adds	r3, #2
 800194c:	0c12      	lsrs	r2, r2, #16
 800194e:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[2][0]), layer2, strlen(layer2));
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fc53 	bl	8000200 <strlen>
 800195a:	4602      	mov	r2, r0
 800195c:	f107 011c 	add.w	r1, r7, #28
 8001960:	f107 0385 	add.w	r3, r7, #133	; 0x85
 8001964:	4618      	mov	r0, r3
 8001966:	f008 fc85 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 800196a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800196e:	f000 f867 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "          ";
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <lcdClear+0x12c>)
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	ca07      	ldmia	r2, {r0, r1, r2}
 800197a:	c303      	stmia	r3!, {r0, r1}
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	3302      	adds	r3, #2
 8001980:	0c12      	lsrs	r2, r2, #16
 8001982:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[3][0]), layer3, strlen(layer3));
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc39 	bl	8000200 <strlen>
 800198e:	4602      	mov	r2, r0
 8001990:	f107 0110 	add.w	r1, r7, #16
 8001994:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8001998:	4618      	mov	r0, r3
 800199a:	f008 fc6b 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 800199e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80019a2:	f000 f84d 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "         ";
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <lcdClear+0x130>)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ac:	c303      	stmia	r3!, {r0, r1}
 80019ae:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd.buffer[4][0]), layer4, strlen(layer4));
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fc24 	bl	8000200 <strlen>
 80019b8:	4602      	mov	r2, r0
 80019ba:	1d39      	adds	r1, r7, #4
 80019bc:	f107 03a1 	add.w	r3, r7, #161	; 0xa1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f008 fc57 	bl	800a274 <memcpy>
	lcdReadBuffer(&lcd);
 80019c6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80019ca:	f000 f839 	bl	8001a40 <lcdReadBuffer>
}
 80019ce:	bf00      	nop
 80019d0:	3740      	adds	r7, #64	; 0x40
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d8:	b004      	add	sp, #16
 80019da:	4770      	bx	lr
 80019dc:	0800b084 	.word	0x0800b084
 80019e0:	0800b090 	.word	0x0800b090

080019e4 <lcdMarkPrint>:

void lcdMarkPrint(struct lcdConf * lcd, char mark)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 5; i++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e011      	b.n	8001a1a <lcdMarkPrint+0x36>
    {
    	lcdDataMode(lcd, display_font[mark - 0x20][i]);
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f1a3 0220 	sub.w	r2, r3, #32
 80019fc:	7bf9      	ldrb	r1, [r7, #15]
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <lcdMarkPrint+0x54>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	4403      	add	r3, r0
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fe82 	bl	8001718 <lcdDataMode>
    for (uint8_t i = 0; i < 5; i++)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	3301      	adds	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d9ea      	bls.n	80019f6 <lcdMarkPrint+0x12>
    //{
    //	lcdDataMode(lcd, 0x80);
    //}
    //else
    //{
    	lcdDataMode(lcd, 0x00);
 8001a20:	2100      	movs	r1, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fe78 	bl	8001718 <lcdDataMode>
    //}
    dotOrNot = 0;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <lcdMarkPrint+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	0800b2f8 	.word	0x0800b2f8
 8001a3c:	2000105a 	.word	0x2000105a

08001a40 <lcdReadBuffer>:

void lcdReadBuffer(struct lcdConf * lcd)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fe8f 	bl	8001772 <lcdSetPlace>

    for(uint8_t i=0; i<5; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e01a      	b.n	8001a90 <lcdReadBuffer+0x50>
        for(uint8_t j=0; j<14; j++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73bb      	strb	r3, [r7, #14]
 8001a5e:	e011      	b.n	8001a84 <lcdReadBuffer+0x44>
        	lcdMarkPrint(lcd, lcd->buffer[i][j]);
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	7bb9      	ldrb	r1, [r7, #14]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4403      	add	r3, r0
 8001a70:	440b      	add	r3, r1
 8001a72:	3321      	adds	r3, #33	; 0x21
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffb3 	bl	80019e4 <lcdMarkPrint>
        for(uint8_t j=0; j<14; j++)
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73bb      	strb	r3, [r7, #14]
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	2b0d      	cmp	r3, #13
 8001a88:	d9ea      	bls.n	8001a60 <lcdReadBuffer+0x20>
    for(uint8_t i=0; i<5; i++)
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d9e1      	bls.n	8001a5a <lcdReadBuffer+0x1a>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <lcdClearBuffer>:

void lcdClearBuffer(struct lcdConf * lcd)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
    for(uint8_t i=0; i<5; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e017      	b.n	8001adc <lcdClearBuffer+0x3e>
        for(uint8_t j=0; j<14; j++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	73bb      	strb	r3, [r7, #14]
 8001ab0:	e00e      	b.n	8001ad0 <lcdClearBuffer+0x32>
        	lcd->buffer[i][j] = ' ';
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	7bb9      	ldrb	r1, [r7, #14]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3321      	adds	r3, #33	; 0x21
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<14; j++)
 8001aca:	7bbb      	ldrb	r3, [r7, #14]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73bb      	strb	r3, [r7, #14]
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	2b0d      	cmp	r3, #13
 8001ad4:	d9ed      	bls.n	8001ab2 <lcdClearBuffer+0x14>
    for(uint8_t i=0; i<5; i++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d9e4      	bls.n	8001aac <lcdClearBuffer+0xe>
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <display_based>:


// obsluga

void display_based(struct lcdConf * lcd)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffd0 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001afe:	2300      	movs	r3, #0
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fe34 	bl	8001772 <lcdSetPlace>

	char layer1[] = "|       }";
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <display_based+0x84>)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b12:	c303      	stmia	r3!, {r0, r1}
 8001b14:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[1][2]), layer1, strlen(layer1));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 0431 	add.w	r4, r3, #49	; 0x31
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb6d 	bl	8000200 <strlen>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f008 fba0 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff83 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "|_ ___ _}";
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <display_based+0x88>)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b42:	c303      	stmia	r3!, {r0, r1}
 8001b44:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[2][2]), layer2, strlen(layer2));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 043f 	add.w	r4, r3, #63	; 0x3f
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb55 	bl	8000200 <strlen>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f008 fb88 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff6b 	bl	8001a40 <lcdReadBuffer>
}
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800b09c 	.word	0x0800b09c
 8001b78:	0800b0a8 	.word	0x0800b0a8

08001b7c <display_lvl1_based>:

void display_lvl1_based(struct lcdConf * lcd)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08d      	sub	sp, #52	; 0x34
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff8a 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fdee 	bl	8001772 <lcdSetPlace>

	char layer1[] = "||       }}";
 8001b96:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <display_lvl1_based+0xb4>)
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fb27 	bl	8000200 <strlen>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f008 fb5a 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff3d 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "||_ ___ _}}";
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <display_lvl1_based+0xb8>)
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb0f 	bl	8000200 <strlen>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4620      	mov	r0, r4
 8001bec:	f008 fb42 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff25 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "|__ ___ __}";
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <display_lvl1_based+0xbc>)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe faf7 	bl	8000200 <strlen>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f008 fb2a 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff0d 	bl	8001a40 <lcdReadBuffer>

}
 8001c26:	bf00      	nop
 8001c28:	3734      	adds	r7, #52	; 0x34
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800b0b4 	.word	0x0800b0b4
 8001c34:	0800b0c0 	.word	0x0800b0c0
 8001c38:	0800b0cc 	.word	0x0800b0cc

08001c3c <display_lvl2_based>:

void display_lvl2_based(struct lcdConf * lcd)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b093      	sub	sp, #76	; 0x4c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff2a 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fd8e 	bl	8001772 <lcdSetPlace>

	char layer1[] = "|||       }}}";
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <display_lvl2_based+0xe4>)
 8001c58:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c60:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001c68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fac7 	bl	8000200 <strlen>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f008 fafa 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fedd 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}}}";
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <display_lvl2_based+0xe8>)
 8001c88:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c90:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe faaf 	bl	8000200 <strlen>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f008 fae2 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fec5 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "||__ ___ __}}";
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <display_lvl2_based+0xec>)
 8001cb8:	f107 0418 	add.w	r4, r7, #24
 8001cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cbe:	c407      	stmia	r4!, {r0, r1, r2}
 8001cc0:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fa97 	bl	8000200 <strlen>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f008 faca 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fead 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "|___ ___ ___}";
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <display_lvl2_based+0xf0>)
 8001ce8:	f107 0408 	add.w	r4, r7, #8
 8001cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cee:	c407      	stmia	r4!, {r0, r1, r2}
 8001cf0:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fa7f 	bl	8000200 <strlen>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f008 fab2 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe95 	bl	8001a40 <lcdReadBuffer>

}
 8001d16:	bf00      	nop
 8001d18:	374c      	adds	r7, #76	; 0x4c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	0800b0d8 	.word	0x0800b0d8
 8001d24:	0800b0e8 	.word	0x0800b0e8
 8001d28:	0800b0f8 	.word	0x0800b0f8
 8001d2c:	0800b108 	.word	0x0800b108

08001d30 <display_lvl1_srodek>:

void display_lvl1_srodek(struct lcdConf * lcd, uint32_t centerSensor)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08f      	sub	sp, #60	; 0x3c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	lcdClearBuffer(lcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff feaf 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001d40:	2300      	movs	r3, #0
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fd13 	bl	8001772 <lcdSetPlace>
	layer[0]=c;

	memcpy(&(lcd->buffer[0][5]), layer, strlen(layer));
	lcdReadBuffer(lcd);*/

	char layer1[] = "  |       }  ";
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <display_lvl1_srodek+0xb4>)
 8001d4e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d54:	c407      	stmia	r4!, {r0, r1, r2}
 8001d56:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa4c 	bl	8000200 <strlen>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4620      	mov	r0, r4
 8001d72:	f008 fa7f 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fe62 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <display_lvl1_srodek+0xb8>)
 8001d7e:	f107 0418 	add.w	r4, r7, #24
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	c407      	stmia	r4!, {r0, r1, r2}
 8001d86:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fa34 	bl	8000200 <strlen>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4620      	mov	r0, r4
 8001da2:	f008 fa67 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fe4a 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "     ___     ";
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <display_lvl1_srodek+0xbc>)
 8001dae:	f107 0408 	add.w	r4, r7, #8
 8001db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db4:	c407      	stmia	r4!, {r0, r1, r2}
 8001db6:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fa1c 	bl	8000200 <strlen>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f008 fa4f 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe32 	bl	8001a40 <lcdReadBuffer>


}
 8001ddc:	bf00      	nop
 8001dde:	373c      	adds	r7, #60	; 0x3c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	0800b118 	.word	0x0800b118
 8001de8:	0800b128 	.word	0x0800b128
 8001dec:	0800b138 	.word	0x0800b138

08001df0 <display_lvl1_left>:

void display_lvl1_left(struct lcdConf * lcd)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b08f      	sub	sp, #60	; 0x3c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fe50 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fcb4 	bl	8001772 <lcdSetPlace>

	char layer1[] = " ||       }  ";
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <display_lvl1_left+0xb8>)
 8001e0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e12:	c407      	stmia	r4!, {r0, r1, r2}
 8001e14:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9ed 	bl	8000200 <strlen>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f008 fa20 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fe03 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = " ||_ ___ _}  ";
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <display_lvl1_left+0xbc>)
 8001e3c:	f107 0418 	add.w	r4, r7, #24
 8001e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e42:	c407      	stmia	r4!, {r0, r1, r2}
 8001e44:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f9d5 	bl	8000200 <strlen>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f008 fa08 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fdeb 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = " |__          ";
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <display_lvl1_left+0xc0>)
 8001e6c:	f107 0408 	add.w	r4, r7, #8
 8001e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e72:	c407      	stmia	r4!, {r0, r1, r2}
 8001e74:	8023      	strh	r3, [r4, #0]
 8001e76:	3402      	adds	r4, #2
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	7023      	strb	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9ba 	bl	8000200 <strlen>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4619      	mov	r1, r3
 8001e94:	4620      	mov	r0, r4
 8001e96:	f008 f9ed 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fdd0 	bl	8001a40 <lcdReadBuffer>
}
 8001ea0:	bf00      	nop
 8001ea2:	373c      	adds	r7, #60	; 0x3c
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	0800b148 	.word	0x0800b148
 8001eac:	0800b158 	.word	0x0800b158
 8001eb0:	0800b168 	.word	0x0800b168

08001eb4 <display_lvl1_right>:

void display_lvl1_right(struct lcdConf * lcd)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b08d      	sub	sp, #52	; 0x34
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fdee 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fc52 	bl	8001772 <lcdSetPlace>

	char layer1[] = " |       }}";
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <display_lvl1_right+0xb4>)
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe f98b 	bl	8000200 <strlen>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f008 f9be 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fda1 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = " |_ ___ _}}";
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <display_lvl1_right+0xb8>)
 8001f00:	f107 0318 	add.w	r3, r7, #24
 8001f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe f973 	bl	8000200 <strlen>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4620      	mov	r0, r4
 8001f24:	f008 f9a6 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fd89 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "        __}";
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <display_lvl1_right+0xbc>)
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f95b 	bl	8000200 <strlen>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f008 f98e 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fd71 	bl	8001a40 <lcdReadBuffer>
}
 8001f5e:	bf00      	nop
 8001f60:	3734      	adds	r7, #52	; 0x34
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0800b178 	.word	0x0800b178
 8001f6c:	0800b184 	.word	0x0800b184
 8001f70:	0800b190 	.word	0x0800b190

08001f74 <display_lvl2_srodek>:

void display_lvl2_srodek(struct lcdConf * lcd)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b093      	sub	sp, #76	; 0x4c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fd8e 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001f82:	2300      	movs	r3, #0
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fbf2 	bl	8001772 <lcdSetPlace>

	char layer1[] = "  |       }  ";
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <display_lvl2_srodek+0xe4>)
 8001f90:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f96:	c407      	stmia	r4!, {r0, r1, r2}
 8001f98:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe f92b 	bl	8000200 <strlen>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f008 f95e 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fd41 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <display_lvl2_srodek+0xe8>)
 8001fc0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc6:	c407      	stmia	r4!, {r0, r1, r2}
 8001fc8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f913 	bl	8000200 <strlen>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f008 f946 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fd29 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "     ___     ";
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <display_lvl2_srodek+0xec>)
 8001ff0:	f107 0418 	add.w	r4, r7, #24
 8001ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ff8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe f8fb 	bl	8000200 <strlen>
 800200a:	4602      	mov	r2, r0
 800200c:	f107 0318 	add.w	r3, r7, #24
 8002010:	4619      	mov	r1, r3
 8002012:	4620      	mov	r0, r4
 8002014:	f008 f92e 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd11 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "     ___     ";
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <display_lvl2_srodek+0xec>)
 8002020:	f107 0408 	add.w	r4, r7, #8
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	c407      	stmia	r4!, {r0, r1, r2}
 8002028:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f8e3 	bl	8000200 <strlen>
 800203a:	4602      	mov	r2, r0
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	4619      	mov	r1, r3
 8002042:	4620      	mov	r0, r4
 8002044:	f008 f916 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fcf9 	bl	8001a40 <lcdReadBuffer>


}
 800204e:	bf00      	nop
 8002050:	374c      	adds	r7, #76	; 0x4c
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	0800b118 	.word	0x0800b118
 800205c:	0800b128 	.word	0x0800b128
 8002060:	0800b138 	.word	0x0800b138

08002064 <display_lvl2_left>:

void display_lvl2_left(struct lcdConf * lcd)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b093      	sub	sp, #76	; 0x4c
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fd16 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8002072:	2300      	movs	r3, #0
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fb7a 	bl	8001772 <lcdSetPlace>

	char layer1[] = "|||       }  ";
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <display_lvl2_left+0xe4>)
 8002080:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002086:	c407      	stmia	r4!, {r0, r1, r2}
 8002088:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8002090:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f8b3 	bl	8000200 <strlen>
 800209a:	4602      	mov	r2, r0
 800209c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020a0:	4619      	mov	r1, r3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f008 f8e6 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fcc9 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}  ";
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <display_lvl2_left+0xe8>)
 80020b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b6:	c407      	stmia	r4!, {r0, r1, r2}
 80020b8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 80020c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f89b 	bl	8000200 <strlen>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4620      	mov	r0, r4
 80020d4:	f008 f8ce 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fcb1 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "||__         ";
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <display_lvl2_left+0xec>)
 80020e0:	f107 0418 	add.w	r4, r7, #24
 80020e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e6:	c407      	stmia	r4!, {r0, r1, r2}
 80020e8:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f883 	bl	8000200 <strlen>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	4619      	mov	r1, r3
 8002102:	4620      	mov	r0, r4
 8002104:	f008 f8b6 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fc99 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "|___         ";
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <display_lvl2_left+0xf0>)
 8002110:	f107 0408 	add.w	r4, r7, #8
 8002114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002116:	c407      	stmia	r4!, {r0, r1, r2}
 8002118:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f86b 	bl	8000200 <strlen>
 800212a:	4602      	mov	r2, r0
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	4619      	mov	r1, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f008 f89e 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fc81 	bl	8001a40 <lcdReadBuffer>


}
 800213e:	bf00      	nop
 8002140:	374c      	adds	r7, #76	; 0x4c
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	0800b19c 	.word	0x0800b19c
 800214c:	0800b1ac 	.word	0x0800b1ac
 8002150:	0800b1bc 	.word	0x0800b1bc
 8002154:	0800b1cc 	.word	0x0800b1cc

08002158 <display_lvl2_right>:

void display_lvl2_right(struct lcdConf * lcd)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b093      	sub	sp, #76	; 0x4c
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fc9c 	bl	8001a9e <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8002166:	2300      	movs	r3, #0
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fb00 	bl	8001772 <lcdSetPlace>

	char layer1[] = "  |       }}}";
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <display_lvl2_right+0xe4>)
 8002174:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217a:	c407      	stmia	r4!, {r0, r1, r2}
 800217c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8002184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f839 	bl	8000200 <strlen>
 800218e:	4602      	mov	r2, r0
 8002190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002194:	4619      	mov	r1, r3
 8002196:	4620      	mov	r0, r4
 8002198:	f008 f86c 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fc4f 	bl	8001a40 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}}}";
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <display_lvl2_right+0xe8>)
 80021a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021aa:	c407      	stmia	r4!, {r0, r1, r2}
 80021ac:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 80021b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f821 	bl	8000200 <strlen>
 80021be:	4602      	mov	r2, r0
 80021c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4620      	mov	r0, r4
 80021c8:	f008 f854 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fc37 	bl	8001a40 <lcdReadBuffer>

	char layer3[] = "         __}}";
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <display_lvl2_right+0xec>)
 80021d4:	f107 0418 	add.w	r4, r7, #24
 80021d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021da:	c407      	stmia	r4!, {r0, r1, r2}
 80021dc:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 80021e4:	f107 0318 	add.w	r3, r7, #24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f809 	bl	8000200 <strlen>
 80021ee:	4602      	mov	r2, r0
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4620      	mov	r0, r4
 80021f8:	f008 f83c 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fc1f 	bl	8001a40 <lcdReadBuffer>

	char layer4[] = "         ___}";
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <display_lvl2_right+0xf0>)
 8002204:	f107 0408 	add.w	r4, r7, #8
 8002208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220a:	c407      	stmia	r4!, {r0, r1, r2}
 800220c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4618      	mov	r0, r3
 800221a:	f7fd fff1 	bl	8000200 <strlen>
 800221e:	4602      	mov	r2, r0
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	4619      	mov	r1, r3
 8002226:	4620      	mov	r0, r4
 8002228:	f008 f824 	bl	800a274 <memcpy>
	lcdReadBuffer(lcd);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fc07 	bl	8001a40 <lcdReadBuffer>
}
 8002232:	bf00      	nop
 8002234:	374c      	adds	r7, #76	; 0x4c
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop
 800223c:	0800b1dc 	.word	0x0800b1dc
 8002240:	0800b1ec 	.word	0x0800b1ec
 8002244:	0800b1fc 	.word	0x0800b1fc
 8002248:	0800b20c 	.word	0x0800b20c

0800224c <buzzerDriver>:

void buzzerDriver(uint64_t minValue)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	e9c7 0100 	strd	r0, r1, [r7]
	if(minValue > 22 && minValue <31 )
 8002256:	e9d7 3400 	ldrd	r3, r4, [r7]
 800225a:	2c00      	cmp	r4, #0
 800225c:	bf08      	it	eq
 800225e:	2b17      	cmpeq	r3, #23
 8002260:	d318      	bcc.n	8002294 <buzzerDriver+0x48>
 8002262:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002266:	2c00      	cmp	r4, #0
 8002268:	bf08      	it	eq
 800226a:	2b1f      	cmpeq	r3, #31
 800226c:	d212      	bcs.n	8002294 <buzzerDriver+0x48>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800226e:	2100      	movs	r1, #0
 8002270:	482e      	ldr	r0, [pc, #184]	; (800232c <buzzerDriver+0xe0>)
 8002272:	f004 fa95 	bl	80067a0 <HAL_TIM_PWM_Start>
		osDelay(10);
 8002276:	200a      	movs	r0, #10
 8002278:	f006 fe19 	bl	8008eae <osDelay>
		htim3.Instance->CCR1 = 2;
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <buzzerDriver+0xe0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002284:	2100      	movs	r1, #0
 8002286:	4829      	ldr	r0, [pc, #164]	; (800232c <buzzerDriver+0xe0>)
 8002288:	f004 fb90 	bl	80069ac <HAL_TIM_PWM_Stop>
		osDelay(100);
 800228c:	2064      	movs	r0, #100	; 0x64
 800228e:	f006 fe0e 	bl	8008eae <osDelay>
 8002292:	e046      	b.n	8002322 <buzzerDriver+0xd6>
	}
	else if(minValue > 15 && minValue < 23)
 8002294:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002298:	2c00      	cmp	r4, #0
 800229a:	bf08      	it	eq
 800229c:	2b10      	cmpeq	r3, #16
 800229e:	d318      	bcc.n	80022d2 <buzzerDriver+0x86>
 80022a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	bf08      	it	eq
 80022a8:	2b17      	cmpeq	r3, #23
 80022aa:	d212      	bcs.n	80022d2 <buzzerDriver+0x86>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022ac:	2100      	movs	r1, #0
 80022ae:	481f      	ldr	r0, [pc, #124]	; (800232c <buzzerDriver+0xe0>)
 80022b0:	f004 fa76 	bl	80067a0 <HAL_TIM_PWM_Start>
		osDelay(10);
 80022b4:	200a      	movs	r0, #10
 80022b6:	f006 fdfa 	bl	8008eae <osDelay>
		htim3.Instance->CCR1 = 80;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <buzzerDriver+0xe0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2250      	movs	r2, #80	; 0x50
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80022c2:	2100      	movs	r1, #0
 80022c4:	4819      	ldr	r0, [pc, #100]	; (800232c <buzzerDriver+0xe0>)
 80022c6:	f004 fb71 	bl	80069ac <HAL_TIM_PWM_Stop>
		osDelay(60);
 80022ca:	203c      	movs	r0, #60	; 0x3c
 80022cc:	f006 fdef 	bl	8008eae <osDelay>
 80022d0:	e027      	b.n	8002322 <buzzerDriver+0xd6>
	}
	else if(minValue > 0 && minValue < 16)
 80022d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d018      	beq.n	800230c <buzzerDriver+0xc0>
 80022da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022de:	2c00      	cmp	r4, #0
 80022e0:	bf08      	it	eq
 80022e2:	2b10      	cmpeq	r3, #16
 80022e4:	d212      	bcs.n	800230c <buzzerDriver+0xc0>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022e6:	2100      	movs	r1, #0
 80022e8:	4810      	ldr	r0, [pc, #64]	; (800232c <buzzerDriver+0xe0>)
 80022ea:	f004 fa59 	bl	80067a0 <HAL_TIM_PWM_Start>
		osDelay(10);
 80022ee:	200a      	movs	r0, #10
 80022f0:	f006 fddd 	bl	8008eae <osDelay>
		htim3.Instance->CCR1 = 220;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <buzzerDriver+0xe0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	22dc      	movs	r2, #220	; 0xdc
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80022fc:	2100      	movs	r1, #0
 80022fe:	480b      	ldr	r0, [pc, #44]	; (800232c <buzzerDriver+0xe0>)
 8002300:	f004 fb54 	bl	80069ac <HAL_TIM_PWM_Stop>
		osDelay(20);
 8002304:	2014      	movs	r0, #20
 8002306:	f006 fdd2 	bl	8008eae <osDelay>
 800230a:	e00a      	b.n	8002322 <buzzerDriver+0xd6>
	}
	else
	{
		htim3.Instance->CCR1 = 0;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <buzzerDriver+0xe0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002314:	2100      	movs	r1, #0
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <buzzerDriver+0xe0>)
 8002318:	f004 fb48 	bl	80069ac <HAL_TIM_PWM_Stop>
		osDelay(200);
 800231c:	20c8      	movs	r0, #200	; 0xc8
 800231e:	f006 fdc6 	bl	8008eae <osDelay>
	}
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	bf00      	nop
 800232c:	200014e8 	.word	0x200014e8

08002330 <display_driver>:




void display_driver(uint64_t leftSensor, uint64_t centerSensor, uint64_t rightSensor, struct lcdConf lcd)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800233a:	e9c7 2300 	strd	r2, r3, [r7]

	//rightSensor = 100;
	//centerSensor = 100;
	//leftSensor = 100;

	if(leftSensor < 30 && centerSensor < 30 && rightSensor < 30)
 800233e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002342:	2c00      	cmp	r4, #0
 8002344:	bf08      	it	eq
 8002346:	2b1e      	cmpeq	r3, #30
 8002348:	d229      	bcs.n	800239e <display_driver+0x6e>
 800234a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800234e:	2c00      	cmp	r4, #0
 8002350:	bf08      	it	eq
 8002352:	2b1e      	cmpeq	r3, #30
 8002354:	d223      	bcs.n	800239e <display_driver+0x6e>
 8002356:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800235a:	2c00      	cmp	r4, #0
 800235c:	bf08      	it	eq
 800235e:	2b1e      	cmpeq	r3, #30
 8002360:	d21d      	bcs.n	800239e <display_driver+0x6e>
	{
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 8002362:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002366:	2c00      	cmp	r4, #0
 8002368:	bf08      	it	eq
 800236a:	2b0a      	cmpeq	r3, #10
 800236c:	d211      	bcs.n	8002392 <display_driver+0x62>
 800236e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002372:	2c00      	cmp	r4, #0
 8002374:	bf08      	it	eq
 8002376:	2b0a      	cmpeq	r3, #10
 8002378:	d20b      	bcs.n	8002392 <display_driver+0x62>
 800237a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800237e:	2c00      	cmp	r4, #0
 8002380:	bf08      	it	eq
 8002382:	2b0a      	cmpeq	r3, #10
 8002384:	d205      	bcs.n	8002392 <display_driver+0x62>
		{
			display_lvl2_based(&lcd);
 8002386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc56 	bl	8001c3c <display_lvl2_based>
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 8002390:	e0cf      	b.n	8002532 <display_driver+0x202>
		}
		else
		{
			display_lvl1_based(&lcd);
 8002392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fbf0 	bl	8001b7c <display_lvl1_based>
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 800239c:	e0c9      	b.n	8002532 <display_driver+0x202>
		}
	}
	else
	{
			mainSensor = centerSensor;
 800239e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80023a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
			check = 1;
 80023a6:	f04f 0301 	mov.w	r3, #1
 80023aa:	f04f 0400 	mov.w	r4, #0
 80023ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
			if(leftSensor < mainSensor)
 80023b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80023b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023ba:	42a2      	cmp	r2, r4
 80023bc:	bf08      	it	eq
 80023be:	4299      	cmpeq	r1, r3
 80023c0:	d209      	bcs.n	80023d6 <display_driver+0xa6>
			{
				mainSensor = leftSensor;
 80023c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 2;
 80023ca:	f04f 0302 	mov.w	r3, #2
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}

			if(rightSensor < mainSensor)
 80023d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80023da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023de:	42a2      	cmp	r2, r4
 80023e0:	bf08      	it	eq
 80023e2:	4299      	cmpeq	r1, r3
 80023e4:	d209      	bcs.n	80023fa <display_driver+0xca>
			{
				mainSensor = rightSensor;
 80023e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80023ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 3;
 80023ee:	f04f 0303 	mov.w	r3, #3
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}
			if(check == 1)
 80023fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023fe:	2c00      	cmp	r4, #0
 8002400:	bf08      	it	eq
 8002402:	2b01      	cmpeq	r3, #1
 8002404:	d12e      	bne.n	8002464 <display_driver+0x134>
			{
				if(mainSensor > 30 || mainSensor == 0)
 8002406:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800240a:	2c00      	cmp	r4, #0
 800240c:	bf08      	it	eq
 800240e:	2b1f      	cmpeq	r3, #31
 8002410:	d203      	bcs.n	800241a <display_driver+0xea>
 8002412:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002416:	4323      	orrs	r3, r4
 8002418:	d105      	bne.n	8002426 <display_driver+0xf6>
				{
					display_based(&lcd);
 800241a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fb66 	bl	8001af0 <display_based>
 8002424:	e01e      	b.n	8002464 <display_driver+0x134>
				}
				else if(mainSensor < 31 && mainSensor > 15)
 8002426:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800242a:	2c00      	cmp	r4, #0
 800242c:	bf08      	it	eq
 800242e:	2b1f      	cmpeq	r3, #31
 8002430:	d20d      	bcs.n	800244e <display_driver+0x11e>
 8002432:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002436:	2c00      	cmp	r4, #0
 8002438:	bf08      	it	eq
 800243a:	2b10      	cmpeq	r3, #16
 800243c:	d307      	bcc.n	800244e <display_driver+0x11e>
				{
					display_lvl1_srodek(&lcd, centerSensor);
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fc72 	bl	8001d30 <display_lvl1_srodek>
 800244c:	e00a      	b.n	8002464 <display_driver+0x134>
				}
				else if(mainSensor  < 16)
 800244e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002452:	2c00      	cmp	r4, #0
 8002454:	bf08      	it	eq
 8002456:	2b10      	cmpeq	r3, #16
 8002458:	d204      	bcs.n	8002464 <display_driver+0x134>
				{
					display_lvl2_srodek(&lcd);
 800245a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd88 	bl	8001f74 <display_lvl2_srodek>
				}
			}
			if(check == 2)
 8002464:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002468:	2c00      	cmp	r4, #0
 800246a:	bf08      	it	eq
 800246c:	2b02      	cmpeq	r3, #2
 800246e:	d12c      	bne.n	80024ca <display_driver+0x19a>
			{
				if(mainSensor > 30 || mainSensor == 0)
 8002470:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002474:	2c00      	cmp	r4, #0
 8002476:	bf08      	it	eq
 8002478:	2b1f      	cmpeq	r3, #31
 800247a:	d203      	bcs.n	8002484 <display_driver+0x154>
 800247c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002480:	4323      	orrs	r3, r4
 8002482:	d105      	bne.n	8002490 <display_driver+0x160>
				{
					display_based(&lcd);
 8002484:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fb31 	bl	8001af0 <display_based>
 800248e:	e01c      	b.n	80024ca <display_driver+0x19a>
				}
				else if(mainSensor < 31 && mainSensor > 15)
 8002490:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002494:	2c00      	cmp	r4, #0
 8002496:	bf08      	it	eq
 8002498:	2b1f      	cmpeq	r3, #31
 800249a:	d20b      	bcs.n	80024b4 <display_driver+0x184>
 800249c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	bf08      	it	eq
 80024a4:	2b10      	cmpeq	r3, #16
 80024a6:	d305      	bcc.n	80024b4 <display_driver+0x184>
				{
					display_lvl1_left(&lcd);
 80024a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fc9f 	bl	8001df0 <display_lvl1_left>
 80024b2:	e00a      	b.n	80024ca <display_driver+0x19a>
				}
				else if(mainSensor  < 16)
 80024b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024b8:	2c00      	cmp	r4, #0
 80024ba:	bf08      	it	eq
 80024bc:	2b10      	cmpeq	r3, #16
 80024be:	d204      	bcs.n	80024ca <display_driver+0x19a>
				{
					display_lvl2_left(&lcd);
 80024c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fdcd 	bl	8002064 <display_lvl2_left>
				}
			}
			if(check == 3)
 80024ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024ce:	2c00      	cmp	r4, #0
 80024d0:	bf08      	it	eq
 80024d2:	2b03      	cmpeq	r3, #3
 80024d4:	d12d      	bne.n	8002532 <display_driver+0x202>
			{
				if(mainSensor > 30 || mainSensor == 0)
 80024d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024da:	2c00      	cmp	r4, #0
 80024dc:	bf08      	it	eq
 80024de:	2b1f      	cmpeq	r3, #31
 80024e0:	d203      	bcs.n	80024ea <display_driver+0x1ba>
 80024e2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024e6:	4323      	orrs	r3, r4
 80024e8:	d105      	bne.n	80024f6 <display_driver+0x1c6>
				{
					display_based(&lcd);
 80024ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fafe 	bl	8001af0 <display_based>
 80024f4:	e01d      	b.n	8002532 <display_driver+0x202>
				}
				else if(mainSensor < 31 && mainSensor > 15)
 80024f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	bf08      	it	eq
 80024fe:	2b1f      	cmpeq	r3, #31
 8002500:	d20b      	bcs.n	800251a <display_driver+0x1ea>
 8002502:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002506:	2c00      	cmp	r4, #0
 8002508:	bf08      	it	eq
 800250a:	2b10      	cmpeq	r3, #16
 800250c:	d305      	bcc.n	800251a <display_driver+0x1ea>
				{
					display_lvl1_right(&lcd);
 800250e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fcce 	bl	8001eb4 <display_lvl1_right>
 8002518:	e00b      	b.n	8002532 <display_driver+0x202>
				}
				else if(mainSensor  < 16)
 800251a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800251e:	2c00      	cmp	r4, #0
 8002520:	bf08      	it	eq
 8002522:	2b10      	cmpeq	r3, #16
 8002524:	d205      	bcs.n	8002532 <display_driver+0x202>
				{
					display_lvl2_right(&lcd);
 8002526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe14 	bl	8002158 <display_lvl2_right>
				}
			}

	}

}
 8002530:	e7ff      	b.n	8002532 <display_driver+0x202>
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
	...

0800253c <send_char_ready>:
{
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)c, strlen(c), 1000);
}

void send_char_ready(char c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)&c, 1, 1000);
 8002546:	1df9      	adds	r1, r7, #7
 8002548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254c:	2201      	movs	r2, #1
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <send_char_ready+0x20>)
 8002550:	f005 fbc0 	bl	8007cd4 <HAL_UART_Transmit>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20001534 	.word	0x20001534

08002560 <__io_putchar>:

int __io_putchar(int ch)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d102      	bne.n	8002574 <__io_putchar+0x14>
		send_char_ready('\r');
 800256e:	200d      	movs	r0, #13
 8002570:	f7ff ffe4 	bl	800253c <send_char_ready>
	send_char_ready(ch);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ffdf 	bl	800253c <send_char_ready>
	return ch;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b09c      	sub	sp, #112	; 0x70
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800258e:	f001 faec 	bl	8003b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002592:	f000 f89b 	bl	80026cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002596:	f000 fc07 	bl	8002da8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800259a:	f000 f923 	bl	80027e4 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800259e:	f000 fbd9 	bl	8002d54 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80025a2:	f000 fa8f 	bl	8002ac4 <MX_TIM1_Init>
  MX_TIM7_Init();
 80025a6:	f000 fb79 	bl	8002c9c <MX_TIM7_Init>
  MX_SPI1_Init();
 80025aa:	f000 fa4d 	bl	8002a48 <MX_SPI1_Init>
  MX_TIM3_Init();
 80025ae:	f000 fafd 	bl	8002bac <MX_TIM3_Init>
  MX_TIM16_Init();
 80025b2:	f000 fba9 	bl	8002d08 <MX_TIM16_Init>
  MX_TIM2_Init();
 80025b6:	f000 faab 	bl	8002b10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 f9f9 	bl	80029b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 f9ab 	bl	8002918 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80025c2:	f000 f95d 	bl	8002880 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  lcd.spi = &hspi1;
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <main+0x118>)
 80025c8:	4a36      	ldr	r2, [pc, #216]	; (80026a4 <main+0x11c>)
 80025ca:	601a      	str	r2, [r3, #0]
  lcd.rst_port = RST_GPIO_Port;
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <main+0x118>)
 80025ce:	4a36      	ldr	r2, [pc, #216]	; (80026a8 <main+0x120>)
 80025d0:	605a      	str	r2, [r3, #4]
  lcd.rst_pin = RESET_Pin;
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <main+0x118>)
 80025d4:	2220      	movs	r2, #32
 80025d6:	721a      	strb	r2, [r3, #8]
  lcd.dc_port = DC_GPIO_Port;
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <main+0x118>)
 80025da:	4a33      	ldr	r2, [pc, #204]	; (80026a8 <main+0x120>)
 80025dc:	60da      	str	r2, [r3, #12]
  lcd.dc_pin = DCC_Pin;
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <main+0x118>)
 80025e0:	2210      	movs	r2, #16
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]
  lcd.bl_port = BL_GPIO_Port;
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <main+0x118>)
 80025e8:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <main+0x120>)
 80025ea:	615a      	str	r2, [r3, #20]
  lcd.bl_pin = BLL_Pin;
 80025ec:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <main+0x118>)
 80025ee:	2208      	movs	r2, #8
 80025f0:	761a      	strb	r2, [r3, #24]
  lcd.ce_port = CE_GPIO_Port;
 80025f2:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <main+0x118>)
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <main+0x120>)
 80025f6:	61da      	str	r2, [r3, #28]
  lcd.ce_pin = CEE_Pin;
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <main+0x118>)
 80025fa:	2204      	movs	r2, #4
 80025fc:	741a      	strb	r2, [r3, #16]

  lcdInit(&lcd);
 80025fe:	4828      	ldr	r0, [pc, #160]	; (80026a0 <main+0x118>)
 8002600:	f7fe fffa 	bl	80015f8 <lcdInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HC_SR04 */
  osThreadDef(HC_SR04, hc_sr04_measure, osPriorityNormal, 0, 128);
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <main+0x124>)
 8002606:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HC_SR04Handle = osThreadCreate(osThread(HC_SR04), NULL);
 8002618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f006 fbf9 	bl	8008e16 <osThreadCreate>
 8002624:	4602      	mov	r2, r0
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <main+0x128>)
 8002628:	601a      	str	r2, [r3, #0]

  /* definition and creation of LCD_buzzer */
  osThreadDef(LCD_buzzer, display_pii, osPriorityIdle, 0, 128);
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <main+0x12c>)
 800262c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002630:	461d      	mov	r5, r3
 8002632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800263a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_buzzerHandle = osThreadCreate(osThread(LCD_buzzer), NULL);
 800263e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f006 fbe6 	bl	8008e16 <osThreadCreate>
 800264a:	4602      	mov	r2, r0
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <main+0x130>)
 800264e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Buzzer */
  osThreadDef(Buzzer, buzzer_work, osPriorityIdle, 0, 128);
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <main+0x134>)
 8002652:	f107 041c 	add.w	r4, r7, #28
 8002656:	461d      	mov	r5, r3
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BuzzerHandle = osThreadCreate(osThread(Buzzer), NULL);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f006 fbd3 	bl	8008e16 <osThreadCreate>
 8002670:	4602      	mov	r2, r0
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <main+0x138>)
 8002674:	601a      	str	r2, [r3, #0]

  /* definition and creation of DHT11 */
  osThreadDef(DHT11, dht11_measure, osPriorityHigh, 0, 128);
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <main+0x13c>)
 8002678:	463c      	mov	r4, r7
 800267a:	461d      	mov	r5, r3
 800267c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHT11Handle = osThreadCreate(osThread(DHT11), NULL);
 8002688:	463b      	mov	r3, r7
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f006 fbc2 	bl	8008e16 <osThreadCreate>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <main+0x140>)
 8002696:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002698:	f006 fbb6 	bl	8008e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800269c:	e7fe      	b.n	800269c <main+0x114>
 800269e:	bf00      	nop
 80026a0:	2000106c 	.word	0x2000106c
 80026a4:	20001748 	.word	0x20001748
 80026a8:	48001000 	.word	0x48001000
 80026ac:	0800b224 	.word	0x0800b224
 80026b0:	20001068 	.word	0x20001068
 80026b4:	0800b24c 	.word	0x0800b24c
 80026b8:	20001928 	.word	0x20001928
 80026bc:	0800b270 	.word	0x0800b270
 80026c0:	20001884 	.word	0x20001884
 80026c4:	0800b294 	.word	0x0800b294
 80026c8:	2000164c 	.word	0x2000164c

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0bc      	sub	sp, #240	; 0xf0
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026d6:	2244      	movs	r2, #68	; 0x44
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f007 fdd5 	bl	800a28a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2294      	movs	r2, #148	; 0x94
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f007 fdc7 	bl	800a28a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80026fc:	2000      	movs	r0, #0
 80026fe:	f001 feb5 	bl	800446c <HAL_PWREx_ControlVoltageScaling>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002708:	f000 fe08 	bl	800331c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800270c:	2301      	movs	r3, #1
 800270e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002712:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271a:	2302      	movs	r3, #2
 800271c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 800272c:	231e      	movs	r3, #30
 800272e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002748:	4618      	mov	r0, r3
 800274a:	f001 ff53 	bl	80045f4 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002754:	f000 fde2 	bl	800331c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275e:	2303      	movs	r3, #3
 8002760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800276a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002778:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800277c:	2105      	movs	r1, #5
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fb5e 	bl	8004e40 <HAL_RCC_ClockConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800278a:	f000 fdc7 	bl	800331c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800278e:	f242 0333 	movw	r3, #8243	; 0x2033
 8002792:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002794:	2300      	movs	r3, #0
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002798:	2300      	movs	r3, #0
 800279a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800279c:	2300      	movs	r3, #0
 800279e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80027a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027a8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80027aa:	2303      	movs	r3, #3
 80027ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80027b2:	230c      	movs	r3, #12
 80027b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80027b6:	2302      	movs	r3, #2
 80027b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027be:	2302      	movs	r3, #2
 80027c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027c6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fe1a 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80027d6:	f000 fda1 	bl	800331c <Error_Handler>
  }
}
 80027da:	bf00      	nop
 80027dc:	37f0      	adds	r7, #240	; 0xf0
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	; (8002878 <MX_LPUART1_UART_Init+0x94>)
 80027ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 800281c:	2200      	movs	r2, #0
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800282c:	4811      	ldr	r0, [pc, #68]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 800282e:	f005 fa01 	bl	8007c34 <HAL_UART_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002838:	f000 fd70 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002840:	f005 ff55 	bl	80086ee <HAL_UARTEx_SetTxFifoThreshold>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800284a:	f000 fd67 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284e:	2100      	movs	r1, #0
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <MX_LPUART1_UART_Init+0x90>)
 8002852:	f005 ff8a 	bl	800876a <HAL_UARTEx_SetRxFifoThreshold>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800285c:	f000 fd5e 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002860:	4806      	ldr	r0, [pc, #24]	; (800287c <MX_LPUART1_UART_Init+0x98>)
 8002862:	f005 ff0b 	bl	800867c <HAL_UARTEx_DisableFifoMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800286c:	f000 fd56 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001534 	.word	0x20001534
 8002878:	40008000 	.word	0x40008000
 800287c:	20001650 	.word	0x20001650

08002880 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <MX_UART5_Init+0x90>)
 8002886:	4a23      	ldr	r2, [pc, #140]	; (8002914 <MX_UART5_Init+0x94>)
 8002888:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <MX_UART5_Init+0x90>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <MX_UART5_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_UART5_Init+0x90>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_UART5_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_UART5_Init+0x90>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <MX_UART5_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_UART5_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_UART5_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_UART5_Init+0x90>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_UART5_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028c8:	4811      	ldr	r0, [pc, #68]	; (8002910 <MX_UART5_Init+0x90>)
 80028ca:	f005 f9b3 	bl	8007c34 <HAL_UART_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80028d4:	f000 fd22 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d8:	2100      	movs	r1, #0
 80028da:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_UART5_Init+0x90>)
 80028dc:	f005 ff07 	bl	80086ee <HAL_UARTEx_SetTxFifoThreshold>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80028e6:	f000 fd19 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ea:	2100      	movs	r1, #0
 80028ec:	4808      	ldr	r0, [pc, #32]	; (8002910 <MX_UART5_Init+0x90>)
 80028ee:	f005 ff3c 	bl	800876a <HAL_UARTEx_SetRxFifoThreshold>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80028f8:	f000 fd10 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_UART5_Init+0x90>)
 80028fe:	f005 febd 	bl	800867c <HAL_UARTEx_DisableFifoMode>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002908:	f000 fd08 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200015c0 	.word	0x200015c0
 8002914:	40005000 	.word	0x40005000

08002918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002960:	4811      	ldr	r0, [pc, #68]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002962:	f005 f967 	bl	8007c34 <HAL_UART_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800296c:	f000 fcd6 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002970:	2100      	movs	r1, #0
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002974:	f005 febb 	bl	80086ee <HAL_UARTEx_SetTxFifoThreshold>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800297e:	f000 fccd 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002982:	2100      	movs	r1, #0
 8002984:	4808      	ldr	r0, [pc, #32]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002986:	f005 fef0 	bl	800876a <HAL_UARTEx_SetRxFifoThreshold>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002990:	f000 fcc4 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <MX_USART1_UART_Init+0x90>)
 8002996:	f005 fe71 	bl	800867c <HAL_UARTEx_DisableFifoMode>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029a0:	f000 fcbc 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20001650 	.word	0x20001650
 80029ac:	40013800 	.word	0x40013800

080029b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029d6:	220c      	movs	r2, #12
 80029d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f8:	4811      	ldr	r0, [pc, #68]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 80029fa:	f005 f91b 	bl	8007c34 <HAL_UART_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a04:	f000 fc8a 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 8002a0c:	f005 fe6f 	bl	80086ee <HAL_UARTEx_SetTxFifoThreshold>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a16:	f000 fc81 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4808      	ldr	r0, [pc, #32]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 8002a1e:	f005 fea4 	bl	800876a <HAL_UARTEx_SetRxFifoThreshold>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a28:	f000 fc78 	bl	800331c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a2c:	4804      	ldr	r0, [pc, #16]	; (8002a40 <MX_USART2_UART_Init+0x90>)
 8002a2e:	f005 fe25 	bl	800867c <HAL_UARTEx_DisableFifoMode>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f000 fc70 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200017f8 	.word	0x200017f8
 8002a44:	40004400 	.word	0x40004400

08002a48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <MX_SPI1_Init+0x78>)
 8002a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a7e:	2220      	movs	r2, #32
 8002a80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a96:	2207      	movs	r2, #7
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_SPI1_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_SPI1_Init+0x74>)
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_SPI1_Init+0x74>)
 8002aa8:	f003 f9b4 	bl	8005e14 <HAL_SPI_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ab2:	f000 fc33 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20001748 	.word	0x20001748
 8002ac0:	40013000 	.word	0x40013000

08002ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 0 */

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <MX_TIM1_Init+0x48>)
 8002acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002ad0:	2227      	movs	r2, #39	; 0x27
 8002ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 29;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002adc:	221d      	movs	r2, #29
 8002ade:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8002af2:	2108      	movs	r1, #8
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_TIM1_Init+0x44>)
 8002af6:	f003 ffef 	bl	8006ad8 <HAL_TIM_OnePulse_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8002b00:	f000 fc0c 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200016f4 	.word	0x200016f4
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120-1;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b38:	2277      	movs	r2, #119	; 0x77
 8002b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b56:	4814      	ldr	r0, [pc, #80]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b58:	f003 fcca 	bl	80064f0 <HAL_TIM_Base_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b62:	f000 fbdb 	bl	800331c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4619      	mov	r1, r3
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b74:	f004 faa6 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b7e:	f000 fbcd 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b90:	f004 ffaa 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b9a:	f000 fbbf 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200017ac 	.word	0x200017ac

08002bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bcc:	463b      	mov	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	615a      	str	r2, [r3, #20]
 8002bdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002be0:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <MX_TIM3_Init+0xec>)
 8002be2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1845;
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002be6:	f240 7235 	movw	r2, #1845	; 0x735
 8002bea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002bf4:	22fe      	movs	r2, #254	; 0xfe
 8002bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c04:	4823      	ldr	r0, [pc, #140]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c06:	f003 fc73 	bl	80064f0 <HAL_TIM_Base_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c10:	f000 fb84 	bl	800331c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	481c      	ldr	r0, [pc, #112]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c22:	f004 fa4f 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002c2c:	f000 fb76 	bl	800331c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c30:	4818      	ldr	r0, [pc, #96]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c32:	f003 fd54 	bl	80066de <HAL_TIM_PWM_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002c3c:	f000 fb6e 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4811      	ldr	r0, [pc, #68]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c50:	f004 ff4a 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002c5a:	f000 fb5f 	bl	800331c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5e:	2360      	movs	r3, #96	; 0x60
 8002c60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	4619      	mov	r1, r3
 8002c74:	4807      	ldr	r0, [pc, #28]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c76:	f004 f915 	bl	8006ea4 <HAL_TIM_PWM_ConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002c80:	f000 fb4c 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <MX_TIM3_Init+0xe8>)
 8002c86:	f000 fd45 	bl	8003714 <HAL_TIM_MspPostInit>

}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200014e8 	.word	0x200014e8
 8002c98:	40000400 	.word	0x40000400

08002c9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <MX_TIM7_Init+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 120-1;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002cb4:	2277      	movs	r2, #119	; 0x77
 8002cb6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cca:	480d      	ldr	r0, [pc, #52]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002ccc:	f003 fc10 	bl	80064f0 <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002cd6:	f000 fb21 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4806      	ldr	r0, [pc, #24]	; (8002d00 <MX_TIM7_Init+0x64>)
 8002ce8:	f004 fefe 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002cf2:	f000 fb13 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200018d8 	.word	0x200018d8
 8002d04:	40001400 	.word	0x40001400

08002d08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <MX_TIM16_Init+0x48>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120-1;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d14:	2277      	movs	r2, #119	; 0x77
 8002d16:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0xffff-1;
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d24:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d38:	4804      	ldr	r0, [pc, #16]	; (8002d4c <MX_TIM16_Init+0x44>)
 8002d3a:	f003 fbd9 	bl	80064f0 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002d44:	f000 faea 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000188c 	.word	0x2000188c
 8002d50:	40014400 	.word	0x40014400

08002d54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d62:	2206      	movs	r2, #6
 8002d64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d68:	2202      	movs	r2, #2
 8002d6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002d92:	f001 fa03 	bl	800419c <HAL_PCD_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8002d9c:	f000 fabe 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200010d8 	.word	0x200010d8

08002da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08e      	sub	sp, #56	; 0x38
 8002dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dbe:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	4a7f      	ldr	r2, [pc, #508]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002dc4:	f043 0310 	orr.w	r3, r3, #16
 8002dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4a79      	ldr	r2, [pc, #484]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de2:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dee:	4b74      	ldr	r3, [pc, #464]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4a73      	ldr	r2, [pc, #460]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002df4:	f043 0320 	orr.w	r3, r3, #32
 8002df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfa:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e06:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a6d      	ldr	r2, [pc, #436]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e36:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	4a5b      	ldr	r2, [pc, #364]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e5a:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e72:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <MX_GPIO_Init+0x218>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002e7e:	f001 fba9 	bl	80045d4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_Pin|BL_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8002e82:	2200      	movs	r2, #0
 8002e84:	213c      	movs	r1, #60	; 0x3c
 8002e86:	484f      	ldr	r0, [pc, #316]	; (8002fc4 <MX_GPIO_Init+0x21c>)
 8002e88:	f001 f956 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIG1_Pin|TRIG2_Pin|TRIG3_Pin, GPIO_PIN_RESET);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	21a8      	movs	r1, #168	; 0xa8
 8002e90:	484d      	ldr	r0, [pc, #308]	; (8002fc8 <MX_GPIO_Init+0x220>)
 8002e92:	f001 f951 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2108      	movs	r1, #8
 8002e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9e:	f001 f94b 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002ea8:	4848      	ldr	r0, [pc, #288]	; (8002fcc <MX_GPIO_Init+0x224>)
 8002eaa:	f001 f945 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	4847      	ldr	r0, [pc, #284]	; (8002fd0 <MX_GPIO_Init+0x228>)
 8002eb4:	f001 f940 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin BL_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CE_Pin|BL_Pin|DC_Pin|RST_Pin;
 8002eb8:	233c      	movs	r3, #60	; 0x3c
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	483d      	ldr	r0, [pc, #244]	; (8002fc4 <MX_GPIO_Init+0x21c>)
 8002ed0:	f000 ff88 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <MX_GPIO_Init+0x22c>)
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	483b      	ldr	r0, [pc, #236]	; (8002fd8 <MX_GPIO_Init+0x230>)
 8002eea:	f000 ff7b 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO1_Pin ECHO2_Pin ECHO3_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO2_Pin|ECHO3_Pin;
 8002eee:	f44f 7341 	mov.w	r3, #772	; 0x304
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <MX_GPIO_Init+0x22c>)
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	4831      	ldr	r0, [pc, #196]	; (8002fc8 <MX_GPIO_Init+0x220>)
 8002f04:	f000 ff6e 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG1_Pin TRIG2_Pin TRIG3_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin|TRIG2_Pin|TRIG3_Pin;
 8002f08:	23a8      	movs	r3, #168	; 0xa8
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	482a      	ldr	r0, [pc, #168]	; (8002fc8 <MX_GPIO_Init+0x220>)
 8002f20:	f000 ff60 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002f24:	2308      	movs	r3, #8
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3e:	f000 ff51 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_OverCurrent_Pin;
 8002f42:	2342      	movs	r3, #66	; 0x42
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	481e      	ldr	r0, [pc, #120]	; (8002fd0 <MX_GPIO_Init+0x228>)
 8002f56:	f000 ff45 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002f5a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	4619      	mov	r1, r3
 8002f72:	4816      	ldr	r0, [pc, #88]	; (8002fcc <MX_GPIO_Init+0x224>)
 8002f74:	f000 ff36 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	4811      	ldr	r0, [pc, #68]	; (8002fdc <MX_GPIO_Init+0x234>)
 8002f96:	f000 ff25 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <MX_GPIO_Init+0x228>)
 8002fb2:	f000 ff17 	bl	8003de4 <HAL_GPIO_Init>

}
 8002fb6:	bf00      	nop
 8002fb8:	3738      	adds	r7, #56	; 0x38
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	48001000 	.word	0x48001000
 8002fc8:	48001400 	.word	0x48001400
 8002fcc:	48000400 	.word	0x48000400
 8002fd0:	48001800 	.word	0x48001800
 8002fd4:	10110000 	.word	0x10110000
 8002fd8:	48000800 	.word	0x48000800
 8002fdc:	48000c00 	.word	0x48000c00

08002fe0 <hc_sr04_measure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hc_sr04_measure */
void hc_sr04_measure(void const * argument)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	choseSensor = 1;
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <hc_sr04_measure+0x118>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	4842      	ldr	r0, [pc, #264]	; (80030fc <hc_sr04_measure+0x11c>)
 8002ff2:	f001 f8b9 	bl	8004168 <HAL_GPIO_TogglePin>
	triggerMeasureCenter();
 8002ff6:	f7fe fa8d 	bl	8001514 <triggerMeasureCenter>
	switch(choseSensor)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <hc_sr04_measure+0x118>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d028      	beq.n	8003054 <hc_sr04_measure+0x74>
 8003002:	2b03      	cmp	r3, #3
 8003004:	d04b      	beq.n	800309e <hc_sr04_measure+0xbe>
 8003006:	2b01      	cmp	r3, #1
 8003008:	d16e      	bne.n	80030e8 <hc_sr04_measure+0x108>
	{
	case 1:
		tmp_mesCenter = triggerMeasureCenter();
 800300a:	f7fe fa83 	bl	8001514 <triggerMeasureCenter>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <hc_sr04_measure+0x120>)
 8003014:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesCenter != 0) && (mesCenter > tmp_mesCenter)) || (mesCenter == 0))
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <hc_sr04_measure+0x124>)
 800301a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800301e:	4323      	orrs	r3, r4
 8003020:	d009      	beq.n	8003036 <hc_sr04_measure+0x56>
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <hc_sr04_measure+0x124>)
 8003024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003028:	4a35      	ldr	r2, [pc, #212]	; (8003100 <hc_sr04_measure+0x120>)
 800302a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800302e:	42a2      	cmp	r2, r4
 8003030:	bf08      	it	eq
 8003032:	4299      	cmpeq	r1, r3
 8003034:	d304      	bcc.n	8003040 <hc_sr04_measure+0x60>
 8003036:	4b33      	ldr	r3, [pc, #204]	; (8003104 <hc_sr04_measure+0x124>)
 8003038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800303c:	4323      	orrs	r3, r4
 800303e:	d105      	bne.n	800304c <hc_sr04_measure+0x6c>
		{
			mesCenter = tmp_mesCenter;
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <hc_sr04_measure+0x120>)
 8003042:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003046:	4a2f      	ldr	r2, [pc, #188]	; (8003104 <hc_sr04_measure+0x124>)
 8003048:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 2;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <hc_sr04_measure+0x118>)
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
		break;
 8003052:	e04d      	b.n	80030f0 <hc_sr04_measure+0x110>
	case 2:
		tmp_mesLeft = triggerMeasureLeft();
 8003054:	f7fe fa84 	bl	8001560 <triggerMeasureLeft>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <hc_sr04_measure+0x128>)
 800305e:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesLeft != 0) && (mesLeft > tmp_mesLeft)) || (mesLeft == 0))
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <hc_sr04_measure+0x12c>)
 8003064:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003068:	4323      	orrs	r3, r4
 800306a:	d009      	beq.n	8003080 <hc_sr04_measure+0xa0>
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <hc_sr04_measure+0x12c>)
 800306e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003072:	4a25      	ldr	r2, [pc, #148]	; (8003108 <hc_sr04_measure+0x128>)
 8003074:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003078:	42a2      	cmp	r2, r4
 800307a:	bf08      	it	eq
 800307c:	4299      	cmpeq	r1, r3
 800307e:	d304      	bcc.n	800308a <hc_sr04_measure+0xaa>
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <hc_sr04_measure+0x12c>)
 8003082:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003086:	4323      	orrs	r3, r4
 8003088:	d105      	bne.n	8003096 <hc_sr04_measure+0xb6>
		{
			mesLeft = tmp_mesLeft;
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <hc_sr04_measure+0x128>)
 800308c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003090:	4a1e      	ldr	r2, [pc, #120]	; (800310c <hc_sr04_measure+0x12c>)
 8003092:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 3;
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <hc_sr04_measure+0x118>)
 8003098:	2203      	movs	r2, #3
 800309a:	701a      	strb	r2, [r3, #0]
		break;
 800309c:	e028      	b.n	80030f0 <hc_sr04_measure+0x110>
	case 3:
		tmp_mesRight = triggerMeasureRight();
 800309e:	f7fe fa85 	bl	80015ac <triggerMeasureRight>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <hc_sr04_measure+0x130>)
 80030a8:	e9c2 3400 	strd	r3, r4, [r2]
		if(((mesRight != 0) && (mesRight > tmp_mesRight)) || (mesRight == 0))
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <hc_sr04_measure+0x134>)
 80030ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030b2:	4323      	orrs	r3, r4
 80030b4:	d009      	beq.n	80030ca <hc_sr04_measure+0xea>
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <hc_sr04_measure+0x134>)
 80030b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <hc_sr04_measure+0x130>)
 80030be:	e9d2 1200 	ldrd	r1, r2, [r2]
 80030c2:	42a2      	cmp	r2, r4
 80030c4:	bf08      	it	eq
 80030c6:	4299      	cmpeq	r1, r3
 80030c8:	d304      	bcc.n	80030d4 <hc_sr04_measure+0xf4>
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <hc_sr04_measure+0x134>)
 80030cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030d0:	4323      	orrs	r3, r4
 80030d2:	d105      	bne.n	80030e0 <hc_sr04_measure+0x100>
		{
			mesRight = tmp_mesRight;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <hc_sr04_measure+0x130>)
 80030d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <hc_sr04_measure+0x134>)
 80030dc:	e9c2 3400 	strd	r3, r4, [r2]
		}
		choseSensor = 1;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <hc_sr04_measure+0x118>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
		break;
 80030e6:	e003      	b.n	80030f0 <hc_sr04_measure+0x110>
	default:
		choseSensor = 1;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <hc_sr04_measure+0x118>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
		break;
 80030ee:	bf00      	nop
	}

    osDelay(20);
 80030f0:	2014      	movs	r0, #20
 80030f2:	f005 fedc 	bl	8008eae <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80030f6:	e77a      	b.n	8002fee <hc_sr04_measure+0xe>
 80030f8:	200010d5 	.word	0x200010d5
 80030fc:	48000400 	.word	0x48000400
 8003100:	200016e8 	.word	0x200016e8
 8003104:	200014e0 	.word	0x200014e0
 8003108:	200016e0 	.word	0x200016e0
 800310c:	20001740 	.word	0x20001740
 8003110:	20001930 	.word	0x20001930
 8003114:	20001060 	.word	0x20001060

08003118 <display_pii>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_pii */
void display_pii(void const * argument)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b09e      	sub	sp, #120	; 0x78
 800311e:	af1c      	add	r7, sp, #112	; 0x70
 8003120:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	if(begin == 0)
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <display_pii+0xc4>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d121      	bne.n	800316e <display_pii+0x56>
	{
		lcdWelcome(lcd);
 800312a:	4c2d      	ldr	r4, [pc, #180]	; (80031e0 <display_pii+0xc8>)
 800312c:	4668      	mov	r0, sp
 800312e:	f104 0310 	add.w	r3, r4, #16
 8003132:	2258      	movs	r2, #88	; 0x58
 8003134:	4619      	mov	r1, r3
 8003136:	f007 f89d 	bl	800a274 <memcpy>
 800313a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800313e:	f7fe fb45 	bl	80017cc <lcdWelcome>
		begin = 1;
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <display_pii+0xc4>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
		osDelay(4000);
 8003148:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800314c:	f005 feaf 	bl	8008eae <osDelay>
		lcdClear(lcd);
 8003150:	4c23      	ldr	r4, [pc, #140]	; (80031e0 <display_pii+0xc8>)
 8003152:	4668      	mov	r0, sp
 8003154:	f104 0310 	add.w	r3, r4, #16
 8003158:	2258      	movs	r2, #88	; 0x58
 800315a:	4619      	mov	r1, r3
 800315c:	f007 f88a 	bl	800a274 <memcpy>
 8003160:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003164:	f7fe fba4 	bl	80018b0 <lcdClear>
		lcdClearBuffer(&lcd);
 8003168:	481d      	ldr	r0, [pc, #116]	; (80031e0 <display_pii+0xc8>)
 800316a:	f7fe fc98 	bl	8001a9e <lcdClearBuffer>
	}

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800316e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003172:	481c      	ldr	r0, [pc, #112]	; (80031e4 <display_pii+0xcc>)
 8003174:	f000 fff8 	bl	8004168 <HAL_GPIO_TogglePin>
	display_driver(mesLeft, mesCenter, mesRight, lcd);
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <display_pii+0xd0>)
 800317a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <display_pii+0xd4>)
 8003180:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <display_pii+0xd8>)
 8003186:	e9d3 4500 	ldrd	r4, r5, [r3]
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <display_pii+0xc8>)
 800318c:	ab02      	add	r3, sp, #8
 800318e:	4611      	mov	r1, r2
 8003190:	2268      	movs	r2, #104	; 0x68
 8003192:	4618      	mov	r0, r3
 8003194:	f007 f86e 	bl	800a274 <memcpy>
 8003198:	e9cd 4500 	strd	r4, r5, [sp]
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	f7ff f8c4 	bl	8002330 <display_driver>

    mesLeft = 0;
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <display_pii+0xd0>)
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	f04f 0400 	mov.w	r4, #0
 80031b2:	e9c2 3400 	strd	r3, r4, [r2]
    mesCenter = 0;
 80031b6:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <display_pii+0xd4>)
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	e9c2 3400 	strd	r3, r4, [r2]
    mesRight = 0;
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <display_pii+0xd8>)
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	e9c2 3400 	strd	r3, r4, [r2]
    osDelay(300);
 80031d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031d6:	f005 fe6a 	bl	8008eae <osDelay>
	if(begin == 0)
 80031da:	e7a2      	b.n	8003122 <display_pii+0xa>
 80031dc:	200016f0 	.word	0x200016f0
 80031e0:	2000106c 	.word	0x2000106c
 80031e4:	48000400 	.word	0x48000400
 80031e8:	20001740 	.word	0x20001740
 80031ec:	200014e0 	.word	0x200014e0
 80031f0:	20001060 	.word	0x20001060

080031f4 <buzzer_work>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buzzer_work */
void buzzer_work(void const * argument)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buzzer_work */
  /* Infinite loop */
  for(;;)
  {
	  buzzerValue = mesCenter;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <buzzer_work+0x70>)
 80031fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <buzzer_work+0x74>)
 8003206:	701a      	strb	r2, [r3, #0]
	  if(mesLeft < buzzerValue)
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <buzzer_work+0x74>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f04f 0400 	mov.w	r4, #0
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <buzzer_work+0x78>)
 8003214:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003218:	42a2      	cmp	r2, r4
 800321a:	bf08      	it	eq
 800321c:	4299      	cmpeq	r1, r3
 800321e:	d205      	bcs.n	800322c <buzzer_work+0x38>
	  {
		  buzzerValue = mesLeft;
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <buzzer_work+0x78>)
 8003222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <buzzer_work+0x74>)
 800322a:	701a      	strb	r2, [r3, #0]
	  }
	  if(mesRight < buzzerValue)
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <buzzer_work+0x74>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f04f 0400 	mov.w	r4, #0
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <buzzer_work+0x7c>)
 8003238:	e9d2 1200 	ldrd	r1, r2, [r2]
 800323c:	42a2      	cmp	r2, r4
 800323e:	bf08      	it	eq
 8003240:	4299      	cmpeq	r1, r3
 8003242:	d205      	bcs.n	8003250 <buzzer_work+0x5c>
	  {
		  buzzerValue = mesRight;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <buzzer_work+0x7c>)
 8003246:	e9d3 3400 	ldrd	r3, r4, [r3]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <buzzer_work+0x74>)
 800324e:	701a      	strb	r2, [r3, #0]
	  }
	  buzzerDriver(buzzerValue);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <buzzer_work+0x74>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	4618      	mov	r0, r3
 800325c:	4621      	mov	r1, r4
 800325e:	f7fe fff5 	bl	800224c <buzzerDriver>
	  buzzerValue = mesCenter;
 8003262:	e7cb      	b.n	80031fc <buzzer_work+0x8>
 8003264:	200014e0 	.word	0x200014e0
 8003268:	20001925 	.word	0x20001925
 800326c:	20001740 	.word	0x20001740
 8003270:	20001060 	.word	0x20001060

08003274 <dht11_measure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dht11_measure */
void dht11_measure(void const * argument)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dht11_measure */
	char a[16] = "Temperatura: ";
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <dht11_measure+0x70>)
 800327e:	f107 0410 	add.w	r4, r7, #16
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	c407      	stmia	r4!, {r0, r1, r2}
 8003286:	8023      	strh	r3, [r4, #0]
 8003288:	2300      	movs	r3, #0
 800328a:	83fb      	strh	r3, [r7, #30]
	union wartosc p1;
	union wartosc p2;

	__HAL_UART_ENABLE(&hlpuart1);
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <dht11_measure+0x74>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <dht11_measure+0x74>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  /* Infinite loop */

  for(;;)
  {
	osDelay(100);
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	f005 fe06 	bl	8008eae <osDelay>
	DHT11_tempByte1 = measureDHT11();
 80032a2:	f7fd ffe1 	bl	8001268 <measureDHT11>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <dht11_measure+0x78>)
 80032ac:	701a      	strb	r2, [r3, #0]
	DHT11_soundSpeedCali = soundSpeedCalibration(DHT11_tempByte1);
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <dht11_measure+0x78>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f800 	bl	80012b8 <soundSpeedCalibration>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <dht11_measure+0x7c>)
 80032be:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 80032c0:	2064      	movs	r0, #100	; 0x64
 80032c2:	f005 fdf4 	bl	8008eae <osDelay>
	//send_char2(&aa);
	//send_char2("\r\nHello World\r\n");

	//send_char3("Temperatura: ", DHT11_tempByte1);

	printf("temperatura: %d  predkosc: %d\r\n", DHT11_tempByte1, DHT11_soundSpeedCali);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <dht11_measure+0x78>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <dht11_measure+0x7c>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4808      	ldr	r0, [pc, #32]	; (80032f4 <dht11_measure+0x80>)
 80032d4:	f006 ffe2 	bl	800a29c <iprintf>
    osDelay(3000);
 80032d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80032dc:	f005 fde7 	bl	8008eae <osDelay>
  {
 80032e0:	e7dc      	b.n	800329c <dht11_measure+0x28>
 80032e2:	bf00      	nop
 80032e4:	0800b2d0 	.word	0x0800b2d0
 80032e8:	20001534 	.word	0x20001534
 80032ec:	20001924 	.word	0x20001924
 80032f0:	200016f2 	.word	0x200016f2
 80032f4:	0800b2b0 	.word	0x0800b2b0

080032f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800330a:	f000 fc47 	bl	8003b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40001000 	.word	0x40001000

0800331c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_MspInit+0x44>)
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_MspInit+0x44>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6613      	str	r3, [r2, #96]	; 0x60
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_MspInit+0x44>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_MspInit+0x44>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_MspInit+0x44>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x44>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b090      	sub	sp, #64	; 0x40
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a77      	ldr	r2, [pc, #476]	; (8003570 <HAL_UART_MspInit+0x1fc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d12b      	bne.n	80033ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003396:	4b77      	ldr	r3, [pc, #476]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	4a76      	ldr	r2, [pc, #472]	; (8003574 <HAL_UART_MspInit+0x200>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80033a2:	4b74      	ldr	r3, [pc, #464]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ae:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4a70      	ldr	r2, [pc, #448]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 80033c6:	f001 f905 	bl	80045d4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80033ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80033dc:	2308      	movs	r3, #8
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	4864      	ldr	r0, [pc, #400]	; (8003578 <HAL_UART_MspInit+0x204>)
 80033e8:	f000 fcfc 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033ec:	e0bb      	b.n	8003566 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==UART5)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a62      	ldr	r2, [pc, #392]	; (800357c <HAL_UART_MspInit+0x208>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d145      	bne.n	8003484 <HAL_UART_MspInit+0x110>
    __HAL_RCC_UART5_CLK_ENABLE();
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	4a5d      	ldr	r2, [pc, #372]	; (8003574 <HAL_UART_MspInit+0x200>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003402:	6593      	str	r3, [r2, #88]	; 0x58
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003414:	4a57      	ldr	r2, [pc, #348]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341c:	4b55      	ldr	r3, [pc, #340]	; (8003574 <HAL_UART_MspInit+0x200>)
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <HAL_UART_MspInit+0x200>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_UART_MspInit+0x200>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003452:	2308      	movs	r3, #8
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345a:	4619      	mov	r1, r3
 800345c:	4848      	ldr	r0, [pc, #288]	; (8003580 <HAL_UART_MspInit+0x20c>)
 800345e:	f000 fcc1 	bl	8003de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003462:	2304      	movs	r3, #4
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003472:	2308      	movs	r3, #8
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347a:	4619      	mov	r1, r3
 800347c:	4841      	ldr	r0, [pc, #260]	; (8003584 <HAL_UART_MspInit+0x210>)
 800347e:	f000 fcb1 	bl	8003de4 <HAL_GPIO_Init>
}
 8003482:	e070      	b.n	8003566 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <HAL_UART_MspInit+0x214>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12b      	bne.n	80034e6 <HAL_UART_MspInit+0x172>
    __HAL_RCC_USART1_CLK_ENABLE();
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6613      	str	r3, [r2, #96]	; 0x60
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_UART_MspInit+0x200>)
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034a6:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4a32      	ldr	r2, [pc, #200]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b2:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80034be:	f001 f889 	bl	80045d4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034d4:	2307      	movs	r3, #7
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034dc:	4619      	mov	r1, r3
 80034de:	4826      	ldr	r0, [pc, #152]	; (8003578 <HAL_UART_MspInit+0x204>)
 80034e0:	f000 fc80 	bl	8003de4 <HAL_GPIO_Init>
}
 80034e4:	e03f      	b.n	8003566 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_UART_MspInit+0x218>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d13a      	bne.n	8003566 <HAL_UART_MspInit+0x1f2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fa:	6593      	str	r3, [r2, #88]	; 0x58
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_UART_MspInit+0x200>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <HAL_UART_MspInit+0x200>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_UART_MspInit+0x200>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <HAL_UART_MspInit+0x200>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003520:	2304      	movs	r3, #4
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003530:	2307      	movs	r3, #7
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800353e:	f000 fc51 	bl	8003de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003554:	2303      	movs	r3, #3
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003562:	f000 fc3f 	bl	8003de4 <HAL_GPIO_Init>
}
 8003566:	bf00      	nop
 8003568:	3740      	adds	r7, #64	; 0x40
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40008000 	.word	0x40008000
 8003574:	40021000 	.word	0x40021000
 8003578:	48001800 	.word	0x48001800
 800357c:	40005000 	.word	0x40005000
 8003580:	48000800 	.word	0x48000800
 8003584:	48000c00 	.word	0x48000c00
 8003588:	40013800 	.word	0x40013800
 800358c:	40004400 	.word	0x40004400

08003590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_SPI_MspInit+0x7c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d128      	bne.n	8003604 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6613      	str	r3, [r2, #96]	; 0x60
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_SPI_MspInit+0x80>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80035e2:	2382      	movs	r3, #130	; 0x82
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035f2:	2305      	movs	r3, #5
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003600:	f000 fbf0 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003604:	bf00      	nop
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40013000 	.word	0x40013000
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_TIM_OnePulse_MspInit+0x38>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10b      	bne.n	800363e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800362c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003630:	6613      	str	r3, [r2, #96]	; 0x60
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d10c      	bne.n	8003680 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003666:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	4a26      	ldr	r2, [pc, #152]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6593      	str	r3, [r2, #88]	; 0x58
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800367e:	e03c      	b.n	80036fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_TIM_Base_MspInit+0xb4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10c      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
}
 80036a2:	e02a      	b.n	80036fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_MspInit+0xb8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d114      	bne.n	80036d8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036b4:	f043 0320 	orr.w	r3, r3, #32
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2100      	movs	r1, #0
 80036ca:	2037      	movs	r0, #55	; 0x37
 80036cc:	f000 fb60 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80036d0:	2037      	movs	r0, #55	; 0x37
 80036d2:	f000 fb79 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
}
 80036d6:	e010      	b.n	80036fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <HAL_TIM_Base_MspInit+0xbc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10b      	bne.n	80036fa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ec:	6613      	str	r3, [r2, #96]	; 0x60
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_TIM_Base_MspInit+0xb0>)
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40000400 	.word	0x40000400
 800370c:	40001400 	.word	0x40001400
 8003710:	40014400 	.word	0x40014400

08003714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a11      	ldr	r2, [pc, #68]	; (8003778 <HAL_TIM_MspPostInit+0x64>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d11c      	bne.n	8003770 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_TIM_MspPostInit+0x68>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	4a10      	ldr	r2, [pc, #64]	; (800377c <HAL_TIM_MspPostInit+0x68>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_TIM_MspPostInit+0x68>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800374e:	2340      	movs	r3, #64	; 0x40
 8003750:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800375e:	2302      	movs	r3, #2
 8003760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	4619      	mov	r1, r3
 8003768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376c:	f000 fb3a 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003770:	bf00      	nop
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40000400 	.word	0x40000400
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a0:	d154      	bne.n	800384c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80037ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80037be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2303      	movs	r3, #3
 80037ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80037cc:	230a      	movs	r3, #10
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037da:	f000 fb03 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80037de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f6:	f000 faf5 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	; 0x58
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003836:	f000 febd 	bl	80045b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <HAL_PCD_MspInit+0xd4>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003846:	e001      	b.n	800384c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003848:	f000 feb4 	bl	80045b4 <HAL_PWREx_EnableVddUSB>
}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	; 0x30
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003868:	2200      	movs	r2, #0
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	2036      	movs	r0, #54	; 0x36
 800386e:	f000 fa8f 	bl	8003d90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003872:	2036      	movs	r0, #54	; 0x36
 8003874:	f000 faa8 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_InitTick+0xa0>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_InitTick+0xa0>)
 800387e:	f043 0310 	orr.w	r3, r3, #16
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_InitTick+0xa0>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003890:	f107 0210 	add.w	r2, r7, #16
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fcbe 	bl	800521c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038a0:	f001 fc90 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80038a4:	4603      	mov	r3, r0
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <HAL_InitTick+0xa4>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0c9b      	lsrs	r3, r3, #18
 80038b4:	3b01      	subs	r3, #1
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_InitTick+0xa8>)
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <HAL_InitTick+0xac>)
 80038bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_InitTick+0xa8>)
 80038c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_InitTick+0xa8>)
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_InitTick+0xa8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_InitTick+0xa8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038d8:	4809      	ldr	r0, [pc, #36]	; (8003900 <HAL_InitTick+0xa8>)
 80038da:	f002 fe09 	bl	80064f0 <HAL_TIM_Base_Init>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038e4:	4806      	ldr	r0, [pc, #24]	; (8003900 <HAL_InitTick+0xa8>)
 80038e6:	f002 fe5b 	bl	80065a0 <HAL_TIM_Base_Start_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	431bde83 	.word	0x431bde83
 8003900:	20001938 	.word	0x20001938
 8003904:	40001000 	.word	0x40001000

08003908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391a:	e7fe      	b.n	800391a <HardFault_Handler+0x4>

0800391c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler+0x4>

08003922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <BusFault_Handler+0x4>

08003928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <UsageFault_Handler+0x4>

0800392e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <TIM6_DAC_IRQHandler+0x10>)
 8003942:	f003 f98f 	bl	8006c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20001938 	.word	0x20001938

08003950 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <TIM7_IRQHandler+0x10>)
 8003956:	f003 f985 	bl	8006c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200018d8 	.word	0x200018d8

08003964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e00a      	b.n	800398c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003976:	f3af 8000 	nop.w
 800397a:	4601      	mov	r1, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	60ba      	str	r2, [r7, #8]
 8003982:	b2ca      	uxtb	r2, r1
 8003984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	dbf0      	blt.n	8003976 <_read+0x12>
	}

return len;
 8003994:	687b      	ldr	r3, [r7, #4]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e009      	b.n	80039c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fdd1 	bl	8002560 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3301      	adds	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dbf1      	blt.n	80039b0 <_write+0x12>
	}
	return len;
 80039cc:	687b      	ldr	r3, [r7, #4]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_close>:

int _close(int file)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
	return -1;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_isatty>:

int _isatty(int file)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	return 1;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f006 fbd6 	bl	800a220 <__errno>
 8003a74:	4602      	mov	r2, r0
 8003a76:	230c      	movs	r3, #12
 8003a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200a0000 	.word	0x200a0000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	200002f0 	.word	0x200002f0
 8003aa8:	20001990 	.word	0x20001990

08003aac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <SystemInit+0x64>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <SystemInit+0x64>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <SystemInit+0x68>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <SystemInit+0x68>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <SystemInit+0x68>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <SystemInit+0x68>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <SystemInit+0x68>)
 8003ad8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003adc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <SystemInit+0x68>)
 8003ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <SystemInit+0x68>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <SystemInit+0x68>)
 8003af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <SystemInit+0x68>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <SystemInit+0x64>)
 8003afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b02:	609a      	str	r2, [r3, #8]
#endif
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00
 8003b14:	40021000 	.word	0x40021000

08003b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b1c:	f7ff ffc6 	bl	8003aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b22:	e003      	b.n	8003b2c <LoopCopyDataInit>

08003b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b2a:	3104      	adds	r1, #4

08003b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b2c:	480a      	ldr	r0, [pc, #40]	; (8003b58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b34:	d3f6      	bcc.n	8003b24 <CopyDataInit>
	ldr	r2, =_sbss
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b38:	e002      	b.n	8003b40 <LoopFillZerobss>

08003b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b3c:	f842 3b04 	str.w	r3, [r2], #4

08003b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <LoopForever+0x16>)
	cmp	r2, r3
 8003b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b44:	d3f9      	bcc.n	8003b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b46:	f006 fb71 	bl	800a22c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b4a:	f7fe fd1d 	bl	8002588 <main>

08003b4e <LoopForever>:

LoopForever:
    b LoopForever
 8003b4e:	e7fe      	b.n	8003b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b50:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8003b54:	0800b5e0 	.word	0x0800b5e0
	ldr	r0, =_sdata
 8003b58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b5c:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8003b60:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8003b64:	2000198c 	.word	0x2000198c

08003b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b68:	e7fe      	b.n	8003b68 <ADC1_IRQHandler>

08003b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f000 f900 	bl	8003d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7ff fe6c 	bl	8003858 <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	71fb      	strb	r3, [r7, #7]
 8003b8a:	e001      	b.n	8003b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b8c:	f7ff fbce 	bl	800332c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b90:	79fb      	ldrb	r3, [r7, #7]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_IncTick+0x20>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_IncTick+0x24>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <HAL_IncTick+0x24>)
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000010 	.word	0x20000010
 8003bc0:	20001984 	.word	0x20001984

08003bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_GetTick+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20001984 	.word	0x20001984

08003bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7ff ffee 	bl	8003bc4 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d005      	beq.n	8003c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_Delay+0x40>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c02:	bf00      	nop
 8003c04:	f7ff ffde 	bl	8003bc4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d8f7      	bhi.n	8003c04 <HAL_Delay+0x28>
  {
  }
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000010 	.word	0x20000010

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	; (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff4c 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da2:	f7ff ff61 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003da6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7ff ffb1 	bl	8003d14 <NVIC_EncodePriority>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff80 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff54 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df2:	e166      	b.n	80040c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8158 	beq.w	80040bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d00b      	beq.n	8003e2c <HAL_GPIO_Init+0x48>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d007      	beq.n	8003e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e20:	2b11      	cmp	r3, #17
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0201 	and.w	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	2203      	movs	r2, #3
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0xea>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b12      	cmp	r3, #18
 8003ecc:	d123      	bne.n	8003f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3208      	adds	r2, #8
 8003ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	08da      	lsrs	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3208      	adds	r2, #8
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	2203      	movs	r2, #3
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0203 	and.w	r2, r3, #3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80b2 	beq.w	80040bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	4a60      	ldr	r2, [pc, #384]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6613      	str	r3, [r2, #96]	; 0x60
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f70:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_GPIO_Init+0x300>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f9a:	d02b      	beq.n	8003ff4 <HAL_GPIO_Init+0x210>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d025      	beq.n	8003ff0 <HAL_GPIO_Init+0x20c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a51      	ldr	r2, [pc, #324]	; (80040ec <HAL_GPIO_Init+0x308>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d01f      	beq.n	8003fec <HAL_GPIO_Init+0x208>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a50      	ldr	r2, [pc, #320]	; (80040f0 <HAL_GPIO_Init+0x30c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d019      	beq.n	8003fe8 <HAL_GPIO_Init+0x204>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_GPIO_Init+0x310>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <HAL_GPIO_Init+0x200>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_GPIO_Init+0x314>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_GPIO_Init+0x1fc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <HAL_GPIO_Init+0x318>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a4c      	ldr	r2, [pc, #304]	; (8004100 <HAL_GPIO_Init+0x31c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_GPIO_Init+0x1f4>
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	e00e      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	e00c      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fdc:	2306      	movs	r3, #6
 8003fde:	e00a      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fe0:	2305      	movs	r3, #5
 8003fe2:	e008      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	e006      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e004      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e002      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	f002 0203 	and.w	r2, r2, #3
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	4093      	lsls	r3, r2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004006:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_GPIO_Init+0x300>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004038:	4a32      	ldr	r2, [pc, #200]	; (8004104 <HAL_GPIO_Init+0x320>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800403e:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004062:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_GPIO_Init+0x320>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800408c:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <HAL_GPIO_Init+0x320>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_GPIO_Init+0x320>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f ae91 	bne.w	8003df4 <HAL_GPIO_Init+0x10>
  }
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40010000 	.word	0x40010000
 80040e8:	48000400 	.word	0x48000400
 80040ec:	48000800 	.word	0x48000800
 80040f0:	48000c00 	.word	0x48000c00
 80040f4:	48001000 	.word	0x48001000
 80040f8:	48001400 	.word	0x48001400
 80040fc:	48001800 	.word	0x48001800
 8004100:	48001c00 	.word	0x48001c00
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	e001      	b.n	800412a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004154:	e002      	b.n	800415c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43d9      	mvns	r1, r3
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	400b      	ands	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	b08f      	sub	sp, #60	; 0x3c
 80041a0:	af0a      	add	r7, sp, #40	; 0x28
 80041a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e116      	b.n	80043dc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fad9 	bl	8003780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2203      	movs	r2, #3
 80041d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fbb5 	bl	800895c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	687e      	ldr	r6, [r7, #4]
 80041fa:	466d      	mov	r5, sp
 80041fc:	f106 0410 	add.w	r4, r6, #16
 8004200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004208:	e894 0003 	ldmia.w	r4, {r0, r1}
 800420c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004210:	1d33      	adds	r3, r6, #4
 8004212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004214:	6838      	ldr	r0, [r7, #0]
 8004216:	f004 fb4f 	bl	80088b8 <USB_CoreInit>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0d7      	b.n	80043dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f004 fba3 	bl	800897e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e04a      	b.n	80042d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	333d      	adds	r3, #61	; 0x3d
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	333c      	adds	r3, #60	; 0x3c
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	b298      	uxth	r0, r3
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3342      	adds	r3, #66	; 0x42
 800427a:	4602      	mov	r2, r0
 800427c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	333f      	adds	r3, #63	; 0x3f
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3344      	adds	r3, #68	; 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3348      	adds	r3, #72	; 0x48
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3350      	adds	r3, #80	; 0x50
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	3301      	adds	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3af      	bcc.n	800423e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	e044      	b.n	800436e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	3301      	adds	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d3b5      	bcc.n	80042e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	687e      	ldr	r6, [r7, #4]
 8004380:	466d      	mov	r5, sp
 8004382:	f106 0410 	add.w	r4, r6, #16
 8004386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004392:	e885 0003 	stmia.w	r5, {r0, r1}
 8004396:	1d33      	adds	r3, r6, #4
 8004398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439a:	6838      	ldr	r0, [r7, #0]
 800439c:	f004 fb1a 	bl	80089d4 <USB_DevInit>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e014      	b.n	80043dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f80a 	bl	80043e4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 fcaa 	bl	8008d2e <USB_DevDisconnect>

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	f043 0303 	orr.w	r3, r3, #3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d102      	bne.n	8004444 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800443e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004442:	e00b      	b.n	800445c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d102      	bne.n	800445a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004458:	e000      	b.n	800445c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800445a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40007000 	.word	0x40007000

0800446c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d141      	bne.n	80044fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800447a:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d131      	bne.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004488:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044a0:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2232      	movs	r2, #50	; 0x32
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	0c9b      	lsrs	r3, r3, #18
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044be:	e002      	b.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d102      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f2      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d158      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e057      	b.n	800459c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044ec:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044fc:	e04d      	b.n	800459a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d141      	bne.n	800458a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d131      	bne.n	8004578 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451a:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800452c:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004532:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2232      	movs	r2, #50	; 0x32
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	0c9b      	lsrs	r3, r3, #18
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800454a:	e002      	b.n	8004552 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3b01      	subs	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455e:	d102      	bne.n	8004566 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f2      	bne.n	800454c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d112      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e011      	b.n	800459c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004588:	e007      	b.n	800459a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004592:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004598:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40007000 	.word	0x40007000
 80045ac:	20000008 	.word	0x20000008
 80045b0:	431bde83 	.word	0x431bde83

080045b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c2:	6053      	str	r3, [r2, #4]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40007000 	.word	0x40007000

080045d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e2:	6053      	str	r3, [r2, #4]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40007000 	.word	0x40007000

080045f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f000 bc16 	b.w	8004e34 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004608:	4ba0      	ldr	r3, [pc, #640]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004612:	4b9e      	ldr	r3, [pc, #632]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80e4 	beq.w	80047f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x4c>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	f040 808b 	bne.w	800474e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 8087 	bne.w	800474e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004640:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x64>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e3ed      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_RCC_OscConfig+0x7e>
 8004668:	4b88      	ldr	r3, [pc, #544]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	e005      	b.n	800467e <HAL_RCC_OscConfig+0x8a>
 8004672:	4b86      	ldr	r3, [pc, #536]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467e:	4293      	cmp	r3, r2
 8004680:	d223      	bcs.n	80046ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fdfa 	bl	8005280 <RCC_SetFlashLatencyFromMSIRange>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e3ce      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004696:	4b7d      	ldr	r3, [pc, #500]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7c      	ldr	r2, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4977      	ldr	r1, [pc, #476]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b4:	4b75      	ldr	r3, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	4972      	ldr	r1, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
 80046c8:	e025      	b.n	8004716 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6f      	ldr	r2, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	496a      	ldr	r1, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e8:	4b68      	ldr	r3, [pc, #416]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	4965      	ldr	r1, [pc, #404]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fdba 	bl	8005280 <RCC_SetFlashLatencyFromMSIRange>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e38e      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004716:	f000 fcbf 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800471a:	4601      	mov	r1, r0
 800471c:	4b5b      	ldr	r3, [pc, #364]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	4a5a      	ldr	r2, [pc, #360]	; (8004890 <HAL_RCC_OscConfig+0x29c>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	fa21 f303 	lsr.w	r3, r1, r3
 8004732:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_OscConfig+0x2a0>)
 8004734:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004736:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_RCC_OscConfig+0x2a4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f88c 	bl	8003858 <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d052      	beq.n	80047f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	e372      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d032      	beq.n	80047bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004756:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4c      	ldr	r2, [pc, #304]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004762:	f7ff fa2f 	bl	8003bc4 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800476a:	f7ff fa2b 	bl	8003bc4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e35b      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477c:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004788:	4b40      	ldr	r3, [pc, #256]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3f      	ldr	r2, [pc, #252]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800478e:	f043 0308 	orr.w	r3, r3, #8
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b3d      	ldr	r3, [pc, #244]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	493a      	ldr	r1, [pc, #232]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a6:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	4935      	ldr	r1, [pc, #212]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
 80047ba:	e01a      	b.n	80047f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047bc:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a32      	ldr	r2, [pc, #200]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047c8:	f7ff f9fc 	bl	8003bc4 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d0:	f7ff f9f8 	bl	8003bc4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e328      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1dc>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d073      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d005      	beq.n	8004810 <HAL_RCC_OscConfig+0x21c>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b0c      	cmp	r3, #12
 8004808:	d10e      	bne.n	8004828 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d10b      	bne.n	8004828 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d063      	beq.n	80048e4 <HAL_RCC_OscConfig+0x2f0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d15f      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e305      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d106      	bne.n	8004840 <HAL_RCC_OscConfig+0x24c>
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e01d      	b.n	800487c <HAL_RCC_OscConfig+0x288>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x270>
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a0f      	ldr	r2, [pc, #60]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x288>
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCC_OscConfig+0x298>)
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a05      	ldr	r2, [pc, #20]	; (800488c <HAL_RCC_OscConfig+0x298>)
 8004876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7ff f99e 	bl	8003bc4 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800488a:	e010      	b.n	80048ae <HAL_RCC_OscConfig+0x2ba>
 800488c:	40021000 	.word	0x40021000
 8004890:	0800b4d8 	.word	0x0800b4d8
 8004894:	20000008 	.word	0x20000008
 8004898:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7ff f992 	bl	8003bc4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e2c2      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ae:	4baf      	ldr	r3, [pc, #700]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x2a8>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7ff f982 	bl	8003bc4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7ff f97e 	bl	8003bc4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e2ae      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	4ba5      	ldr	r3, [pc, #660]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2d0>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d060      	beq.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_OscConfig+0x310>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d119      	bne.n	8004932 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d116      	bne.n	8004932 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x328>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e28b      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	4990      	ldr	r1, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004930:	e040      	b.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800493a:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a8b      	ldr	r2, [pc, #556]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7ff f93d 	bl	8003bc4 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494e:	f7ff f939 	bl	8003bc4 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e269      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004960:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496c:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	497c      	ldr	r1, [pc, #496]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
 8004980:	e018      	b.n	80049b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b7a      	ldr	r3, [pc, #488]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a79      	ldr	r2, [pc, #484]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7ff f919 	bl	8003bc4 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7ff f915 	bl	8003bc4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e245      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a8:	4b70      	ldr	r3, [pc, #448]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d03c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c8:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	4a67      	ldr	r2, [pc, #412]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7ff f8f4 	bl	8003bc4 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e0:	f7ff f8f0 	bl	8003bc4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e220      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f2:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ef      	beq.n	80049e0 <HAL_RCC_OscConfig+0x3ec>
 8004a00:	e01b      	b.n	8004a3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a02:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7ff f8d7 	bl	8003bc4 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1a:	f7ff f8d3 	bl	8003bc4 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e203      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2c:	4b4f      	ldr	r3, [pc, #316]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ef      	bne.n	8004a1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a6 	beq.w	8004b94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a4c:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10d      	bne.n	8004a74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b44      	ldr	r3, [pc, #272]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	; 0x58
 8004a64:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a70:	2301      	movs	r3, #1
 8004a72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a74:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d118      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a80:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3a      	ldr	r2, [pc, #232]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8c:	f7ff f89a 	bl	8003bc4 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a94:	f7ff f896 	bl	8003bc4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1c6      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa6:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <HAL_RCC_OscConfig+0x57c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d108      	bne.n	8004acc <HAL_RCC_OscConfig+0x4d8>
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aca:	e024      	b.n	8004b16 <HAL_RCC_OscConfig+0x522>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d110      	bne.n	8004af6 <HAL_RCC_OscConfig+0x502>
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af4:	e00f      	b.n	8004b16 <HAL_RCC_OscConfig+0x522>
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a1b      	ldr	r2, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b06:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7ff f851 	bl	8003bc4 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7ff f84d 	bl	8003bc4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e17b      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_OscConfig+0x578>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ed      	beq.n	8004b26 <HAL_RCC_OscConfig+0x532>
 8004b4a:	e01a      	b.n	8004b82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7ff f83a 	bl	8003bc4 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7ff f836 	bl	8003bc4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d906      	bls.n	8004b74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e164      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b74:	4ba8      	ldr	r3, [pc, #672]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e8      	bne.n	8004b54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4ba3      	ldr	r3, [pc, #652]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4aa2      	ldr	r2, [pc, #648]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d03c      	beq.n	8004c1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bae:	4a9a      	ldr	r2, [pc, #616]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7ff f804 	bl	8003bc4 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc0:	f7ff f800 	bl	8003bc4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e130      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd2:	4b91      	ldr	r3, [pc, #580]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x5cc>
 8004be0:	e01b      	b.n	8004c1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be2:	4b8d      	ldr	r3, [pc, #564]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be8:	4a8b      	ldr	r2, [pc, #556]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fe ffe7 	bl	8003bc4 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfa:	f7fe ffe3 	bl	8003bc4 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e113      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c0c:	4b82      	ldr	r3, [pc, #520]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ef      	bne.n	8004bfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8107 	beq.w	8004e32 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f040 80cb 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c2e:	4b7a      	ldr	r3, [pc, #488]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0203 	and.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d12c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d123      	bne.n	8004c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d11b      	bne.n	8004c9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d113      	bne.n	8004c9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d109      	bne.n	8004c9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	3b01      	subs	r3, #1
 8004c96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d06d      	beq.n	8004d78 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d068      	beq.n	8004d74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cae:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0ba      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b56      	ldr	r3, [pc, #344]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a55      	ldr	r2, [pc, #340]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cca:	f7fe ff7b 	bl	8003bc4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe ff77 	bl	8003bc4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0a7      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce4:	4b4c      	ldr	r3, [pc, #304]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf0:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_RCC_OscConfig+0x828>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0112      	lsls	r2, r2, #4
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d0a:	0212      	lsls	r2, r2, #8
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d12:	0852      	lsrs	r2, r2, #1
 8004d14:	3a01      	subs	r2, #1
 8004d16:	0552      	lsls	r2, r2, #21
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d1e:	0852      	lsrs	r2, r2, #1
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0652      	lsls	r2, r2, #25
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d2a:	06d2      	lsls	r2, r2, #27
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	493a      	ldr	r1, [pc, #232]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d34:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a37      	ldr	r2, [pc, #220]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d40:	4b35      	ldr	r3, [pc, #212]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a34      	ldr	r2, [pc, #208]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d4c:	f7fe ff3a 	bl	8003bc4 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe ff36 	bl	8003bc4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e066      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d72:	e05e      	b.n	8004e32 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e05d      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d156      	bne.n	8004e32 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d9c:	f7fe ff12 	bl	8003bc4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fe ff0e 	bl	8003bc4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e03e      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x7b0>
 8004dc2:	e036      	b.n	8004e32 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d031      	beq.n	8004e2e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <HAL_RCC_OscConfig+0x824>)
 8004df4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fee1 	bl	8003bc4 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e04:	e00c      	b.n	8004e20 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fe fedd 	bl	8003bc4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d905      	bls.n	8004e20 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e00d      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_OscConfig+0x848>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ec      	bne.n	8004e06 <HAL_RCC_OscConfig+0x812>
 8004e2c:	e001      	b.n	8004e32 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000

08004e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e10f      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e58:	4b89      	ldr	r3, [pc, #548]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d910      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b86      	ldr	r3, [pc, #536]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 020f 	bic.w	r2, r3, #15
 8004e6e:	4984      	ldr	r1, [pc, #528]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0f7      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8089 	beq.w	8004fa8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d133      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	4b79      	ldr	r3, [pc, #484]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0e4      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004eae:	f000 fa41 	bl	8005334 <RCC_GetSysClockFreqFromPLLSource>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b74      	ldr	r3, [pc, #464]	; (8005088 <HAL_RCC_ClockConfig+0x248>)
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d955      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004eba:	4b72      	ldr	r3, [pc, #456]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ece:	4a6d      	ldr	r2, [pc, #436]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e044      	b.n	8004f66 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03e      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x126>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d13a      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ef0:	4b64      	ldr	r3, [pc, #400]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef8:	4a62      	ldr	r2, [pc, #392]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e02f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0ac      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f26:	4b57      	ldr	r3, [pc, #348]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e0a0      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4b53      	ldr	r3, [pc, #332]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e098      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f46:	f000 f8a7 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <HAL_RCC_ClockConfig+0x248>)
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d909      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4944      	ldr	r1, [pc, #272]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fe fe24 	bl	8003bc4 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fe fe20 	bl	8003bc4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e070      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4930      	ldr	r1, [pc, #192]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d105      	bne.n	8004fda <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fce:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fda:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d210      	bcs.n	800500a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 020f 	bic.w	r2, r3, #15
 8004ff0:	4923      	ldr	r1, [pc, #140]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e036      	b.n	8005078 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4918      	ldr	r1, [pc, #96]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005034:	4b13      	ldr	r3, [pc, #76]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4910      	ldr	r1, [pc, #64]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005048:	f000 f826 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800504c:	4601      	mov	r1, r0
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_RCC_ClockConfig+0x244>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <HAL_RCC_ClockConfig+0x24c>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	fa21 f303 	lsr.w	r3, r1, r3
 8005064:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x250>)
 8005066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCC_ClockConfig+0x254>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fbf3 	bl	8003858 <HAL_InitTick>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]

  return status;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	04c4b400 	.word	0x04c4b400
 800508c:	0800b4d8 	.word	0x0800b4d8
 8005090:	20000008 	.word	0x20000008
 8005094:	2000000c 	.word	0x2000000c

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a6:	4b3d      	ldr	r3, [pc, #244]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b0:	4b3a      	ldr	r3, [pc, #232]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x34>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	d121      	bne.n	800510a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d11e      	bne.n	800510a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050d8:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 80050da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e005      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10d      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d102      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e004      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d101      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800511c:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800511e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d133      	bne.n	800518e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0xa4>
 8005136:	2b03      	cmp	r3, #3
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0xaa>
 800513a:	e005      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800513e:	617b      	str	r3, [r7, #20]
      break;
 8005140:	e005      	b.n	800514e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005142:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005144:	617b      	str	r3, [r7, #20]
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	617b      	str	r3, [r7, #20]
      break;
 800514c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	3301      	adds	r3, #1
 800515a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	fb02 f203 	mul.w	r2, r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_GetSysClockFreq+0x104>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0e5b      	lsrs	r3, r3, #25
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	3301      	adds	r3, #1
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800518e:	69bb      	ldr	r3, [r7, #24]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3724      	adds	r7, #36	; 0x24
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800b4f0 	.word	0x0800b4f0
 80051a4:	00f42400 	.word	0x00f42400
 80051a8:	007a1200 	.word	0x007a1200

080051ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000008 	.word	0x20000008

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c8:	f7ff fff0 	bl	80051ac <HAL_RCC_GetHCLKFreq>
 80051cc:	4601      	mov	r1, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	0800b4e8 	.word	0x0800b4e8

080051f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051f4:	f7ff ffda 	bl	80051ac <HAL_RCC_GetHCLKFreq>
 80051f8:	4601      	mov	r1, r0
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	0adb      	lsrs	r3, r3, #11
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	0800b4e8 	.word	0x0800b4e8

0800521c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	220f      	movs	r2, #15
 800522a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <HAL_RCC_GetClockConfig+0x5c>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0203 	and.w	r2, r3, #3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_RCC_GetClockConfig+0x5c>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	08db      	lsrs	r3, r3, #3
 8005256:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <HAL_RCC_GetClockConfig+0x60>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 020f 	and.w	r2, r3, #15
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	40022000 	.word	0x40022000

08005280 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005298:	f7ff f8c8 	bl	800442c <HAL_PWREx_GetVoltageRange>
 800529c:	6178      	str	r0, [r7, #20]
 800529e:	e014      	b.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	4a21      	ldr	r2, [pc, #132]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052aa:	6593      	str	r3, [r2, #88]	; 0x58
 80052ac:	4b1f      	ldr	r3, [pc, #124]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052b8:	f7ff f8b8 	bl	800442c <HAL_PWREx_GetVoltageRange>
 80052bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	4a1a      	ldr	r2, [pc, #104]	; (800532c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d10b      	bne.n	80052ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d913      	bls.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2ba0      	cmp	r3, #160	; 0xa0
 80052dc:	d902      	bls.n	80052e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052de:	2302      	movs	r3, #2
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e00d      	b.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052e4:	2301      	movs	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	e00a      	b.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b7f      	cmp	r3, #127	; 0x7f
 80052ee:	d902      	bls.n	80052f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80052f0:	2302      	movs	r3, #2
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e004      	b.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b70      	cmp	r3, #112	; 0x70
 80052fa:	d101      	bne.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052fc:	2301      	movs	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 020f 	bic.w	r2, r3, #15
 8005308:	4909      	ldr	r1, [pc, #36]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	d001      	beq.n	8005322 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	40022000 	.word	0x40022000

08005334 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800533e:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d118      	bne.n	800537c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e005      	b.n	8005372 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005372:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d002      	beq.n	8005392 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800538c:	2b03      	cmp	r3, #3
 800538e:	d003      	beq.n	8005398 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005390:	e005      	b.n	800539e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005392:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005394:	613b      	str	r3, [r7, #16]
    break;
 8005396:	e005      	b.n	80053a4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800539a:	613b      	str	r3, [r7, #16]
    break;
 800539c:	e002      	b.n	80053a4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
    break;
 80053a2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	3301      	adds	r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	fb02 f203 	mul.w	r2, r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	0e5b      	lsrs	r3, r3, #25
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	3301      	adds	r3, #1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053e4:	683b      	ldr	r3, [r7, #0]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800b4f0 	.word	0x0800b4f0
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	007a1200 	.word	0x007a1200

08005404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800540c:	2300      	movs	r3, #0
 800540e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005410:	2300      	movs	r3, #0
 8005412:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03d      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d00b      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d804      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005430:	2b20      	cmp	r3, #32
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005434:	e01d      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005436:	2b60      	cmp	r3, #96	; 0x60
 8005438:	d01e      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d01c      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800543e:	e018      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005440:	4b86      	ldr	r3, [pc, #536]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a85      	ldr	r2, [pc, #532]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800544c:	e015      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fafd 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800545e:	e00c      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3320      	adds	r3, #32
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fbe4 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005470:	e003      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	74fb      	strb	r3, [r7, #19]
      break;
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005480:	4b76      	ldr	r3, [pc, #472]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	4973      	ldr	r1, [pc, #460]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d042      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d00f      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d805      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d011      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d017      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80054c2:	e01f      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d01f      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d01c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054d0:	e018      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054d2:	4b62      	ldr	r3, [pc, #392]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4a61      	ldr	r2, [pc, #388]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054de:	e015      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fab4 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f0:	e00c      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3320      	adds	r3, #32
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fb9b 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	74fb      	strb	r3, [r7, #19]
      break;
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800550a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005512:	4b52      	ldr	r3, [pc, #328]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005514:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	494e      	ldr	r1, [pc, #312]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005528:	e001      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 809f 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553c:	2300      	movs	r3, #0
 800553e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005540:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	4a40      	ldr	r2, [pc, #256]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	6593      	str	r3, [r2, #88]	; 0x58
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556e:	2301      	movs	r3, #1
 8005570:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005572:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3a      	ldr	r2, [pc, #232]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800557e:	f7fe fb21 	bl	8003bc4 <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005584:	e009      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7fe fb1d 	bl	8003bc4 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d902      	bls.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	74fb      	strb	r3, [r7, #19]
        break;
 8005598:	e005      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80055a6:	7cfb      	ldrb	r3, [r7, #19]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d15b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055ac:	4b2b      	ldr	r3, [pc, #172]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d019      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d6:	4b21      	ldr	r3, [pc, #132]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	4a1f      	ldr	r2, [pc, #124]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055f6:	4a19      	ldr	r2, [pc, #100]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d016      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005608:	f7fe fadc 	bl	8003bc4 <HAL_GetTick>
 800560c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560e:	e00b      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fe fad8 	bl	8003bc4 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d902      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	74fb      	strb	r3, [r7, #19]
            break;
 8005626:	e006      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0ec      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	74bb      	strb	r3, [r7, #18]
 800565a:	e005      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800565c:	40021000 	.word	0x40021000
 8005660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005668:	7c7b      	ldrb	r3, [r7, #17]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566e:	4ba0      	ldr	r3, [pc, #640]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	4a9f      	ldr	r2, [pc, #636]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005678:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005686:	4b9a      	ldr	r3, [pc, #616]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f023 0203 	bic.w	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005694:	4996      	ldr	r1, [pc, #600]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056a8:	4b91      	ldr	r3, [pc, #580]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f023 020c 	bic.w	r2, r3, #12
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	498e      	ldr	r1, [pc, #568]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ca:	4b89      	ldr	r3, [pc, #548]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	4985      	ldr	r1, [pc, #532]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ec:	4b80      	ldr	r3, [pc, #512]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fa:	497d      	ldr	r1, [pc, #500]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800570e:	4b78      	ldr	r3, [pc, #480]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571c:	4974      	ldr	r1, [pc, #464]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005730:	4b6f      	ldr	r3, [pc, #444]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	496c      	ldr	r1, [pc, #432]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005752:	4b67      	ldr	r3, [pc, #412]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005760:	4963      	ldr	r1, [pc, #396]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005774:	4b5e      	ldr	r3, [pc, #376]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005782:	495b      	ldr	r1, [pc, #364]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005796:	4b56      	ldr	r3, [pc, #344]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	4952      	ldr	r1, [pc, #328]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057b8:	4b4d      	ldr	r3, [pc, #308]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	494a      	ldr	r1, [pc, #296]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057da:	4b45      	ldr	r3, [pc, #276]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	4941      	ldr	r1, [pc, #260]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057fc:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	4939      	ldr	r1, [pc, #228]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d028      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800581e:	4b34      	ldr	r3, [pc, #208]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582c:	4930      	ldr	r1, [pc, #192]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583c:	d106      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a2b      	ldr	r2, [pc, #172]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005848:	60d3      	str	r3, [r2, #12]
 800584a:	e011      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005854:	d10c      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	2101      	movs	r1, #1
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f8f9 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005866:	7cfb      	ldrb	r3, [r7, #19]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d04d      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005884:	d108      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800588c:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005892:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005896:	e012      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800589e:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b6:	490e      	ldr	r1, [pc, #56]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058c6:	d106      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d2:	60d3      	str	r3, [r2, #12]
 80058d4:	e020      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058de:	d109      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a02      	ldr	r2, [pc, #8]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ea:	60d3      	str	r3, [r2, #12]
 80058ec:	e014      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058fc:	d10c      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	2101      	movs	r1, #1
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f8a5 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d028      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005924:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	4947      	ldr	r1, [pc, #284]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005942:	d106      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005944:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a41      	ldr	r2, [pc, #260]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800594a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594e:	60d3      	str	r3, [r2, #12]
 8005950:	e011      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800595a:	d10c      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	2101      	movs	r1, #1
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f876 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01e      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005982:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005992:	492f      	ldr	r1, [pc, #188]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f851 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80059ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d2:	f023 0204 	bic.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059dc:	491c      	ldr	r1, [pc, #112]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80059f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059f6:	f023 0218 	bic.w	r2, r3, #24
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	4913      	ldr	r1, [pc, #76]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a24:	490a      	ldr	r1, [pc, #40]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a36:	d105      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000

08005a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a62:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0203 	and.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d103      	bne.n	8005a86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
       ||
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d13f      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e03c      	b.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d00c      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x5a>
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d013      	beq.n	8005ac0 <RCCEx_PLLSAI1_Config+0x6c>
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d120      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a9c:	4b61      	ldr	r3, [pc, #388]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11d      	bne.n	8005ae4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aac:	e01a      	b.n	8005ae4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aae:	4b5d      	ldr	r3, [pc, #372]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d116      	bne.n	8005ae8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abe:	e013      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ac0:	4b58      	ldr	r3, [pc, #352]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10f      	bne.n	8005aec <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005acc:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005adc:	e006      	b.n	8005aec <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae2:	e004      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005aec:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005af4:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f023 0203 	bic.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4948      	ldr	r1, [pc, #288]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f040 8086 	bne.w	8005c1a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b0e:	4b45      	ldr	r3, [pc, #276]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a44      	ldr	r2, [pc, #272]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fe f853 	bl	8003bc4 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b20:	e009      	b.n	8005b36 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b22:	f7fe f84f 	bl	8003bc4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d902      	bls.n	8005b36 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	73fb      	strb	r3, [r7, #15]
        break;
 8005b34:	e005      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ef      	bne.n	8005b22 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d168      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d113      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4e:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	4b35      	ldr	r3, [pc, #212]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6892      	ldr	r2, [r2, #8]
 8005b5a:	0211      	lsls	r1, r2, #8
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	68d2      	ldr	r2, [r2, #12]
 8005b60:	06d2      	lsls	r2, r2, #27
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6852      	ldr	r2, [r2, #4]
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	0112      	lsls	r2, r2, #4
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	492d      	ldr	r1, [pc, #180]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]
 8005b74:	e02d      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d115      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b7c:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6892      	ldr	r2, [r2, #8]
 8005b88:	0211      	lsls	r1, r2, #8
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6912      	ldr	r2, [r2, #16]
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0552      	lsls	r2, r2, #21
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6852      	ldr	r2, [r2, #4]
 8005b9a:	3a01      	subs	r2, #1
 8005b9c:	0112      	lsls	r2, r2, #4
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	4920      	ldr	r1, [pc, #128]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
 8005ba6:	e014      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6892      	ldr	r2, [r2, #8]
 8005bb4:	0211      	lsls	r1, r2, #8
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6952      	ldr	r2, [r2, #20]
 8005bba:	0852      	lsrs	r2, r2, #1
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	0652      	lsls	r2, r2, #25
 8005bc0:	4311      	orrs	r1, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6852      	ldr	r2, [r2, #4]
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	0112      	lsls	r2, r2, #4
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	4915      	ldr	r1, [pc, #84]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bde:	f7fd fff1 	bl	8003bc4 <HAL_GetTick>
 8005be2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be4:	e009      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be6:	f7fd ffed 	bl	8003bc4 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d902      	bls.n	8005bfa <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8005bf8:	e005      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	4903      	ldr	r1, [pc, #12]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000
 8005c28:	07ff800f 	.word	0x07ff800f
 8005c2c:	ff9f800f 	.word	0xff9f800f
 8005c30:	f9ff800f 	.word	0xf9ff800f

08005c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c42:	4b70      	ldr	r3, [pc, #448]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c4e:	4b6d      	ldr	r3, [pc, #436]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0203 	and.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d103      	bne.n	8005c66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
       ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d13f      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e03c      	b.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d00c      	beq.n	8005c8e <RCCEx_PLLSAI2_Config+0x5a>
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d013      	beq.n	8005ca0 <RCCEx_PLLSAI2_Config+0x6c>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d120      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c7c:	4b61      	ldr	r3, [pc, #388]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11d      	bne.n	8005cc4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8c:	e01a      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c8e:	4b5d      	ldr	r3, [pc, #372]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d116      	bne.n	8005cc8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c9e:	e013      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ca0:	4b58      	ldr	r3, [pc, #352]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10f      	bne.n	8005ccc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cac:	4b55      	ldr	r3, [pc, #340]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cbc:	e006      	b.n	8005ccc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc2:	e004      	b.n	8005cce <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005cc4:	bf00      	nop
 8005cc6:	e002      	b.n	8005cce <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005ccc:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d108      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005cd4:	4b4b      	ldr	r3, [pc, #300]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f023 0203 	bic.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4948      	ldr	r1, [pc, #288]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f040 8086 	bne.w	8005dfa <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cee:	4b45      	ldr	r3, [pc, #276]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a44      	ldr	r2, [pc, #272]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfa:	f7fd ff63 	bl	8003bc4 <HAL_GetTick>
 8005cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d00:	e009      	b.n	8005d16 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d02:	f7fd ff5f 	bl	8003bc4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d902      	bls.n	8005d16 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	73fb      	strb	r3, [r7, #15]
        break;
 8005d14:	e005      	b.n	8005d22 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d16:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ef      	bne.n	8005d02 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d168      	bne.n	8005dfa <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d113      	bne.n	8005d56 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d2e:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	4b35      	ldr	r3, [pc, #212]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	0211      	lsls	r1, r2, #8
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68d2      	ldr	r2, [r2, #12]
 8005d40:	06d2      	lsls	r2, r2, #27
 8005d42:	4311      	orrs	r1, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6852      	ldr	r2, [r2, #4]
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	0112      	lsls	r2, r2, #4
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	492d      	ldr	r1, [pc, #180]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	614b      	str	r3, [r1, #20]
 8005d54:	e02d      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d115      	bne.n	8005d88 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d5c:	4b29      	ldr	r3, [pc, #164]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6892      	ldr	r2, [r2, #8]
 8005d68:	0211      	lsls	r1, r2, #8
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6912      	ldr	r2, [r2, #16]
 8005d6e:	0852      	lsrs	r2, r2, #1
 8005d70:	3a01      	subs	r2, #1
 8005d72:	0552      	lsls	r2, r2, #21
 8005d74:	4311      	orrs	r1, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6852      	ldr	r2, [r2, #4]
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	0112      	lsls	r2, r2, #4
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	4920      	ldr	r1, [pc, #128]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	614b      	str	r3, [r1, #20]
 8005d86:	e014      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6892      	ldr	r2, [r2, #8]
 8005d94:	0211      	lsls	r1, r2, #8
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6952      	ldr	r2, [r2, #20]
 8005d9a:	0852      	lsrs	r2, r2, #1
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	0652      	lsls	r2, r2, #25
 8005da0:	4311      	orrs	r1, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6852      	ldr	r2, [r2, #4]
 8005da6:	3a01      	subs	r2, #1
 8005da8:	0112      	lsls	r2, r2, #4
 8005daa:	430a      	orrs	r2, r1
 8005dac:	4915      	ldr	r1, [pc, #84]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fd ff01 	bl	8003bc4 <HAL_GetTick>
 8005dc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dc4:	e009      	b.n	8005dda <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dc6:	f7fd fefd 	bl	8003bc4 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d902      	bls.n	8005dda <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8005dd8:	e005      	b.n	8005de6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0ef      	beq.n	8005dc6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	4903      	ldr	r1, [pc, #12]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	07ff800f 	.word	0x07ff800f
 8005e0c:	ff9f800f 	.word	0xff9f800f
 8005e10:	f9ff800f 	.word	0xf9ff800f

08005e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e095      	b.n	8005f52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e36:	d009      	beq.n	8005e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	61da      	str	r2, [r3, #28]
 8005e3e:	e005      	b.n	8005e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fd fb92 	bl	8003590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e8c:	d902      	bls.n	8005e94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e002      	b.n	8005e9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_Init+0xa0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eac:	d002      	beq.n	8005eb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	ea42 0103 	orr.w	r1, r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	0c1b      	lsrs	r3, r3, #16
 8005f10:	f003 0204 	and.w	r2, r3, #4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f30:	ea42 0103 	orr.w	r1, r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b088      	sub	sp, #32
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_SPI_Transmit+0x22>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e158      	b.n	800622e <HAL_SPI_Transmit+0x2d4>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f84:	f7fd fe1e 	bl	8003bc4 <HAL_GetTick>
 8005f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f9e:	e13d      	b.n	800621c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_SPI_Transmit+0x52>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fb0:	e134      	b.n	800621c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	d10f      	bne.n	800601e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800601c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d007      	beq.n	800603c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006044:	d94b      	bls.n	80060de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_SPI_Transmit+0xfa>
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d13e      	bne.n	80060d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	881a      	ldrh	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	1c9a      	adds	r2, r3, #2
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006078:	e02b      	b.n	80060d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b02      	cmp	r3, #2
 8006086:	d112      	bne.n	80060ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ac:	e011      	b.n	80060d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ae:	f7fd fd89 	bl	8003bc4 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d803      	bhi.n	80060c6 <HAL_SPI_Transmit+0x16c>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d102      	bne.n	80060cc <HAL_SPI_Transmit+0x172>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060d0:	e0a4      	b.n	800621c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ce      	bne.n	800607a <HAL_SPI_Transmit+0x120>
 80060dc:	e07c      	b.n	80061d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_Transmit+0x192>
 80060e6:	8afb      	ldrh	r3, [r7, #22]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d170      	bne.n	80061ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d912      	bls.n	800611c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	881a      	ldrh	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	1c9a      	adds	r2, r3, #2
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b02      	subs	r3, #2
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	87da      	strh	r2, [r3, #62]	; 0x3e
 800611a:	e058      	b.n	80061ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	7812      	ldrb	r2, [r2, #0]
 8006128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006142:	e044      	b.n	80061ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d12b      	bne.n	80061aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	d912      	bls.n	8006182 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b02      	subs	r3, #2
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006180:	e025      	b.n	80061ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061a8:	e011      	b.n	80061ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061aa:	f7fd fd0b 	bl	8003bc4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d803      	bhi.n	80061c2 <HAL_SPI_Transmit+0x268>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d102      	bne.n	80061c8 <HAL_SPI_Transmit+0x26e>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061cc:	e026      	b.n	800621c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1b5      	bne.n	8006144 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f941 	bl	8006464 <SPI_EndRxTxTransaction>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e000      	b.n	800621c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800621a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800622c:	7ffb      	ldrb	r3, [r7, #31]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006248:	f7fd fcbc 	bl	8003bc4 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4413      	add	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006258:	f7fd fcb4 	bl	8003bc4 <HAL_GetTick>
 800625c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800625e:	4b39      	ldr	r3, [pc, #228]	; (8006344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	015b      	lsls	r3, r3, #5
 8006264:	0d1b      	lsrs	r3, r3, #20
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	fb02 f303 	mul.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	e054      	b.n	800631a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d050      	beq.n	800631a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006278:	f7fd fca4 	bl	8003bc4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	429a      	cmp	r2, r3
 8006286:	d902      	bls.n	800628e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13d      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800629c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d111      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d004      	beq.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d107      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d10f      	bne.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e017      	b.n	800633a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3b01      	subs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	429a      	cmp	r2, r3
 8006336:	d19b      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000008 	.word	0x20000008

08006348 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006356:	f7fd fc35 	bl	8003bc4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	4413      	add	r3, r2
 8006364:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006366:	f7fd fc2d 	bl	8003bc4 <HAL_GetTick>
 800636a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800636c:	4b3c      	ldr	r3, [pc, #240]	; (8006460 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	00da      	lsls	r2, r3, #3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	0d1b      	lsrs	r3, r3, #20
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006384:	e05f      	b.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800638c:	d106      	bne.n	800639c <SPI_WaitFifoStateUntilTimeout+0x54>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d050      	beq.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a4:	f7fd fc0e 	bl	8003bc4 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d902      	bls.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x72>
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d13d      	bne.n	8006436 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d2:	d111      	bne.n	80063f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063dc:	d004      	beq.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e6:	d107      	bne.n	80063f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006400:	d10f      	bne.n	8006422 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e010      	b.n	8006458 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3b01      	subs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d197      	bne.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000008 	.word	0x20000008

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff63 	bl	8006348 <SPI_WaitFifoStateUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e027      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fec8 	bl	8006238 <SPI_WaitFlagStateUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e014      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff3c 	bl	8006348 <SPI_WaitFifoStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e000      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e049      	b.n	8006596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fd f89c 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f000 feaa 	bl	8007288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d001      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e04f      	b.n	8006658 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a23      	ldr	r2, [pc, #140]	; (8006664 <HAL_TIM_Base_Start_IT+0xc4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01d      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d018      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_TIM_Base_Start_IT+0xc8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_TIM_Base_Start_IT+0xcc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_TIM_Base_Start_IT+0xd0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d009      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <HAL_TIM_Base_Start_IT+0xd4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <HAL_TIM_Base_Start_IT+0xd8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d115      	bne.n	8006642 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	4b17      	ldr	r3, [pc, #92]	; (800667c <HAL_TIM_Base_Start_IT+0xdc>)
 800661e:	4013      	ands	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b06      	cmp	r3, #6
 8006626:	d015      	beq.n	8006654 <HAL_TIM_Base_Start_IT+0xb4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d011      	beq.n	8006654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	e008      	b.n	8006654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e000      	b.n	8006656 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	00010007 	.word	0x00010007

08006680 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	f241 1311 	movw	r3, #4369	; 0x1111
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10f      	bne.n	80066c8 <HAL_TIM_Base_Stop_IT+0x48>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f240 4344 	movw	r3, #1092	; 0x444
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_Base_Stop_IT+0x48>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e049      	b.n	8006784 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f841 	bl	800678c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f000 fdb3 	bl	8007288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_TIM_PWM_Start+0x24>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	bf14      	ite	ne
 80067bc:	2301      	movne	r3, #1
 80067be:	2300      	moveq	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e03c      	b.n	800683e <HAL_TIM_PWM_Start+0x9e>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d109      	bne.n	80067de <HAL_TIM_PWM_Start+0x3e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e02f      	b.n	800683e <HAL_TIM_PWM_Start+0x9e>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d109      	bne.n	80067f8 <HAL_TIM_PWM_Start+0x58>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e022      	b.n	800683e <HAL_TIM_PWM_Start+0x9e>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d109      	bne.n	8006812 <HAL_TIM_PWM_Start+0x72>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e015      	b.n	800683e <HAL_TIM_PWM_Start+0x9e>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d109      	bne.n	800682c <HAL_TIM_PWM_Start+0x8c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e008      	b.n	800683e <HAL_TIM_PWM_Start+0x9e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e09c      	b.n	8006980 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xb6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006854:	e023      	b.n	800689e <HAL_TIM_PWM_Start+0xfe>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b04      	cmp	r3, #4
 800685a:	d104      	bne.n	8006866 <HAL_TIM_PWM_Start+0xc6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006864:	e01b      	b.n	800689e <HAL_TIM_PWM_Start+0xfe>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d104      	bne.n	8006876 <HAL_TIM_PWM_Start+0xd6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006874:	e013      	b.n	800689e <HAL_TIM_PWM_Start+0xfe>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b0c      	cmp	r3, #12
 800687a:	d104      	bne.n	8006886 <HAL_TIM_PWM_Start+0xe6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006884:	e00b      	b.n	800689e <HAL_TIM_PWM_Start+0xfe>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b10      	cmp	r3, #16
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Start+0xf6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006894:	e003      	b.n	800689e <HAL_TIM_PWM_Start+0xfe>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f8f8 	bl	8007a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a35      	ldr	r2, [pc, #212]	; (8006988 <HAL_TIM_PWM_Start+0x1e8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_TIM_PWM_Start+0x13e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a34      	ldr	r2, [pc, #208]	; (800698c <HAL_TIM_PWM_Start+0x1ec>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIM_PWM_Start+0x13e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a32      	ldr	r2, [pc, #200]	; (8006990 <HAL_TIM_PWM_Start+0x1f0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIM_PWM_Start+0x13e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a31      	ldr	r2, [pc, #196]	; (8006994 <HAL_TIM_PWM_Start+0x1f4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIM_PWM_Start+0x13e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <HAL_TIM_PWM_Start+0x1f8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x142>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_TIM_PWM_Start+0x144>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <HAL_TIM_PWM_Start+0x1e8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d01d      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d018      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a22      	ldr	r2, [pc, #136]	; (800699c <HAL_TIM_PWM_Start+0x1fc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <HAL_TIM_PWM_Start+0x200>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <HAL_TIM_PWM_Start+0x204>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_TIM_PWM_Start+0x1ec>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIM_PWM_Start+0x19e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <HAL_TIM_PWM_Start+0x1f0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d115      	bne.n	800696a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_TIM_PWM_Start+0x208>)
 8006946:	4013      	ands	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b06      	cmp	r3, #6
 800694e:	d015      	beq.n	800697c <HAL_TIM_PWM_Start+0x1dc>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006956:	d011      	beq.n	800697c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006968:	e008      	b.n	800697c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e000      	b.n	800697e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40013400 	.word	0x40013400
 8006990:	40014000 	.word	0x40014000
 8006994:	40014400 	.word	0x40014400
 8006998:	40014800 	.word	0x40014800
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	00010007 	.word	0x00010007

080069ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 f86c 	bl	8007a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3e      	ldr	r2, [pc, #248]	; (8006ac4 <HAL_TIM_PWM_Stop+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3d      	ldr	r2, [pc, #244]	; (8006ac8 <HAL_TIM_PWM_Stop+0x11c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3b      	ldr	r2, [pc, #236]	; (8006acc <HAL_TIM_PWM_Stop+0x120>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3a      	ldr	r2, [pc, #232]	; (8006ad0 <HAL_TIM_PWM_Stop+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a38      	ldr	r2, [pc, #224]	; (8006ad4 <HAL_TIM_PWM_Stop+0x128>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_Stop+0x4e>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_TIM_PWM_Stop+0x50>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10f      	bne.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	f240 4344 	movw	r3, #1092	; 0x444
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10f      	bne.n	8006a60 <HAL_TIM_PWM_Stop+0xb4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	f240 4344 	movw	r3, #1092	; 0x444
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_PWM_Stop+0xb4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_TIM_PWM_Stop+0xc4>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6e:	e023      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d104      	bne.n	8006a80 <HAL_TIM_PWM_Stop+0xd4>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a7e:	e01b      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d104      	bne.n	8006a90 <HAL_TIM_PWM_Stop+0xe4>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8e:	e013      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b0c      	cmp	r3, #12
 8006a94:	d104      	bne.n	8006aa0 <HAL_TIM_PWM_Stop+0xf4>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a9e:	e00b      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d104      	bne.n	8006ab0 <HAL_TIM_PWM_Stop+0x104>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aae:	e003      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e041      	b.n	8006b70 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fc fd87 	bl	8003614 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fbb5 	bl	8007288 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0208 	bic.w	r2, r2, #8
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d108      	bne.n	8006bba <HAL_TIM_OnePulse_Start+0x42>
   || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d105      	bne.n	8006bba <HAL_TIM_OnePulse_Start+0x42>
   || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d102      	bne.n	8006bba <HAL_TIM_OnePulse_Start+0x42>
   || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb4:	7b3b      	ldrb	r3, [r7, #12]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e044      	b.n	8006c48 <HAL_TIM_OnePulse_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2201      	movs	r2, #1
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 ff58 	bl	8007a9c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 ff51 	bl	8007a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <HAL_TIM_OnePulse_Start+0xd8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_TIM_OnePulse_Start+0xb4>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <HAL_TIM_OnePulse_Start+0xdc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIM_OnePulse_Start+0xb4>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a11      	ldr	r2, [pc, #68]	; (8006c58 <HAL_TIM_OnePulse_Start+0xe0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIM_OnePulse_Start+0xb4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0f      	ldr	r2, [pc, #60]	; (8006c5c <HAL_TIM_OnePulse_Start+0xe4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_OnePulse_Start+0xb4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_TIM_OnePulse_Start+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_OnePulse_Start+0xb8>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_OnePulse_Start+0xba>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <HAL_TIM_OnePulse_Start+0xce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800

08006c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d122      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d11b      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0202 	mvn.w	r2, #2
 8006c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 facf 	bl	800724a <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fac1 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fad2 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d122      	bne.n	8006d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d11b      	bne.n	8006d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0204 	mvn.w	r2, #4
 8006ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 faa5 	bl	800724a <HAL_TIM_IC_CaptureCallback>
 8006d00:	e005      	b.n	8006d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa97 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 faa8 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d122      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d11b      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0208 	mvn.w	r2, #8
 8006d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa7b 	bl	800724a <HAL_TIM_IC_CaptureCallback>
 8006d54:	e005      	b.n	8006d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa6d 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fa7e 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d122      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d11b      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0210 	mvn.w	r2, #16
 8006d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2208      	movs	r2, #8
 8006d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa51 	bl	800724a <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa43 	bl	8007236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa54 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d10e      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0201 	mvn.w	r2, #1
 8006de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fc fa88 	bl	80032f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d10e      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e00:	2b80      	cmp	r3, #128	; 0x80
 8006e02:	d107      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fefc 	bl	8007c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d10e      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2e:	2b80      	cmp	r3, #128	; 0x80
 8006e30:	d107      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 feef 	bl	8007c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d10e      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d107      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fa02 	bl	8007272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d10e      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d107      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f06f 0220 	mvn.w	r2, #32
 8006e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 feaf 	bl	8007bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0fd      	b.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x216>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b14      	cmp	r3, #20
 8006eca:	f200 80f0 	bhi.w	80070ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	080070af 	.word	0x080070af
 8006edc:	080070af 	.word	0x080070af
 8006ee0:	080070af 	.word	0x080070af
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	080070af 	.word	0x080070af
 8006eec:	080070af 	.word	0x080070af
 8006ef0:	080070af 	.word	0x080070af
 8006ef4:	08006fab 	.word	0x08006fab
 8006ef8:	080070af 	.word	0x080070af
 8006efc:	080070af 	.word	0x080070af
 8006f00:	080070af 	.word	0x080070af
 8006f04:	08006feb 	.word	0x08006feb
 8006f08:	080070af 	.word	0x080070af
 8006f0c:	080070af 	.word	0x080070af
 8006f10:	080070af 	.word	0x080070af
 8006f14:	0800702d 	.word	0x0800702d
 8006f18:	080070af 	.word	0x080070af
 8006f1c:	080070af 	.word	0x080070af
 8006f20:	080070af 	.word	0x080070af
 8006f24:	0800706d 	.word	0x0800706d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fa44 	bl	80073bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0208 	orr.w	r2, r2, #8
 8006f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0204 	bic.w	r2, r2, #4
 8006f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6999      	ldr	r1, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	619a      	str	r2, [r3, #24]
      break;
 8006f66:	e0a3      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fab4 	bl	80074dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6999      	ldr	r1, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	021a      	lsls	r2, r3, #8
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	619a      	str	r2, [r3, #24]
      break;
 8006fa8:	e082      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fb1d 	bl	80075f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0208 	orr.w	r2, r2, #8
 8006fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0204 	bic.w	r2, r2, #4
 8006fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69d9      	ldr	r1, [r3, #28]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	61da      	str	r2, [r3, #28]
      break;
 8006fe8:	e062      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fb85 	bl	8007700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69d9      	ldr	r1, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	021a      	lsls	r2, r3, #8
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	61da      	str	r2, [r3, #28]
      break;
 800702a:	e041      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fbce 	bl	80077d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0208 	orr.w	r2, r2, #8
 8007046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0204 	bic.w	r2, r2, #4
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800706a:	e021      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fc12 	bl	800789c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070ac:	e000      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80070ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop

080070c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_TIM_ConfigClockSource+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e0a8      	b.n	800722e <HAL_TIM_ConfigClockSource+0x16a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d067      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x124>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d80b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x70>
 800711c:	2b10      	cmp	r3, #16
 800711e:	d073      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x144>
 8007120:	2b10      	cmp	r3, #16
 8007122:	d802      	bhi.n	800712a <HAL_TIM_ConfigClockSource+0x66>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d06f      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007128:	e078      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800712a:	2b20      	cmp	r3, #32
 800712c:	d06c      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x144>
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d06a      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007132:	e073      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d00d      	beq.n	8007154 <HAL_TIM_ConfigClockSource+0x90>
 8007138:	2b70      	cmp	r3, #112	; 0x70
 800713a:	d804      	bhi.n	8007146 <HAL_TIM_ConfigClockSource+0x82>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d033      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0xe4>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d041      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007144:	e06a      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d066      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x156>
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d017      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007152:	e063      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f000 fc7a 	bl	8007a5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007176:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	609a      	str	r2, [r3, #8]
      break;
 8007180:	e04c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6899      	ldr	r1, [r3, #8]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f000 fc63 	bl	8007a5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a4:	609a      	str	r2, [r3, #8]
      break;
 80071a6:	e039      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f000 fbd7 	bl	8007968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2150      	movs	r1, #80	; 0x50
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc30 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 80071c6:	e029      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f000 fbf6 	bl	80079c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2160      	movs	r1, #96	; 0x60
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc20 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 80071e6:	e019      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f000 fbb7 	bl	8007968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fc10 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 8007206:	e009      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f000 fc07 	bl	8007a26 <TIM_ITRx_SetConfig>
        break;
 8007218:	e000      	b.n	800721c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800721a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a40      	ldr	r2, [pc, #256]	; (800739c <TIM_Base_SetConfig+0x114>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d013      	beq.n	80072c8 <TIM_Base_SetConfig+0x40>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a6:	d00f      	beq.n	80072c8 <TIM_Base_SetConfig+0x40>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a3d      	ldr	r2, [pc, #244]	; (80073a0 <TIM_Base_SetConfig+0x118>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00b      	beq.n	80072c8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a3c      	ldr	r2, [pc, #240]	; (80073a4 <TIM_Base_SetConfig+0x11c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d007      	beq.n	80072c8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3b      	ldr	r2, [pc, #236]	; (80073a8 <TIM_Base_SetConfig+0x120>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3a      	ldr	r2, [pc, #232]	; (80073ac <TIM_Base_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d108      	bne.n	80072da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2f      	ldr	r2, [pc, #188]	; (800739c <TIM_Base_SetConfig+0x114>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d01f      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e8:	d01b      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2c      	ldr	r2, [pc, #176]	; (80073a0 <TIM_Base_SetConfig+0x118>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d017      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a2b      	ldr	r2, [pc, #172]	; (80073a4 <TIM_Base_SetConfig+0x11c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2a      	ldr	r2, [pc, #168]	; (80073a8 <TIM_Base_SetConfig+0x120>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00f      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a29      	ldr	r2, [pc, #164]	; (80073ac <TIM_Base_SetConfig+0x124>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00b      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a28      	ldr	r2, [pc, #160]	; (80073b0 <TIM_Base_SetConfig+0x128>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d007      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a27      	ldr	r2, [pc, #156]	; (80073b4 <TIM_Base_SetConfig+0x12c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_Base_SetConfig+0x9a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a26      	ldr	r2, [pc, #152]	; (80073b8 <TIM_Base_SetConfig+0x130>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d108      	bne.n	8007334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a10      	ldr	r2, [pc, #64]	; (800739c <TIM_Base_SetConfig+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00f      	beq.n	8007380 <TIM_Base_SetConfig+0xf8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a12      	ldr	r2, [pc, #72]	; (80073ac <TIM_Base_SetConfig+0x124>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_Base_SetConfig+0xf8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a11      	ldr	r2, [pc, #68]	; (80073b0 <TIM_Base_SetConfig+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_Base_SetConfig+0xf8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <TIM_Base_SetConfig+0x12c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_Base_SetConfig+0xf8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a0f      	ldr	r2, [pc, #60]	; (80073b8 <TIM_Base_SetConfig+0x130>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d103      	bne.n	8007388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	615a      	str	r2, [r3, #20]
}
 800738e:	bf00      	nop
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40000c00 	.word	0x40000c00
 80073ac:	40013400 	.word	0x40013400
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800

080073bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 0302 	bic.w	r3, r3, #2
 8007408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a2c      	ldr	r2, [pc, #176]	; (80074c8 <TIM_OC1_SetConfig+0x10c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <TIM_OC1_SetConfig+0x80>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a2b      	ldr	r2, [pc, #172]	; (80074cc <TIM_OC1_SetConfig+0x110>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00b      	beq.n	800743c <TIM_OC1_SetConfig+0x80>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a2a      	ldr	r2, [pc, #168]	; (80074d0 <TIM_OC1_SetConfig+0x114>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_OC1_SetConfig+0x80>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a29      	ldr	r2, [pc, #164]	; (80074d4 <TIM_OC1_SetConfig+0x118>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC1_SetConfig+0x80>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a28      	ldr	r2, [pc, #160]	; (80074d8 <TIM_OC1_SetConfig+0x11c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0308 	bic.w	r3, r3, #8
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <TIM_OC1_SetConfig+0x10c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00f      	beq.n	800747e <TIM_OC1_SetConfig+0xc2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1a      	ldr	r2, [pc, #104]	; (80074cc <TIM_OC1_SetConfig+0x110>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00b      	beq.n	800747e <TIM_OC1_SetConfig+0xc2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <TIM_OC1_SetConfig+0x114>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_OC1_SetConfig+0xc2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <TIM_OC1_SetConfig+0x118>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC1_SetConfig+0xc2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <TIM_OC1_SetConfig+0x11c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d111      	bne.n	80074a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	621a      	str	r2, [r3, #32]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800

080074dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f023 0210 	bic.w	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f023 0320 	bic.w	r3, r3, #32
 800752a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a28      	ldr	r2, [pc, #160]	; (80075dc <TIM_OC2_SetConfig+0x100>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_OC2_SetConfig+0x6c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a27      	ldr	r2, [pc, #156]	; (80075e0 <TIM_OC2_SetConfig+0x104>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d10d      	bne.n	8007564 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <TIM_OC2_SetConfig+0x100>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00f      	beq.n	800758c <TIM_OC2_SetConfig+0xb0>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <TIM_OC2_SetConfig+0x104>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_OC2_SetConfig+0xb0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <TIM_OC2_SetConfig+0x108>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_OC2_SetConfig+0xb0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a1a      	ldr	r2, [pc, #104]	; (80075e8 <TIM_OC2_SetConfig+0x10c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_OC2_SetConfig+0xb0>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a19      	ldr	r2, [pc, #100]	; (80075ec <TIM_OC2_SetConfig+0x110>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d113      	bne.n	80075b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800759a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800

080075f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800763c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a27      	ldr	r2, [pc, #156]	; (80076ec <TIM_OC3_SetConfig+0xfc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_OC3_SetConfig+0x6a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a26      	ldr	r2, [pc, #152]	; (80076f0 <TIM_OC3_SetConfig+0x100>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d10d      	bne.n	8007676 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <TIM_OC3_SetConfig+0xfc>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00f      	beq.n	800769e <TIM_OC3_SetConfig+0xae>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <TIM_OC3_SetConfig+0x100>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00b      	beq.n	800769e <TIM_OC3_SetConfig+0xae>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <TIM_OC3_SetConfig+0x104>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d007      	beq.n	800769e <TIM_OC3_SetConfig+0xae>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <TIM_OC3_SetConfig+0x108>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_OC3_SetConfig+0xae>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <TIM_OC3_SetConfig+0x10c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d113      	bne.n	80076c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800774e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <TIM_OC4_SetConfig+0xc0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00f      	beq.n	8007784 <TIM_OC4_SetConfig+0x84>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <TIM_OC4_SetConfig+0xc4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00b      	beq.n	8007784 <TIM_OC4_SetConfig+0x84>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <TIM_OC4_SetConfig+0xc8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d007      	beq.n	8007784 <TIM_OC4_SetConfig+0x84>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <TIM_OC4_SetConfig+0xcc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_OC4_SetConfig+0x84>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a14      	ldr	r2, [pc, #80]	; (80077d0 <TIM_OC4_SetConfig+0xd0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d109      	bne.n	8007798 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	019b      	lsls	r3, r3, #6
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800

080077d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	041b      	lsls	r3, r3, #16
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a17      	ldr	r2, [pc, #92]	; (8007888 <TIM_OC5_SetConfig+0xb4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00f      	beq.n	800784e <TIM_OC5_SetConfig+0x7a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a16      	ldr	r2, [pc, #88]	; (800788c <TIM_OC5_SetConfig+0xb8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00b      	beq.n	800784e <TIM_OC5_SetConfig+0x7a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a15      	ldr	r2, [pc, #84]	; (8007890 <TIM_OC5_SetConfig+0xbc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d007      	beq.n	800784e <TIM_OC5_SetConfig+0x7a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a14      	ldr	r2, [pc, #80]	; (8007894 <TIM_OC5_SetConfig+0xc0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d003      	beq.n	800784e <TIM_OC5_SetConfig+0x7a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a13      	ldr	r2, [pc, #76]	; (8007898 <TIM_OC5_SetConfig+0xc4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d109      	bne.n	8007862 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	621a      	str	r2, [r3, #32]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a18      	ldr	r2, [pc, #96]	; (8007954 <TIM_OC6_SetConfig+0xb8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00f      	beq.n	8007918 <TIM_OC6_SetConfig+0x7c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <TIM_OC6_SetConfig+0xbc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_OC6_SetConfig+0x7c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC6_SetConfig+0xc0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_OC6_SetConfig+0x7c>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <TIM_OC6_SetConfig+0xc4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_OC6_SetConfig+0x7c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a14      	ldr	r2, [pc, #80]	; (8007964 <TIM_OC6_SetConfig+0xc8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d109      	bne.n	800792c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800791e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	029b      	lsls	r3, r3, #10
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	621a      	str	r2, [r3, #32]
}
 8007946:	bf00      	nop
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40013400 	.word	0x40013400
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f023 0201 	bic.w	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f023 030a 	bic.w	r3, r3, #10
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0210 	bic.w	r2, r3, #16
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	031b      	lsls	r3, r3, #12
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f043 0307 	orr.w	r3, r3, #7
 8007a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	609a      	str	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	2201      	movs	r2, #1
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	43db      	mvns	r3, r3
 8007abe:	401a      	ands	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e068      	b.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2e      	ldr	r2, [pc, #184]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d108      	bne.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01d      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b72:	d018      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d013      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	40014000 	.word	0x40014000

08007bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e042      	b.n	8007ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fb fb8b 	bl	8003374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	; 0x24
 8007c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8c4 	bl	8007e04 <UART_SetConfig>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e022      	b.n	8007ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb8a 	bl	80083a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc11 	bl	80084ec <UART_CheckIdleState>
 8007cca:	4603      	mov	r3, r0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	f040 8084 	bne.w	8007df8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <HAL_UART_Transmit+0x28>
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e07c      	b.n	8007dfa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Transmit+0x3a>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e075      	b.n	8007dfa <HAL_UART_Transmit+0x126>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2221      	movs	r2, #33	; 0x21
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007d26:	f7fb ff4d 	bl	8003bc4 <HAL_GetTick>
 8007d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d44:	d108      	bne.n	8007d58 <HAL_UART_Transmit+0x84>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	e003      	b.n	8007d60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007d68:	e02d      	b.n	8007dc6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fc01 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e03a      	b.n	8007dfa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	881a      	ldrh	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d96:	b292      	uxth	r2, r2
 8007d98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e008      	b.n	8007db4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	b292      	uxth	r2, r2
 8007dac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	3301      	adds	r3, #1
 8007db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1cb      	bne.n	8007d6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2140      	movs	r1, #64	; 0x40
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fbcd 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e006      	b.n	8007dfa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e000      	b.n	8007dfa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4bb1      	ldr	r3, [pc, #708]	; (8008100 <UART_SetConfig+0x2fc>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	69f9      	ldr	r1, [r7, #28]
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4aa6      	ldr	r2, [pc, #664]	; (8008104 <UART_SetConfig+0x300>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	69f9      	ldr	r1, [r7, #28]
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	f023 010f 	bic.w	r1, r3, #15
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a97      	ldr	r2, [pc, #604]	; (8008108 <UART_SetConfig+0x304>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d121      	bne.n	8007ef4 <UART_SetConfig+0xf0>
 8007eb0:	4b96      	ldr	r3, [pc, #600]	; (800810c <UART_SetConfig+0x308>)
 8007eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d816      	bhi.n	8007eec <UART_SetConfig+0xe8>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <UART_SetConfig+0xc0>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	08007ee1 	.word	0x08007ee1
 8007ecc:	08007edb 	.word	0x08007edb
 8007ed0:	08007ee7 	.word	0x08007ee7
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	76fb      	strb	r3, [r7, #27]
 8007ed8:	e0e8      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007eda:	2302      	movs	r3, #2
 8007edc:	76fb      	strb	r3, [r7, #27]
 8007ede:	e0e5      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	76fb      	strb	r3, [r7, #27]
 8007ee4:	e0e2      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	76fb      	strb	r3, [r7, #27]
 8007eea:	e0df      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007eec:	2310      	movs	r3, #16
 8007eee:	76fb      	strb	r3, [r7, #27]
 8007ef0:	bf00      	nop
 8007ef2:	e0db      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a85      	ldr	r2, [pc, #532]	; (8008110 <UART_SetConfig+0x30c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d134      	bne.n	8007f68 <UART_SetConfig+0x164>
 8007efe:	4b83      	ldr	r3, [pc, #524]	; (800810c <UART_SetConfig+0x308>)
 8007f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f04:	f003 030c 	and.w	r3, r3, #12
 8007f08:	2b0c      	cmp	r3, #12
 8007f0a:	d829      	bhi.n	8007f60 <UART_SetConfig+0x15c>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x110>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f49 	.word	0x08007f49
 8007f18:	08007f61 	.word	0x08007f61
 8007f1c:	08007f61 	.word	0x08007f61
 8007f20:	08007f61 	.word	0x08007f61
 8007f24:	08007f55 	.word	0x08007f55
 8007f28:	08007f61 	.word	0x08007f61
 8007f2c:	08007f61 	.word	0x08007f61
 8007f30:	08007f61 	.word	0x08007f61
 8007f34:	08007f4f 	.word	0x08007f4f
 8007f38:	08007f61 	.word	0x08007f61
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f61 	.word	0x08007f61
 8007f44:	08007f5b 	.word	0x08007f5b
 8007f48:	2300      	movs	r3, #0
 8007f4a:	76fb      	strb	r3, [r7, #27]
 8007f4c:	e0ae      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	76fb      	strb	r3, [r7, #27]
 8007f52:	e0ab      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f54:	2304      	movs	r3, #4
 8007f56:	76fb      	strb	r3, [r7, #27]
 8007f58:	e0a8      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	76fb      	strb	r3, [r7, #27]
 8007f5e:	e0a5      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f60:	2310      	movs	r3, #16
 8007f62:	76fb      	strb	r3, [r7, #27]
 8007f64:	bf00      	nop
 8007f66:	e0a1      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a69      	ldr	r2, [pc, #420]	; (8008114 <UART_SetConfig+0x310>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d120      	bne.n	8007fb4 <UART_SetConfig+0x1b0>
 8007f72:	4b66      	ldr	r3, [pc, #408]	; (800810c <UART_SetConfig+0x308>)
 8007f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d00f      	beq.n	8007fa0 <UART_SetConfig+0x19c>
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d802      	bhi.n	8007f8a <UART_SetConfig+0x186>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <UART_SetConfig+0x190>
 8007f88:	e010      	b.n	8007fac <UART_SetConfig+0x1a8>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d005      	beq.n	8007f9a <UART_SetConfig+0x196>
 8007f8e:	2b30      	cmp	r3, #48	; 0x30
 8007f90:	d009      	beq.n	8007fa6 <UART_SetConfig+0x1a2>
 8007f92:	e00b      	b.n	8007fac <UART_SetConfig+0x1a8>
 8007f94:	2300      	movs	r3, #0
 8007f96:	76fb      	strb	r3, [r7, #27]
 8007f98:	e088      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	76fb      	strb	r3, [r7, #27]
 8007f9e:	e085      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	76fb      	strb	r3, [r7, #27]
 8007fa4:	e082      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	76fb      	strb	r3, [r7, #27]
 8007faa:	e07f      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fac:	2310      	movs	r3, #16
 8007fae:	76fb      	strb	r3, [r7, #27]
 8007fb0:	bf00      	nop
 8007fb2:	e07b      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a57      	ldr	r2, [pc, #348]	; (8008118 <UART_SetConfig+0x314>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d120      	bne.n	8008000 <UART_SetConfig+0x1fc>
 8007fbe:	4b53      	ldr	r3, [pc, #332]	; (800810c <UART_SetConfig+0x308>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d00f      	beq.n	8007fec <UART_SetConfig+0x1e8>
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d802      	bhi.n	8007fd6 <UART_SetConfig+0x1d2>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <UART_SetConfig+0x1dc>
 8007fd4:	e010      	b.n	8007ff8 <UART_SetConfig+0x1f4>
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d005      	beq.n	8007fe6 <UART_SetConfig+0x1e2>
 8007fda:	2bc0      	cmp	r3, #192	; 0xc0
 8007fdc:	d009      	beq.n	8007ff2 <UART_SetConfig+0x1ee>
 8007fde:	e00b      	b.n	8007ff8 <UART_SetConfig+0x1f4>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	76fb      	strb	r3, [r7, #27]
 8007fe4:	e062      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	76fb      	strb	r3, [r7, #27]
 8007fea:	e05f      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007fec:	2304      	movs	r3, #4
 8007fee:	76fb      	strb	r3, [r7, #27]
 8007ff0:	e05c      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007ff2:	2308      	movs	r3, #8
 8007ff4:	76fb      	strb	r3, [r7, #27]
 8007ff6:	e059      	b.n	80080ac <UART_SetConfig+0x2a8>
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	76fb      	strb	r3, [r7, #27]
 8007ffc:	bf00      	nop
 8007ffe:	e055      	b.n	80080ac <UART_SetConfig+0x2a8>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a45      	ldr	r2, [pc, #276]	; (800811c <UART_SetConfig+0x318>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d124      	bne.n	8008054 <UART_SetConfig+0x250>
 800800a:	4b40      	ldr	r3, [pc, #256]	; (800810c <UART_SetConfig+0x308>)
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008018:	d012      	beq.n	8008040 <UART_SetConfig+0x23c>
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d802      	bhi.n	8008026 <UART_SetConfig+0x222>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <UART_SetConfig+0x230>
 8008024:	e012      	b.n	800804c <UART_SetConfig+0x248>
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	d006      	beq.n	800803a <UART_SetConfig+0x236>
 800802c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008030:	d009      	beq.n	8008046 <UART_SetConfig+0x242>
 8008032:	e00b      	b.n	800804c <UART_SetConfig+0x248>
 8008034:	2300      	movs	r3, #0
 8008036:	76fb      	strb	r3, [r7, #27]
 8008038:	e038      	b.n	80080ac <UART_SetConfig+0x2a8>
 800803a:	2302      	movs	r3, #2
 800803c:	76fb      	strb	r3, [r7, #27]
 800803e:	e035      	b.n	80080ac <UART_SetConfig+0x2a8>
 8008040:	2304      	movs	r3, #4
 8008042:	76fb      	strb	r3, [r7, #27]
 8008044:	e032      	b.n	80080ac <UART_SetConfig+0x2a8>
 8008046:	2308      	movs	r3, #8
 8008048:	76fb      	strb	r3, [r7, #27]
 800804a:	e02f      	b.n	80080ac <UART_SetConfig+0x2a8>
 800804c:	2310      	movs	r3, #16
 800804e:	76fb      	strb	r3, [r7, #27]
 8008050:	bf00      	nop
 8008052:	e02b      	b.n	80080ac <UART_SetConfig+0x2a8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a2a      	ldr	r2, [pc, #168]	; (8008104 <UART_SetConfig+0x300>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d124      	bne.n	80080a8 <UART_SetConfig+0x2a4>
 800805e:	4b2b      	ldr	r3, [pc, #172]	; (800810c <UART_SetConfig+0x308>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806c:	d012      	beq.n	8008094 <UART_SetConfig+0x290>
 800806e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008072:	d802      	bhi.n	800807a <UART_SetConfig+0x276>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <UART_SetConfig+0x284>
 8008078:	e012      	b.n	80080a0 <UART_SetConfig+0x29c>
 800807a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807e:	d006      	beq.n	800808e <UART_SetConfig+0x28a>
 8008080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008084:	d009      	beq.n	800809a <UART_SetConfig+0x296>
 8008086:	e00b      	b.n	80080a0 <UART_SetConfig+0x29c>
 8008088:	2300      	movs	r3, #0
 800808a:	76fb      	strb	r3, [r7, #27]
 800808c:	e00e      	b.n	80080ac <UART_SetConfig+0x2a8>
 800808e:	2302      	movs	r3, #2
 8008090:	76fb      	strb	r3, [r7, #27]
 8008092:	e00b      	b.n	80080ac <UART_SetConfig+0x2a8>
 8008094:	2304      	movs	r3, #4
 8008096:	76fb      	strb	r3, [r7, #27]
 8008098:	e008      	b.n	80080ac <UART_SetConfig+0x2a8>
 800809a:	2308      	movs	r3, #8
 800809c:	76fb      	strb	r3, [r7, #27]
 800809e:	e005      	b.n	80080ac <UART_SetConfig+0x2a8>
 80080a0:	2310      	movs	r3, #16
 80080a2:	76fb      	strb	r3, [r7, #27]
 80080a4:	bf00      	nop
 80080a6:	e001      	b.n	80080ac <UART_SetConfig+0x2a8>
 80080a8:	2310      	movs	r3, #16
 80080aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a14      	ldr	r2, [pc, #80]	; (8008104 <UART_SetConfig+0x300>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f040 80a1 	bne.w	80081fa <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080b8:	7efb      	ldrb	r3, [r7, #27]
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d836      	bhi.n	800812c <UART_SetConfig+0x328>
 80080be:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <UART_SetConfig+0x2c0>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	0800812d 	.word	0x0800812d
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	0800812d 	.word	0x0800812d
 80080d4:	080080f7 	.word	0x080080f7
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	0800812d 	.word	0x0800812d
 80080e4:	08008125 	.word	0x08008125
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e8:	f7fd f86c 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80080ec:	6178      	str	r0, [r7, #20]
        break;
 80080ee:	e022      	b.n	8008136 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <UART_SetConfig+0x31c>)
 80080f2:	617b      	str	r3, [r7, #20]
        break;
 80080f4:	e01f      	b.n	8008136 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f6:	f7fc ffcf 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 80080fa:	6178      	str	r0, [r7, #20]
        break;
 80080fc:	e01b      	b.n	8008136 <UART_SetConfig+0x332>
 80080fe:	bf00      	nop
 8008100:	cfff69f3 	.word	0xcfff69f3
 8008104:	40008000 	.word	0x40008000
 8008108:	40013800 	.word	0x40013800
 800810c:	40021000 	.word	0x40021000
 8008110:	40004400 	.word	0x40004400
 8008114:	40004800 	.word	0x40004800
 8008118:	40004c00 	.word	0x40004c00
 800811c:	40005000 	.word	0x40005000
 8008120:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008128:	617b      	str	r3, [r7, #20]
        break;
 800812a:	e004      	b.n	8008136 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	76bb      	strb	r3, [r7, #26]
        break;
 8008134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 811d 	beq.w	8008378 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	4a97      	ldr	r2, [pc, #604]	; (80083a0 <UART_SetConfig+0x59c>)
 8008144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008148:	461a      	mov	r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008150:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4413      	add	r3, r2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	d305      	bcc.n	800816e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	d902      	bls.n	8008174 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	76bb      	strb	r3, [r7, #26]
 8008172:	e101      	b.n	8008378 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4618      	mov	r0, r3
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	4a87      	ldr	r2, [pc, #540]	; (80083a0 <UART_SetConfig+0x59c>)
 8008182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f04f 0400 	mov.w	r4, #0
 800818c:	461a      	mov	r2, r3
 800818e:	4623      	mov	r3, r4
 8008190:	f7f8 fdba 	bl	8000d08 <__aeabi_uldivmod>
 8008194:	4603      	mov	r3, r0
 8008196:	460c      	mov	r4, r1
 8008198:	4619      	mov	r1, r3
 800819a:	4622      	mov	r2, r4
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	f04f 0400 	mov.w	r4, #0
 80081a4:	0214      	lsls	r4, r2, #8
 80081a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80081aa:	020b      	lsls	r3, r1, #8
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6852      	ldr	r2, [r2, #4]
 80081b0:	0852      	lsrs	r2, r2, #1
 80081b2:	4611      	mov	r1, r2
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	eb13 0b01 	adds.w	fp, r3, r1
 80081bc:	eb44 0c02 	adc.w	ip, r4, r2
 80081c0:	4658      	mov	r0, fp
 80081c2:	4661      	mov	r1, ip
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f04f 0400 	mov.w	r4, #0
 80081cc:	461a      	mov	r2, r3
 80081ce:	4623      	mov	r3, r4
 80081d0:	f7f8 fd9a 	bl	8000d08 <__aeabi_uldivmod>
 80081d4:	4603      	mov	r3, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081e0:	d308      	bcc.n	80081f4 <UART_SetConfig+0x3f0>
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e8:	d204      	bcs.n	80081f4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	e0c1      	b.n	8008378 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	76bb      	strb	r3, [r7, #26]
 80081f8:	e0be      	b.n	8008378 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008202:	d164      	bne.n	80082ce <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8008204:	7efb      	ldrb	r3, [r7, #27]
 8008206:	2b08      	cmp	r3, #8
 8008208:	d827      	bhi.n	800825a <UART_SetConfig+0x456>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x40c>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008235 	.word	0x08008235
 8008214:	0800823d 	.word	0x0800823d
 8008218:	08008245 	.word	0x08008245
 800821c:	0800825b 	.word	0x0800825b
 8008220:	0800824b 	.word	0x0800824b
 8008224:	0800825b 	.word	0x0800825b
 8008228:	0800825b 	.word	0x0800825b
 800822c:	0800825b 	.word	0x0800825b
 8008230:	08008253 	.word	0x08008253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008234:	f7fc ffc6 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 8008238:	6178      	str	r0, [r7, #20]
        break;
 800823a:	e013      	b.n	8008264 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800823c:	f7fc ffd8 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 8008240:	6178      	str	r0, [r7, #20]
        break;
 8008242:	e00f      	b.n	8008264 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008244:	4b57      	ldr	r3, [pc, #348]	; (80083a4 <UART_SetConfig+0x5a0>)
 8008246:	617b      	str	r3, [r7, #20]
        break;
 8008248:	e00c      	b.n	8008264 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800824a:	f7fc ff25 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800824e:	6178      	str	r0, [r7, #20]
        break;
 8008250:	e008      	b.n	8008264 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008256:	617b      	str	r3, [r7, #20]
        break;
 8008258:	e004      	b.n	8008264 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	76bb      	strb	r3, [r7, #26]
        break;
 8008262:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 8086 	beq.w	8008378 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	4a4b      	ldr	r2, [pc, #300]	; (80083a0 <UART_SetConfig+0x59c>)
 8008272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008276:	461a      	mov	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	fbb3 f3f2 	udiv	r3, r3, r2
 800827e:	005a      	lsls	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	441a      	add	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	b29b      	uxth	r3, r3
 8008292:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d916      	bls.n	80082c8 <UART_SetConfig+0x4c4>
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a0:	d212      	bcs.n	80082c8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f023 030f 	bic.w	r3, r3, #15
 80082aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	89fa      	ldrh	r2, [r7, #14]
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e057      	b.n	8008378 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	76bb      	strb	r3, [r7, #26]
 80082cc:	e054      	b.n	8008378 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ce:	7efb      	ldrb	r3, [r7, #27]
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d828      	bhi.n	8008326 <UART_SetConfig+0x522>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <UART_SetConfig+0x4d8>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008311 	.word	0x08008311
 80082e8:	08008327 	.word	0x08008327
 80082ec:	08008317 	.word	0x08008317
 80082f0:	08008327 	.word	0x08008327
 80082f4:	08008327 	.word	0x08008327
 80082f8:	08008327 	.word	0x08008327
 80082fc:	0800831f 	.word	0x0800831f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008300:	f7fc ff60 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 8008304:	6178      	str	r0, [r7, #20]
        break;
 8008306:	e013      	b.n	8008330 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008308:	f7fc ff72 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 800830c:	6178      	str	r0, [r7, #20]
        break;
 800830e:	e00f      	b.n	8008330 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008310:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <UART_SetConfig+0x5a0>)
 8008312:	617b      	str	r3, [r7, #20]
        break;
 8008314:	e00c      	b.n	8008330 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008316:	f7fc febf 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800831a:	6178      	str	r0, [r7, #20]
        break;
 800831c:	e008      	b.n	8008330 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800831e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008322:	617b      	str	r3, [r7, #20]
        break;
 8008324:	e004      	b.n	8008330 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	76bb      	strb	r3, [r7, #26]
        break;
 800832e:	bf00      	nop
    }

    if (pclk != 0U)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d020      	beq.n	8008378 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <UART_SetConfig+0x59c>)
 800833c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008340:	461a      	mov	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	fbb3 f2f2 	udiv	r2, r3, r2
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	441a      	add	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	b29b      	uxth	r3, r3
 800835a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d908      	bls.n	8008374 <UART_SetConfig+0x570>
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d204      	bcs.n	8008374 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e001      	b.n	8008378 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008394:	7ebb      	ldrb	r3, [r7, #26]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80083a0:	0800b520 	.word	0x0800b520
 80083a4:	00f42400 	.word	0x00f42400

080083a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01a      	beq.n	80084be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a6:	d10a      	bne.n	80084be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80084fc:	f7fb fb62 	bl	8003bc4 <HAL_GetTick>
 8008500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d10e      	bne.n	800852e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f82c 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e022      	b.n	8008574 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d10e      	bne.n	800855a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f816 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e00c      	b.n	8008574 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	e062      	b.n	8008654 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d05e      	beq.n	8008654 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7fb fb15 	bl	8003bc4 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <UART_WaitOnFlagUntilTimeout+0x30>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11d      	bne.n	80085e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085ba:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e045      	b.n	8008674 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d02e      	beq.n	8008654 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008604:	d126      	bne.n	8008654 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800860e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800861e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689a      	ldr	r2, [r3, #8]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0201 	bic.w	r2, r2, #1
 800862e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2220      	movs	r2, #32
 800863c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e00f      	b.n	8008674 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	429a      	cmp	r2, r3
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	429a      	cmp	r2, r3
 8008670:	d08d      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_UARTEx_DisableFifoMode+0x16>
 800868e:	2302      	movs	r3, #2
 8008690:	e027      	b.n	80086e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2224      	movs	r2, #36	; 0x24
 800869e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0201 	bic.w	r2, r2, #1
 80086b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d101      	bne.n	8008706 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008702:	2302      	movs	r3, #2
 8008704:	e02d      	b.n	8008762 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2224      	movs	r2, #36	; 0x24
 8008712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f850 	bl	80087e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800877e:	2302      	movs	r3, #2
 8008780:	e02d      	b.n	80087de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2224      	movs	r2, #36	; 0x24
 800878e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f812 	bl	80087e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80087f0:	4a2f      	ldr	r2, [pc, #188]	; (80088b0 <UARTEx_SetNbDataToProcess+0xc8>)
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087fa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80087fe:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008808:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008810:	2b00      	cmp	r3, #0
 8008812:	d108      	bne.n	8008826 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008824:	e03d      	b.n	80088a2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008826:	2308      	movs	r3, #8
 8008828:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800882a:	2308      	movs	r3, #8
 800882c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	0e5b      	lsrs	r3, r3, #25
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	0f5b      	lsrs	r3, r3, #29
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800884e:	7fbb      	ldrb	r3, [r7, #30]
 8008850:	7f3a      	ldrb	r2, [r7, #28]
 8008852:	f107 0120 	add.w	r1, r7, #32
 8008856:	440a      	add	r2, r1
 8008858:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800885c:	fb02 f303 	mul.w	r3, r2, r3
 8008860:	7f3a      	ldrb	r2, [r7, #28]
 8008862:	f107 0120 	add.w	r1, r7, #32
 8008866:	440a      	add	r2, r1
 8008868:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800886c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008878:	7ffb      	ldrb	r3, [r7, #31]
 800887a:	7f7a      	ldrb	r2, [r7, #29]
 800887c:	f107 0120 	add.w	r1, r7, #32
 8008880:	440a      	add	r2, r1
 8008882:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	7f7a      	ldrb	r2, [r7, #29]
 800888c:	f107 0120 	add.w	r1, r7, #32
 8008890:	440a      	add	r2, r1
 8008892:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008896:	fb93 f3f2 	sdiv	r3, r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80088a2:	bf00      	nop
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	0800b2e0 	.word	0x0800b2e0
 80088b4:	0800b2e8 	.word	0x0800b2e8

080088b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088b8:	b084      	sub	sp, #16
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	f107 001c 	add.w	r0, r7, #28
 80088c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d122      	bne.n	8008916 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d105      	bne.n	800890a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa30 	bl	8008d70 <USB_CoreReset>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e01a      	b.n	800894c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa24 	bl	8008d70 <USB_CoreReset>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800892c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
 800893e:	e005      	b.n	800894c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008958:	b004      	add	sp, #16
 800895a:	4770      	bx	lr

0800895c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f023 0201 	bic.w	r2, r3, #1
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60da      	str	r2, [r3, #12]
 80089a8:	e00b      	b.n	80089c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	60da      	str	r2, [r3, #12]
 80089bc:	e001      	b.n	80089c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e003      	b.n	80089ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80089c2:	2032      	movs	r0, #50	; 0x32
 80089c4:	f7fb f90a 	bl	8003bdc <HAL_Delay>

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089d4:	b084      	sub	sp, #16
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b086      	sub	sp, #24
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e009      	b.n	8008a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	3340      	adds	r3, #64	; 0x40
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	2200      	movs	r2, #0
 8008a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3301      	adds	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2b0e      	cmp	r3, #14
 8008a0c:	d9f2      	bls.n	80089f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11c      	bne.n	8008a4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a22:	f043 0302 	orr.w	r3, r3, #2
 8008a26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	e005      	b.n	8008a5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a60:	461a      	mov	r2, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a74:	461a      	mov	r2, r3
 8008a76:	680b      	ldr	r3, [r1, #0]
 8008a78:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a7a:	2103      	movs	r1, #3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f93d 	bl	8008cfc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a82:	2110      	movs	r1, #16
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f8f1 	bl	8008c6c <USB_FlushTxFifo>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f90f 	bl	8008cb8 <USB_FlushRxFifo>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2300      	movs	r3, #0
 8008aae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	e043      	b.n	8008b56 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae4:	d118      	bne.n	8008b18 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	461a      	mov	r2, r3
 8008afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	e013      	b.n	8008b2a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e008      	b.n	8008b2a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	461a      	mov	r2, r3
 8008b26:	2300      	movs	r3, #0
 8008b28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b36:	461a      	mov	r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	3301      	adds	r3, #1
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d3b7      	bcc.n	8008ace <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	e043      	b.n	8008bec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b7a:	d118      	bne.n	8008bae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e013      	b.n	8008bc0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	e008      	b.n	8008bc0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bde:	461a      	mov	r2, r3
 8008be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3301      	adds	r3, #1
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d3b7      	bcc.n	8008b64 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f043 0210 	orr.w	r2, r3, #16
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <USB_DevInit+0x294>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	f043 0208 	orr.w	r2, r3, #8
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d107      	bne.n	8008c56 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c4e:	f043 0304 	orr.w	r3, r3, #4
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c62:	b004      	add	sp, #16
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	803c3800 	.word	0x803c3800

08008c6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	019b      	lsls	r3, r3, #6
 8008c7e:	f043 0220 	orr.w	r2, r3, #32
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <USB_FlushTxFifo+0x48>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d901      	bls.n	8008c98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e006      	b.n	8008ca6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d0f0      	beq.n	8008c86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	00030d40 	.word	0x00030d40

08008cb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2210      	movs	r2, #16
 8008cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <USB_FlushRxFifo+0x40>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e006      	b.n	8008cea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f003 0310 	and.w	r3, r3, #16
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d0f0      	beq.n	8008cca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	00030d40 	.word	0x00030d40

08008cfc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	68f9      	ldr	r1, [r7, #12]
 8008d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b085      	sub	sp, #20
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d48:	f023 0303 	bic.w	r3, r3, #3
 8008d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d5c:	f043 0302 	orr.w	r3, r3, #2
 8008d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <USB_CoreReset+0x64>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e01b      	b.n	8008dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	daf2      	bge.n	8008d7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <USB_CoreReset+0x64>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d901      	bls.n	8008db8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e006      	b.n	8008dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d0f0      	beq.n	8008da6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	00030d40 	.word	0x00030d40

08008dd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dea:	2b84      	cmp	r3, #132	; 0x84
 8008dec:	d005      	beq.n	8008dfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	3303      	adds	r3, #3
 8008df8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e0c:	f000 fada 	bl	80093c4 <vTaskStartScheduler>
  
  return osOK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e18:	b089      	sub	sp, #36	; 0x24
 8008e1a:	af04      	add	r7, sp, #16
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d020      	beq.n	8008e6a <osThreadCreate+0x54>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01c      	beq.n	8008e6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685c      	ldr	r4, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681d      	ldr	r5, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	691e      	ldr	r6, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff ffc8 	bl	8008dd8 <makeFreeRtosPriority>
 8008e48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e52:	9202      	str	r2, [sp, #8]
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	9100      	str	r1, [sp, #0]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f8ed 	bl	800903e <xTaskCreateStatic>
 8008e64:	4603      	mov	r3, r0
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e01c      	b.n	8008ea4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685c      	ldr	r4, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e76:	b29e      	uxth	r6, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff ffaa 	bl	8008dd8 <makeFreeRtosPriority>
 8008e84:	4602      	mov	r2, r0
 8008e86:	f107 030c 	add.w	r3, r7, #12
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	9200      	str	r2, [sp, #0]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	4632      	mov	r2, r6
 8008e92:	4629      	mov	r1, r5
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 f92c 	bl	80090f2 <xTaskCreate>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d001      	beq.n	8008ea4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e000      	b.n	8008ea6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <osDelay+0x16>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	e000      	b.n	8008ec6 <osDelay+0x18>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fa48 	bl	800935c <vTaskDelay>
  
  return osOK;
 8008ecc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f103 0208 	add.w	r2, r3, #8
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295
 8008eee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f103 0208 	add.w	r2, r3, #8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f103 0208 	add.w	r2, r3, #8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	601a      	str	r2, [r3, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d103      	bne.n	8008f98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e00c      	b.n	8008fb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e002      	b.n	8008fa6 <vListInsert+0x2e>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d2f6      	bcs.n	8008fa0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6892      	ldr	r2, [r2, #8]
 8009000:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6852      	ldr	r2, [r2, #4]
 800900a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d103      	bne.n	800901e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1e5a      	subs	r2, r3, #1
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800903e:	b580      	push	{r7, lr}
 8009040:	b08e      	sub	sp, #56	; 0x38
 8009042:	af04      	add	r7, sp, #16
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	623b      	str	r3, [r7, #32]
 8009064:	e7fe      	b.n	8009064 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d109      	bne.n	8009080 <xTaskCreateStatic+0x42>
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	e7fe      	b.n	800907e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009080:	2354      	movs	r3, #84	; 0x54
 8009082:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b54      	cmp	r3, #84	; 0x54
 8009088:	d009      	beq.n	800909e <xTaskCreateStatic+0x60>
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	e7fe      	b.n	800909c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800909e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01e      	beq.n	80090e4 <xTaskCreateStatic+0xa6>
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01b      	beq.n	80090e4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	2202      	movs	r2, #2
 80090ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090be:	2300      	movs	r3, #0
 80090c0:	9303      	str	r3, [sp, #12]
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	9302      	str	r3, [sp, #8]
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f850 	bl	800917c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090de:	f000 f8d3 	bl	8009288 <prvAddNewTaskToReadyList>
 80090e2:	e001      	b.n	80090e8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090e8:	697b      	ldr	r3, [r7, #20]
	}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3728      	adds	r7, #40	; 0x28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b08c      	sub	sp, #48	; 0x30
 80090f6:	af04      	add	r7, sp, #16
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4618      	mov	r0, r3
 8009108:	f000 feb4 	bl	8009e74 <pvPortMalloc>
 800910c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00e      	beq.n	8009132 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009114:	2054      	movs	r0, #84	; 0x54
 8009116:	f000 fead 	bl	8009e74 <pvPortMalloc>
 800911a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
 8009128:	e005      	b.n	8009136 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f000 ff64 	bl	8009ff8 <vPortFree>
 8009130:	e001      	b.n	8009136 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d017      	beq.n	800916c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	2300      	movs	r3, #0
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	9302      	str	r3, [sp, #8]
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f80e 	bl	800917c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009160:	69f8      	ldr	r0, [r7, #28]
 8009162:	f000 f891 	bl	8009288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e002      	b.n	8009172 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009172:	69bb      	ldr	r3, [r7, #24]
	}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009194:	3b01      	subs	r3, #1
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <prvInitialiseNewTask+0x46>
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e7fe      	b.n	80091c0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01f      	beq.n	8009208 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
 80091cc:	e012      	b.n	80091f4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	4413      	add	r3, r2
 80091d4:	7819      	ldrb	r1, [r3, #0]
 80091d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	3334      	adds	r3, #52	; 0x34
 80091de:	460a      	mov	r2, r1
 80091e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4413      	add	r3, r2
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3301      	adds	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b0f      	cmp	r3, #15
 80091f8:	d9e9      	bls.n	80091ce <prvInitialiseNewTask+0x52>
 80091fa:	e000      	b.n	80091fe <prvInitialiseNewTask+0x82>
			{
				break;
 80091fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009206:	e003      	b.n	8009210 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	2b06      	cmp	r3, #6
 8009214:	d901      	bls.n	800921a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009216:	2306      	movs	r3, #6
 8009218:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009224:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	2200      	movs	r2, #0
 800922a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff fe70 	bl	8008f16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	3318      	adds	r3, #24
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff fe6b 	bl	8008f16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009244:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	f1c3 0207 	rsb	r2, r3, #7
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009254:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	2200      	movs	r2, #0
 800925a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	69b8      	ldr	r0, [r7, #24]
 800926a:	f000 fbfd 	bl	8009a68 <pxPortInitialiseStack>
 800926e:	4602      	mov	r2, r0
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009280:	bf00      	nop
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009290:	f000 fd14 	bl	8009cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009294:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <prvAddNewTaskToReadyList+0xb8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	4a29      	ldr	r2, [pc, #164]	; (8009340 <prvAddNewTaskToReadyList+0xb8>)
 800929c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800929e:	4b29      	ldr	r3, [pc, #164]	; (8009344 <prvAddNewTaskToReadyList+0xbc>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092a6:	4a27      	ldr	r2, [pc, #156]	; (8009344 <prvAddNewTaskToReadyList+0xbc>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <prvAddNewTaskToReadyList+0xb8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d110      	bne.n	80092d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092b4:	f000 fab8 	bl	8009828 <prvInitialiseTaskLists>
 80092b8:	e00d      	b.n	80092d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092ba:	4b23      	ldr	r3, [pc, #140]	; (8009348 <prvAddNewTaskToReadyList+0xc0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092c2:	4b20      	ldr	r3, [pc, #128]	; (8009344 <prvAddNewTaskToReadyList+0xbc>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d802      	bhi.n	80092d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092d0:	4a1c      	ldr	r2, [pc, #112]	; (8009344 <prvAddNewTaskToReadyList+0xbc>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092d6:	4b1d      	ldr	r3, [pc, #116]	; (800934c <prvAddNewTaskToReadyList+0xc4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	4a1b      	ldr	r2, [pc, #108]	; (800934c <prvAddNewTaskToReadyList+0xc4>)
 80092de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	2201      	movs	r2, #1
 80092e6:	409a      	lsls	r2, r3
 80092e8:	4b19      	ldr	r3, [pc, #100]	; (8009350 <prvAddNewTaskToReadyList+0xc8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	4a18      	ldr	r2, [pc, #96]	; (8009350 <prvAddNewTaskToReadyList+0xc8>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4a15      	ldr	r2, [pc, #84]	; (8009354 <prvAddNewTaskToReadyList+0xcc>)
 8009300:	441a      	add	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3304      	adds	r3, #4
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7ff fe11 	bl	8008f30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800930e:	f000 fd03 	bl	8009d18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009312:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <prvAddNewTaskToReadyList+0xc0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00e      	beq.n	8009338 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800931a:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <prvAddNewTaskToReadyList+0xbc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	429a      	cmp	r2, r3
 8009326:	d207      	bcs.n	8009338 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <prvAddNewTaskToReadyList+0xd0>)
 800932a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	200003f4 	.word	0x200003f4
 8009344:	200002f4 	.word	0x200002f4
 8009348:	20000400 	.word	0x20000400
 800934c:	20000410 	.word	0x20000410
 8009350:	200003fc 	.word	0x200003fc
 8009354:	200002f8 	.word	0x200002f8
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <vTaskDelay+0x60>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <vTaskDelay+0x2e>
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60bb      	str	r3, [r7, #8]
 8009388:	e7fe      	b.n	8009388 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800938a:	f000 f879 	bl	8009480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800938e:	2100      	movs	r1, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fb03 	bl	800999c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009396:	f000 f881 	bl	800949c <xTaskResumeAll>
 800939a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d107      	bne.n	80093b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80093a2:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <vTaskDelay+0x64>)
 80093a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000041c 	.word	0x2000041c
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093d2:	463a      	mov	r2, r7
 80093d4:	1d39      	adds	r1, r7, #4
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f7f7 ffd0 	bl	8001380 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	9202      	str	r2, [sp, #8]
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	2300      	movs	r3, #0
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2300      	movs	r3, #0
 80093f0:	460a      	mov	r2, r1
 80093f2:	491d      	ldr	r1, [pc, #116]	; (8009468 <vTaskStartScheduler+0xa4>)
 80093f4:	481d      	ldr	r0, [pc, #116]	; (800946c <vTaskStartScheduler+0xa8>)
 80093f6:	f7ff fe22 	bl	800903e <xTaskCreateStatic>
 80093fa:	4602      	mov	r2, r0
 80093fc:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <vTaskStartScheduler+0xac>)
 80093fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009400:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <vTaskStartScheduler+0xac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e001      	b.n	8009412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d115      	bne.n	8009444 <vTaskStartScheduler+0x80>
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800942a:	4b12      	ldr	r3, [pc, #72]	; (8009474 <vTaskStartScheduler+0xb0>)
 800942c:	f04f 32ff 	mov.w	r2, #4294967295
 8009430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <vTaskStartScheduler+0xb4>)
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <vTaskStartScheduler+0xb8>)
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800943e:	f000 fb9f 	bl	8009b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009442:	e00d      	b.n	8009460 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d109      	bne.n	8009460 <vTaskStartScheduler+0x9c>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e7fe      	b.n	800945e <vTaskStartScheduler+0x9a>
}
 8009460:	bf00      	nop
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	0800b2f0 	.word	0x0800b2f0
 800946c:	080097f9 	.word	0x080097f9
 8009470:	20000418 	.word	0x20000418
 8009474:	20000414 	.word	0x20000414
 8009478:	20000400 	.word	0x20000400
 800947c:	200003f8 	.word	0x200003f8

08009480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <vTaskSuspendAll+0x18>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	4a03      	ldr	r2, [pc, #12]	; (8009498 <vTaskSuspendAll+0x18>)
 800948c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	2000041c 	.word	0x2000041c

0800949c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094aa:	4b41      	ldr	r3, [pc, #260]	; (80095b0 <xTaskResumeAll+0x114>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <xTaskResumeAll+0x2a>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	e7fe      	b.n	80094c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094c6:	f000 fbf9 	bl	8009cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094ca:	4b39      	ldr	r3, [pc, #228]	; (80095b0 <xTaskResumeAll+0x114>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <xTaskResumeAll+0x114>)
 80094d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <xTaskResumeAll+0x114>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d161      	bne.n	80095a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094dc:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <xTaskResumeAll+0x118>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d05d      	beq.n	80095a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094e4:	e02e      	b.n	8009544 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e6:	4b34      	ldr	r3, [pc, #208]	; (80095b8 <xTaskResumeAll+0x11c>)
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3318      	adds	r3, #24
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fd79 	bl	8008fea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fd74 	bl	8008fea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	2201      	movs	r2, #1
 8009508:	409a      	lsls	r2, r3
 800950a:	4b2c      	ldr	r3, [pc, #176]	; (80095bc <xTaskResumeAll+0x120>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4313      	orrs	r3, r2
 8009510:	4a2a      	ldr	r2, [pc, #168]	; (80095bc <xTaskResumeAll+0x120>)
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <xTaskResumeAll+0x124>)
 8009522:	441a      	add	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7ff fd00 	bl	8008f30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4b23      	ldr	r3, [pc, #140]	; (80095c4 <xTaskResumeAll+0x128>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	429a      	cmp	r2, r3
 800953c:	d302      	bcc.n	8009544 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800953e:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <xTaskResumeAll+0x12c>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009544:	4b1c      	ldr	r3, [pc, #112]	; (80095b8 <xTaskResumeAll+0x11c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1cc      	bne.n	80094e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009552:	f000 fa03 	bl	800995c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <xTaskResumeAll+0x130>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d010      	beq.n	8009584 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009562:	f000 f837 	bl	80095d4 <xTaskIncrementTick>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800956c:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <xTaskResumeAll+0x12c>)
 800956e:	2201      	movs	r2, #1
 8009570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f1      	bne.n	8009562 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <xTaskResumeAll+0x130>)
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009584:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <xTaskResumeAll+0x12c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800958c:	2301      	movs	r3, #1
 800958e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <xTaskResumeAll+0x134>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a0:	f000 fbba 	bl	8009d18 <vPortExitCritical>

	return xAlreadyYielded;
 80095a4:	68bb      	ldr	r3, [r7, #8]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2000041c 	.word	0x2000041c
 80095b4:	200003f4 	.word	0x200003f4
 80095b8:	200003b4 	.word	0x200003b4
 80095bc:	200003fc 	.word	0x200003fc
 80095c0:	200002f8 	.word	0x200002f8
 80095c4:	200002f4 	.word	0x200002f4
 80095c8:	20000408 	.word	0x20000408
 80095cc:	20000404 	.word	0x20000404
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095de:	4b4e      	ldr	r3, [pc, #312]	; (8009718 <xTaskIncrementTick+0x144>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 8087 	bne.w	80096f6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095e8:	4b4c      	ldr	r3, [pc, #304]	; (800971c <xTaskIncrementTick+0x148>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095f0:	4a4a      	ldr	r2, [pc, #296]	; (800971c <xTaskIncrementTick+0x148>)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d11f      	bne.n	800963c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80095fc:	4b48      	ldr	r3, [pc, #288]	; (8009720 <xTaskIncrementTick+0x14c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d009      	beq.n	800961a <xTaskIncrementTick+0x46>
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	e7fe      	b.n	8009618 <xTaskIncrementTick+0x44>
 800961a:	4b41      	ldr	r3, [pc, #260]	; (8009720 <xTaskIncrementTick+0x14c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	4b40      	ldr	r3, [pc, #256]	; (8009724 <xTaskIncrementTick+0x150>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a3e      	ldr	r2, [pc, #248]	; (8009720 <xTaskIncrementTick+0x14c>)
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	4a3e      	ldr	r2, [pc, #248]	; (8009724 <xTaskIncrementTick+0x150>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	4b3e      	ldr	r3, [pc, #248]	; (8009728 <xTaskIncrementTick+0x154>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	4a3c      	ldr	r2, [pc, #240]	; (8009728 <xTaskIncrementTick+0x154>)
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f000 f990 	bl	800995c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800963c:	4b3b      	ldr	r3, [pc, #236]	; (800972c <xTaskIncrementTick+0x158>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d348      	bcc.n	80096d8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009646:	4b36      	ldr	r3, [pc, #216]	; (8009720 <xTaskIncrementTick+0x14c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009650:	4b36      	ldr	r3, [pc, #216]	; (800972c <xTaskIncrementTick+0x158>)
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	601a      	str	r2, [r3, #0]
					break;
 8009658:	e03e      	b.n	80096d8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965a:	4b31      	ldr	r3, [pc, #196]	; (8009720 <xTaskIncrementTick+0x14c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d203      	bcs.n	800967a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009672:	4a2e      	ldr	r2, [pc, #184]	; (800972c <xTaskIncrementTick+0x158>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009678:	e02e      	b.n	80096d8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	3304      	adds	r3, #4
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fcb3 	bl	8008fea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3318      	adds	r3, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fcaa 	bl	8008fea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	2201      	movs	r2, #1
 800969c:	409a      	lsls	r2, r3
 800969e:	4b24      	ldr	r3, [pc, #144]	; (8009730 <xTaskIncrementTick+0x15c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	4a22      	ldr	r2, [pc, #136]	; (8009730 <xTaskIncrementTick+0x15c>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4a1f      	ldr	r2, [pc, #124]	; (8009734 <xTaskIncrementTick+0x160>)
 80096b6:	441a      	add	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7ff fc36 	bl	8008f30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c8:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <xTaskIncrementTick+0x164>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d3b9      	bcc.n	8009646 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80096d2:	2301      	movs	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096d6:	e7b6      	b.n	8009646 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096d8:	4b17      	ldr	r3, [pc, #92]	; (8009738 <xTaskIncrementTick+0x164>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096de:	4915      	ldr	r1, [pc, #84]	; (8009734 <xTaskIncrementTick+0x160>)
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d907      	bls.n	8009700 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80096f0:	2301      	movs	r3, #1
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	e004      	b.n	8009700 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <xTaskIncrementTick+0x168>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	4a0f      	ldr	r2, [pc, #60]	; (800973c <xTaskIncrementTick+0x168>)
 80096fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <xTaskIncrementTick+0x16c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800970c:	697b      	ldr	r3, [r7, #20]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	2000041c 	.word	0x2000041c
 800971c:	200003f8 	.word	0x200003f8
 8009720:	200003ac 	.word	0x200003ac
 8009724:	200003b0 	.word	0x200003b0
 8009728:	2000040c 	.word	0x2000040c
 800972c:	20000414 	.word	0x20000414
 8009730:	200003fc 	.word	0x200003fc
 8009734:	200002f8 	.word	0x200002f8
 8009738:	200002f4 	.word	0x200002f4
 800973c:	20000404 	.word	0x20000404
 8009740:	20000408 	.word	0x20000408

08009744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800974a:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <vTaskSwitchContext+0xa0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009752:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <vTaskSwitchContext+0xa4>)
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009758:	e03e      	b.n	80097d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <vTaskSwitchContext+0xa4>)
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009760:	4b22      	ldr	r3, [pc, #136]	; (80097ec <vTaskSwitchContext+0xa8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	fab3 f383 	clz	r3, r3
 800976c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800976e:	7afb      	ldrb	r3, [r7, #11]
 8009770:	f1c3 031f 	rsb	r3, r3, #31
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	491e      	ldr	r1, [pc, #120]	; (80097f0 <vTaskSwitchContext+0xac>)
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <vTaskSwitchContext+0x5a>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	607b      	str	r3, [r7, #4]
 800979c:	e7fe      	b.n	800979c <vTaskSwitchContext+0x58>
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <vTaskSwitchContext+0xac>)
 80097aa:	4413      	add	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3308      	adds	r3, #8
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d104      	bne.n	80097ce <vTaskSwitchContext+0x8a>
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	4a07      	ldr	r2, [pc, #28]	; (80097f4 <vTaskSwitchContext+0xb0>)
 80097d6:	6013      	str	r3, [r2, #0]
}
 80097d8:	bf00      	nop
 80097da:	371c      	adds	r7, #28
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	2000041c 	.word	0x2000041c
 80097e8:	20000408 	.word	0x20000408
 80097ec:	200003fc 	.word	0x200003fc
 80097f0:	200002f8 	.word	0x200002f8
 80097f4:	200002f4 	.word	0x200002f4

080097f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009800:	f000 f852 	bl	80098a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <prvIdleTask+0x28>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d9f9      	bls.n	8009800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <prvIdleTask+0x2c>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800981c:	e7f0      	b.n	8009800 <prvIdleTask+0x8>
 800981e:	bf00      	nop
 8009820:	200002f8 	.word	0x200002f8
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	e00c      	b.n	800984e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4a12      	ldr	r2, [pc, #72]	; (8009888 <prvInitialiseTaskLists+0x60>)
 8009840:	4413      	add	r3, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fb47 	bl	8008ed6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3301      	adds	r3, #1
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b06      	cmp	r3, #6
 8009852:	d9ef      	bls.n	8009834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009854:	480d      	ldr	r0, [pc, #52]	; (800988c <prvInitialiseTaskLists+0x64>)
 8009856:	f7ff fb3e 	bl	8008ed6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800985a:	480d      	ldr	r0, [pc, #52]	; (8009890 <prvInitialiseTaskLists+0x68>)
 800985c:	f7ff fb3b 	bl	8008ed6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009860:	480c      	ldr	r0, [pc, #48]	; (8009894 <prvInitialiseTaskLists+0x6c>)
 8009862:	f7ff fb38 	bl	8008ed6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009866:	480c      	ldr	r0, [pc, #48]	; (8009898 <prvInitialiseTaskLists+0x70>)
 8009868:	f7ff fb35 	bl	8008ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800986c:	480b      	ldr	r0, [pc, #44]	; (800989c <prvInitialiseTaskLists+0x74>)
 800986e:	f7ff fb32 	bl	8008ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <prvInitialiseTaskLists+0x78>)
 8009874:	4a05      	ldr	r2, [pc, #20]	; (800988c <prvInitialiseTaskLists+0x64>)
 8009876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <prvInitialiseTaskLists+0x7c>)
 800987a:	4a05      	ldr	r2, [pc, #20]	; (8009890 <prvInitialiseTaskLists+0x68>)
 800987c:	601a      	str	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	200002f8 	.word	0x200002f8
 800988c:	20000384 	.word	0x20000384
 8009890:	20000398 	.word	0x20000398
 8009894:	200003b4 	.word	0x200003b4
 8009898:	200003c8 	.word	0x200003c8
 800989c:	200003e0 	.word	0x200003e0
 80098a0:	200003ac 	.word	0x200003ac
 80098a4:	200003b0 	.word	0x200003b0

080098a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ae:	e019      	b.n	80098e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098b0:	f000 fa04 	bl	8009cbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <prvCheckTasksWaitingTermination+0x4c>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3304      	adds	r3, #4
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fb92 	bl	8008fea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098c6:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <prvCheckTasksWaitingTermination+0x50>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	4a0a      	ldr	r2, [pc, #40]	; (80098f8 <prvCheckTasksWaitingTermination+0x50>)
 80098ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <prvCheckTasksWaitingTermination+0x54>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <prvCheckTasksWaitingTermination+0x54>)
 80098d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098da:	f000 fa1d 	bl	8009d18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f80e 	bl	8009900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <prvCheckTasksWaitingTermination+0x54>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e1      	bne.n	80098b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	200003c8 	.word	0x200003c8
 80098f8:	200003f4 	.word	0x200003f4
 80098fc:	200003dc 	.word	0x200003dc

08009900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800990e:	2b00      	cmp	r3, #0
 8009910:	d108      	bne.n	8009924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fb6e 	bl	8009ff8 <vPortFree>
				vPortFree( pxTCB );
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fb6b 	bl	8009ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009922:	e017      	b.n	8009954 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800992a:	2b01      	cmp	r3, #1
 800992c:	d103      	bne.n	8009936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb62 	bl	8009ff8 <vPortFree>
	}
 8009934:	e00e      	b.n	8009954 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800993c:	2b02      	cmp	r3, #2
 800993e:	d009      	beq.n	8009954 <prvDeleteTCB+0x54>
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e7fe      	b.n	8009952 <prvDeleteTCB+0x52>
	}
 8009954:	bf00      	nop
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <prvResetNextTaskUnblockTime+0x38>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvResetNextTaskUnblockTime+0x3c>)
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009974:	e008      	b.n	8009988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009976:	4b07      	ldr	r3, [pc, #28]	; (8009994 <prvResetNextTaskUnblockTime+0x38>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	4a04      	ldr	r2, [pc, #16]	; (8009998 <prvResetNextTaskUnblockTime+0x3c>)
 8009986:	6013      	str	r3, [r2, #0]
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	200003ac 	.word	0x200003ac
 8009998:	20000414 	.word	0x20000414

0800999c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099a6:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <prvAddCurrentTaskToDelayedList+0xb0>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ac:	4b28      	ldr	r3, [pc, #160]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fb19 	bl	8008fea <uxListRemove>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10b      	bne.n	80099d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099be:	4b24      	ldr	r3, [pc, #144]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	2201      	movs	r2, #1
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	43da      	mvns	r2, r3
 80099cc:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4013      	ands	r3, r2
 80099d2:	4a20      	ldr	r2, [pc, #128]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d10a      	bne.n	80099f4 <prvAddCurrentTaskToDelayedList+0x58>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e4:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3304      	adds	r3, #4
 80099ea:	4619      	mov	r1, r3
 80099ec:	481a      	ldr	r0, [pc, #104]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xbc>)
 80099ee:	f7ff fa9f 	bl	8008f30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099f2:	e026      	b.n	8009a42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4413      	add	r3, r2
 80099fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099fc:	4b14      	ldr	r3, [pc, #80]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d209      	bcs.n	8009a20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a0c:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3304      	adds	r3, #4
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f7ff faad 	bl	8008f78 <vListInsert>
}
 8009a1e:	e010      	b.n	8009a42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a20:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7ff faa3 	bl	8008f78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a32:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d202      	bcs.n	8009a42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a3c:	4a09      	ldr	r2, [pc, #36]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6013      	str	r3, [r2, #0]
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200003f8 	.word	0x200003f8
 8009a50:	200002f4 	.word	0x200002f4
 8009a54:	200003fc 	.word	0x200003fc
 8009a58:	200003e0 	.word	0x200003e0
 8009a5c:	200003b0 	.word	0x200003b0
 8009a60:	200003ac 	.word	0x200003ac
 8009a64:	20000414 	.word	0x20000414

08009a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3b04      	subs	r3, #4
 8009a78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3b04      	subs	r3, #4
 8009a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f023 0201 	bic.w	r2, r3, #1
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3b04      	subs	r3, #4
 8009a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a98:	4a0c      	ldr	r2, [pc, #48]	; (8009acc <pxPortInitialiseStack+0x64>)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3b14      	subs	r3, #20
 8009aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3b04      	subs	r3, #4
 8009aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f06f 0202 	mvn.w	r2, #2
 8009ab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3b20      	subs	r3, #32
 8009abc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009abe:	68fb      	ldr	r3, [r7, #12]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	08009ad1 	.word	0x08009ad1

08009ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <prvTaskExitError+0x50>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d009      	beq.n	8009af8 <prvTaskExitError+0x28>
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e7fe      	b.n	8009af6 <prvTaskExitError+0x26>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b0a:	bf00      	nop
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0fc      	beq.n	8009b0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b12:	bf00      	nop
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20000014 	.word	0x20000014
	...

08009b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b30:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <pxCurrentTCBConst2>)
 8009b32:	6819      	ldr	r1, [r3, #0]
 8009b34:	6808      	ldr	r0, [r1, #0]
 8009b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3a:	f380 8809 	msr	PSP, r0
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f04f 0000 	mov.w	r0, #0
 8009b46:	f380 8811 	msr	BASEPRI, r0
 8009b4a:	4770      	bx	lr
 8009b4c:	f3af 8000 	nop.w

08009b50 <pxCurrentTCBConst2>:
 8009b50:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop

08009b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b58:	4808      	ldr	r0, [pc, #32]	; (8009b7c <prvPortStartFirstTask+0x24>)
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	6800      	ldr	r0, [r0, #0]
 8009b5e:	f380 8808 	msr	MSP, r0
 8009b62:	f04f 0000 	mov.w	r0, #0
 8009b66:	f380 8814 	msr	CONTROL, r0
 8009b6a:	b662      	cpsie	i
 8009b6c:	b661      	cpsie	f
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	df00      	svc	0
 8009b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b7a:	bf00      	nop
 8009b7c:	e000ed08 	.word	0xe000ed08

08009b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b86:	4b44      	ldr	r3, [pc, #272]	; (8009c98 <xPortStartScheduler+0x118>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a44      	ldr	r2, [pc, #272]	; (8009c9c <xPortStartScheduler+0x11c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d109      	bne.n	8009ba4 <xPortStartScheduler+0x24>
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	613b      	str	r3, [r7, #16]
 8009ba2:	e7fe      	b.n	8009ba2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ba4:	4b3c      	ldr	r3, [pc, #240]	; (8009c98 <xPortStartScheduler+0x118>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a3d      	ldr	r2, [pc, #244]	; (8009ca0 <xPortStartScheduler+0x120>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d109      	bne.n	8009bc2 <xPortStartScheduler+0x42>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e7fe      	b.n	8009bc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bc2:	4b38      	ldr	r3, [pc, #224]	; (8009ca4 <xPortStartScheduler+0x124>)
 8009bc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	22ff      	movs	r2, #255	; 0xff
 8009bd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	4b30      	ldr	r3, [pc, #192]	; (8009ca8 <xPortStartScheduler+0x128>)
 8009be8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bea:	4b30      	ldr	r3, [pc, #192]	; (8009cac <xPortStartScheduler+0x12c>)
 8009bec:	2207      	movs	r2, #7
 8009bee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bf0:	e009      	b.n	8009c06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009bf2:	4b2e      	ldr	r3, [pc, #184]	; (8009cac <xPortStartScheduler+0x12c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	4a2c      	ldr	r2, [pc, #176]	; (8009cac <xPortStartScheduler+0x12c>)
 8009bfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b80      	cmp	r3, #128	; 0x80
 8009c10:	d0ef      	beq.n	8009bf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c12:	4b26      	ldr	r3, [pc, #152]	; (8009cac <xPortStartScheduler+0x12c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f1c3 0307 	rsb	r3, r3, #7
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	d009      	beq.n	8009c32 <xPortStartScheduler+0xb2>
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	e7fe      	b.n	8009c30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c32:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <xPortStartScheduler+0x12c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <xPortStartScheduler+0x12c>)
 8009c3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <xPortStartScheduler+0x12c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c44:	4a19      	ldr	r2, [pc, #100]	; (8009cac <xPortStartScheduler+0x12c>)
 8009c46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <xPortStartScheduler+0x130>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <xPortStartScheduler+0x130>)
 8009c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c5c:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <xPortStartScheduler+0x130>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <xPortStartScheduler+0x130>)
 8009c62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c68:	f000 f8d6 	bl	8009e18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c6c:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <xPortStartScheduler+0x134>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c72:	f000 f8f5 	bl	8009e60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <xPortStartScheduler+0x138>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a0f      	ldr	r2, [pc, #60]	; (8009cb8 <xPortStartScheduler+0x138>)
 8009c7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c82:	f7ff ff69 	bl	8009b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c86:	f7ff fd5d 	bl	8009744 <vTaskSwitchContext>
	prvTaskExitError();
 8009c8a:	f7ff ff21 	bl	8009ad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed00 	.word	0xe000ed00
 8009c9c:	410fc271 	.word	0x410fc271
 8009ca0:	410fc270 	.word	0x410fc270
 8009ca4:	e000e400 	.word	0xe000e400
 8009ca8:	20000420 	.word	0x20000420
 8009cac:	20000424 	.word	0x20000424
 8009cb0:	e000ed20 	.word	0xe000ed20
 8009cb4:	20000014 	.word	0x20000014
 8009cb8:	e000ef34 	.word	0xe000ef34

08009cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cd4:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <vPortEnterCritical+0x54>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <vPortEnterCritical+0x54>)
 8009cdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cde:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <vPortEnterCritical+0x54>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10e      	bne.n	8009d04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <vPortEnterCritical+0x58>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <vPortEnterCritical+0x48>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	e7fe      	b.n	8009d02 <vPortEnterCritical+0x46>
	}
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000014 	.word	0x20000014
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d1e:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <vPortExitCritical+0x4c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <vPortExitCritical+0x22>
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	607b      	str	r3, [r7, #4]
 8009d38:	e7fe      	b.n	8009d38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d3a:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <vPortExitCritical+0x4c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4a08      	ldr	r2, [pc, #32]	; (8009d64 <vPortExitCritical+0x4c>)
 8009d42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d44:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <vPortExitCritical+0x4c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d104      	bne.n	8009d56 <vPortExitCritical+0x3e>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d56:	bf00      	nop
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000014 	.word	0x20000014
	...

08009d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d70:	f3ef 8009 	mrs	r0, PSP
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <pxCurrentTCBConst>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	f01e 0f10 	tst.w	lr, #16
 8009d80:	bf08      	it	eq
 8009d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d94:	f380 8811 	msr	BASEPRI, r0
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f7ff fcd0 	bl	8009744 <vTaskSwitchContext>
 8009da4:	f04f 0000 	mov.w	r0, #0
 8009da8:	f380 8811 	msr	BASEPRI, r0
 8009dac:	bc09      	pop	{r0, r3}
 8009dae:	6819      	ldr	r1, [r3, #0]
 8009db0:	6808      	ldr	r0, [r1, #0]
 8009db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db6:	f01e 0f10 	tst.w	lr, #16
 8009dba:	bf08      	it	eq
 8009dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009dc0:	f380 8809 	msr	PSP, r0
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w

08009dd0 <pxCurrentTCBConst>:
 8009dd0:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009df0:	f7ff fbf0 	bl	80095d4 <xTaskIncrementTick>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <SysTick_Handler+0x3c>)
 8009dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	2300      	movs	r3, #0
 8009e04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	e000ed04 	.word	0xe000ed04

08009e18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <vPortSetupTimerInterrupt+0x34>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <vPortSetupTimerInterrupt+0x38>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e28:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <vPortSetupTimerInterrupt+0x3c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a0a      	ldr	r2, [pc, #40]	; (8009e58 <vPortSetupTimerInterrupt+0x40>)
 8009e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e32:	099b      	lsrs	r3, r3, #6
 8009e34:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <vPortSetupTimerInterrupt+0x44>)
 8009e36:	3b01      	subs	r3, #1
 8009e38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e3a:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <vPortSetupTimerInterrupt+0x34>)
 8009e3c:	2207      	movs	r2, #7
 8009e3e:	601a      	str	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	e000e010 	.word	0xe000e010
 8009e50:	e000e018 	.word	0xe000e018
 8009e54:	20000008 	.word	0x20000008
 8009e58:	10624dd3 	.word	0x10624dd3
 8009e5c:	e000e014 	.word	0xe000e014

08009e60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e70 <vPortEnableVFP+0x10>
 8009e64:	6801      	ldr	r1, [r0, #0]
 8009e66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e6a:	6001      	str	r1, [r0, #0]
 8009e6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e6e:	bf00      	nop
 8009e70:	e000ed88 	.word	0xe000ed88

08009e74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e80:	f7ff fafe 	bl	8009480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e84:	4b57      	ldr	r3, [pc, #348]	; (8009fe4 <pvPortMalloc+0x170>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e8c:	f000 f90c 	bl	800a0a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e90:	4b55      	ldr	r3, [pc, #340]	; (8009fe8 <pvPortMalloc+0x174>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4013      	ands	r3, r2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f040 808c 	bne.w	8009fb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01c      	beq.n	8009ede <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f003 0307 	and.w	r3, r3, #7
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d013      	beq.n	8009ede <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f023 0307 	bic.w	r3, r3, #7
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d009      	beq.n	8009ede <pvPortMalloc+0x6a>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e7fe      	b.n	8009edc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d068      	beq.n	8009fb6 <pvPortMalloc+0x142>
 8009ee4:	4b41      	ldr	r3, [pc, #260]	; (8009fec <pvPortMalloc+0x178>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d863      	bhi.n	8009fb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009eee:	4b40      	ldr	r3, [pc, #256]	; (8009ff0 <pvPortMalloc+0x17c>)
 8009ef0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ef2:	4b3f      	ldr	r3, [pc, #252]	; (8009ff0 <pvPortMalloc+0x17c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ef8:	e004      	b.n	8009f04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d903      	bls.n	8009f16 <pvPortMalloc+0xa2>
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1f1      	bne.n	8009efa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f16:	4b33      	ldr	r3, [pc, #204]	; (8009fe4 <pvPortMalloc+0x170>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d04a      	beq.n	8009fb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2208      	movs	r2, #8
 8009f26:	4413      	add	r3, r2
 8009f28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	1ad2      	subs	r2, r2, r3
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d91e      	bls.n	8009f80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4413      	add	r3, r2
 8009f48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <pvPortMalloc+0xf4>
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	e7fe      	b.n	8009f66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f7a:	69b8      	ldr	r0, [r7, #24]
 8009f7c:	f000 f8f6 	bl	800a16c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f80:	4b1a      	ldr	r3, [pc, #104]	; (8009fec <pvPortMalloc+0x178>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	4a18      	ldr	r2, [pc, #96]	; (8009fec <pvPortMalloc+0x178>)
 8009f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f8e:	4b17      	ldr	r3, [pc, #92]	; (8009fec <pvPortMalloc+0x178>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <pvPortMalloc+0x180>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d203      	bcs.n	8009fa2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f9a:	4b14      	ldr	r3, [pc, #80]	; (8009fec <pvPortMalloc+0x178>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <pvPortMalloc+0x180>)
 8009fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <pvPortMalloc+0x174>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	431a      	orrs	r2, r3
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fb6:	f7ff fa71 	bl	800949c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <pvPortMalloc+0x164>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e7fe      	b.n	8009fd6 <pvPortMalloc+0x162>
	return pvReturn;
 8009fd8:	69fb      	ldr	r3, [r7, #28]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3728      	adds	r7, #40	; 0x28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000fe8 	.word	0x20000fe8
 8009fe8:	20000ff4 	.word	0x20000ff4
 8009fec:	20000fec 	.word	0x20000fec
 8009ff0:	20000fe0 	.word	0x20000fe0
 8009ff4:	20000ff0 	.word	0x20000ff0

08009ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d046      	beq.n	800a098 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a00a:	2308      	movs	r3, #8
 800a00c:	425b      	negs	r3, r3
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4413      	add	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	4b20      	ldr	r3, [pc, #128]	; (800a0a0 <vPortFree+0xa8>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4013      	ands	r3, r2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <vPortFree+0x42>
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	e7fe      	b.n	800a038 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d009      	beq.n	800a056 <vPortFree+0x5e>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60bb      	str	r3, [r7, #8]
 800a054:	e7fe      	b.n	800a054 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <vPortFree+0xa8>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4013      	ands	r3, r2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d019      	beq.n	800a098 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d115      	bne.n	800a098 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <vPortFree+0xa8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	43db      	mvns	r3, r3
 800a076:	401a      	ands	r2, r3
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a07c:	f7ff fa00 	bl	8009480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <vPortFree+0xac>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4413      	add	r3, r2
 800a08a:	4a06      	ldr	r2, [pc, #24]	; (800a0a4 <vPortFree+0xac>)
 800a08c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a08e:	6938      	ldr	r0, [r7, #16]
 800a090:	f000 f86c 	bl	800a16c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a094:	f7ff fa02 	bl	800949c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a098:	bf00      	nop
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000ff4 	.word	0x20000ff4
 800a0a4:	20000fec 	.word	0x20000fec

0800a0a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a0b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0b4:	4b27      	ldr	r3, [pc, #156]	; (800a154 <prvHeapInit+0xac>)
 800a0b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00c      	beq.n	800a0dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3307      	adds	r3, #7
 800a0c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 0307 	bic.w	r3, r3, #7
 800a0ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	4a1f      	ldr	r2, [pc, #124]	; (800a154 <prvHeapInit+0xac>)
 800a0d8:	4413      	add	r3, r2
 800a0da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <prvHeapInit+0xb0>)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0e6:	4b1c      	ldr	r3, [pc, #112]	; (800a158 <prvHeapInit+0xb0>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0f4:	2208      	movs	r2, #8
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0307 	bic.w	r3, r3, #7
 800a102:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4a15      	ldr	r2, [pc, #84]	; (800a15c <prvHeapInit+0xb4>)
 800a108:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <prvHeapInit+0xb4>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2200      	movs	r2, #0
 800a110:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <prvHeapInit+0xb4>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	1ad2      	subs	r2, r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <prvHeapInit+0xb4>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	4a0a      	ldr	r2, [pc, #40]	; (800a160 <prvHeapInit+0xb8>)
 800a136:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	4a09      	ldr	r2, [pc, #36]	; (800a164 <prvHeapInit+0xbc>)
 800a13e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <prvHeapInit+0xc0>)
 800a142:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a146:	601a      	str	r2, [r3, #0]
}
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20000428 	.word	0x20000428
 800a158:	20000fe0 	.word	0x20000fe0
 800a15c:	20000fe8 	.word	0x20000fe8
 800a160:	20000ff0 	.word	0x20000ff0
 800a164:	20000fec 	.word	0x20000fec
 800a168:	20000ff4 	.word	0x20000ff4

0800a16c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a174:	4b28      	ldr	r3, [pc, #160]	; (800a218 <prvInsertBlockIntoFreeList+0xac>)
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	e002      	b.n	800a180 <prvInsertBlockIntoFreeList+0x14>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	429a      	cmp	r2, r3
 800a188:	d8f7      	bhi.n	800a17a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	4413      	add	r3, r2
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d108      	bne.n	800a1ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	441a      	add	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	441a      	add	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d118      	bne.n	800a1f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	4b15      	ldr	r3, [pc, #84]	; (800a21c <prvInsertBlockIntoFreeList+0xb0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d00d      	beq.n	800a1ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	441a      	add	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	e008      	b.n	800a1fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1ea:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <prvInsertBlockIntoFreeList+0xb0>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	e003      	b.n	800a1fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	429a      	cmp	r2, r3
 800a202:	d002      	beq.n	800a20a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a20a:	bf00      	nop
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	20000fe0 	.word	0x20000fe0
 800a21c:	20000fe8 	.word	0x20000fe8

0800a220 <__errno>:
 800a220:	4b01      	ldr	r3, [pc, #4]	; (800a228 <__errno+0x8>)
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	20000018 	.word	0x20000018

0800a22c <__libc_init_array>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4e0d      	ldr	r6, [pc, #52]	; (800a264 <__libc_init_array+0x38>)
 800a230:	4c0d      	ldr	r4, [pc, #52]	; (800a268 <__libc_init_array+0x3c>)
 800a232:	1ba4      	subs	r4, r4, r6
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	2500      	movs	r5, #0
 800a238:	42a5      	cmp	r5, r4
 800a23a:	d109      	bne.n	800a250 <__libc_init_array+0x24>
 800a23c:	4e0b      	ldr	r6, [pc, #44]	; (800a26c <__libc_init_array+0x40>)
 800a23e:	4c0c      	ldr	r4, [pc, #48]	; (800a270 <__libc_init_array+0x44>)
 800a240:	f000 ff10 	bl	800b064 <_init>
 800a244:	1ba4      	subs	r4, r4, r6
 800a246:	10a4      	asrs	r4, r4, #2
 800a248:	2500      	movs	r5, #0
 800a24a:	42a5      	cmp	r5, r4
 800a24c:	d105      	bne.n	800a25a <__libc_init_array+0x2e>
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a254:	4798      	blx	r3
 800a256:	3501      	adds	r5, #1
 800a258:	e7ee      	b.n	800a238 <__libc_init_array+0xc>
 800a25a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a25e:	4798      	blx	r3
 800a260:	3501      	adds	r5, #1
 800a262:	e7f2      	b.n	800a24a <__libc_init_array+0x1e>
 800a264:	0800b5d8 	.word	0x0800b5d8
 800a268:	0800b5d8 	.word	0x0800b5d8
 800a26c:	0800b5d8 	.word	0x0800b5d8
 800a270:	0800b5dc 	.word	0x0800b5dc

0800a274 <memcpy>:
 800a274:	b510      	push	{r4, lr}
 800a276:	1e43      	subs	r3, r0, #1
 800a278:	440a      	add	r2, r1
 800a27a:	4291      	cmp	r1, r2
 800a27c:	d100      	bne.n	800a280 <memcpy+0xc>
 800a27e:	bd10      	pop	{r4, pc}
 800a280:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a284:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a288:	e7f7      	b.n	800a27a <memcpy+0x6>

0800a28a <memset>:
 800a28a:	4402      	add	r2, r0
 800a28c:	4603      	mov	r3, r0
 800a28e:	4293      	cmp	r3, r2
 800a290:	d100      	bne.n	800a294 <memset+0xa>
 800a292:	4770      	bx	lr
 800a294:	f803 1b01 	strb.w	r1, [r3], #1
 800a298:	e7f9      	b.n	800a28e <memset+0x4>
	...

0800a29c <iprintf>:
 800a29c:	b40f      	push	{r0, r1, r2, r3}
 800a29e:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <iprintf+0x2c>)
 800a2a0:	b513      	push	{r0, r1, r4, lr}
 800a2a2:	681c      	ldr	r4, [r3, #0]
 800a2a4:	b124      	cbz	r4, 800a2b0 <iprintf+0x14>
 800a2a6:	69a3      	ldr	r3, [r4, #24]
 800a2a8:	b913      	cbnz	r3, 800a2b0 <iprintf+0x14>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f84e 	bl	800a34c <__sinit>
 800a2b0:	ab05      	add	r3, sp, #20
 800a2b2:	9a04      	ldr	r2, [sp, #16]
 800a2b4:	68a1      	ldr	r1, [r4, #8]
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 f955 	bl	800a568 <_vfiprintf_r>
 800a2be:	b002      	add	sp, #8
 800a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c4:	b004      	add	sp, #16
 800a2c6:	4770      	bx	lr
 800a2c8:	20000018 	.word	0x20000018

0800a2cc <std>:
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	b510      	push	{r4, lr}
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2d6:	6083      	str	r3, [r0, #8]
 800a2d8:	8181      	strh	r1, [r0, #12]
 800a2da:	6643      	str	r3, [r0, #100]	; 0x64
 800a2dc:	81c2      	strh	r2, [r0, #14]
 800a2de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2e2:	6183      	str	r3, [r0, #24]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	2208      	movs	r2, #8
 800a2e8:	305c      	adds	r0, #92	; 0x5c
 800a2ea:	f7ff ffce 	bl	800a28a <memset>
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <std+0x38>)
 800a2f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <std+0x3c>)
 800a2f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2f6:	4b05      	ldr	r3, [pc, #20]	; (800a30c <std+0x40>)
 800a2f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2fa:	4b05      	ldr	r3, [pc, #20]	; (800a310 <std+0x44>)
 800a2fc:	6224      	str	r4, [r4, #32]
 800a2fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a300:	bd10      	pop	{r4, pc}
 800a302:	bf00      	nop
 800a304:	0800aac5 	.word	0x0800aac5
 800a308:	0800aae7 	.word	0x0800aae7
 800a30c:	0800ab1f 	.word	0x0800ab1f
 800a310:	0800ab43 	.word	0x0800ab43

0800a314 <_cleanup_r>:
 800a314:	4901      	ldr	r1, [pc, #4]	; (800a31c <_cleanup_r+0x8>)
 800a316:	f000 b885 	b.w	800a424 <_fwalk_reent>
 800a31a:	bf00      	nop
 800a31c:	0800ae1d 	.word	0x0800ae1d

0800a320 <__sfmoreglue>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	1e4a      	subs	r2, r1, #1
 800a324:	2568      	movs	r5, #104	; 0x68
 800a326:	4355      	muls	r5, r2
 800a328:	460e      	mov	r6, r1
 800a32a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a32e:	f000 f897 	bl	800a460 <_malloc_r>
 800a332:	4604      	mov	r4, r0
 800a334:	b140      	cbz	r0, 800a348 <__sfmoreglue+0x28>
 800a336:	2100      	movs	r1, #0
 800a338:	e9c0 1600 	strd	r1, r6, [r0]
 800a33c:	300c      	adds	r0, #12
 800a33e:	60a0      	str	r0, [r4, #8]
 800a340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a344:	f7ff ffa1 	bl	800a28a <memset>
 800a348:	4620      	mov	r0, r4
 800a34a:	bd70      	pop	{r4, r5, r6, pc}

0800a34c <__sinit>:
 800a34c:	6983      	ldr	r3, [r0, #24]
 800a34e:	b510      	push	{r4, lr}
 800a350:	4604      	mov	r4, r0
 800a352:	bb33      	cbnz	r3, 800a3a2 <__sinit+0x56>
 800a354:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a358:	6503      	str	r3, [r0, #80]	; 0x50
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <__sinit+0x58>)
 800a35c:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <__sinit+0x5c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6282      	str	r2, [r0, #40]	; 0x28
 800a362:	4298      	cmp	r0, r3
 800a364:	bf04      	itt	eq
 800a366:	2301      	moveq	r3, #1
 800a368:	6183      	streq	r3, [r0, #24]
 800a36a:	f000 f81f 	bl	800a3ac <__sfp>
 800a36e:	6060      	str	r0, [r4, #4]
 800a370:	4620      	mov	r0, r4
 800a372:	f000 f81b 	bl	800a3ac <__sfp>
 800a376:	60a0      	str	r0, [r4, #8]
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 f817 	bl	800a3ac <__sfp>
 800a37e:	2200      	movs	r2, #0
 800a380:	60e0      	str	r0, [r4, #12]
 800a382:	2104      	movs	r1, #4
 800a384:	6860      	ldr	r0, [r4, #4]
 800a386:	f7ff ffa1 	bl	800a2cc <std>
 800a38a:	2201      	movs	r2, #1
 800a38c:	2109      	movs	r1, #9
 800a38e:	68a0      	ldr	r0, [r4, #8]
 800a390:	f7ff ff9c 	bl	800a2cc <std>
 800a394:	2202      	movs	r2, #2
 800a396:	2112      	movs	r1, #18
 800a398:	68e0      	ldr	r0, [r4, #12]
 800a39a:	f7ff ff97 	bl	800a2cc <std>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	61a3      	str	r3, [r4, #24]
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	0800b538 	.word	0x0800b538
 800a3a8:	0800a315 	.word	0x0800a315

0800a3ac <__sfp>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <__sfp+0x70>)
 800a3b0:	681e      	ldr	r6, [r3, #0]
 800a3b2:	69b3      	ldr	r3, [r6, #24]
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	b913      	cbnz	r3, 800a3be <__sfp+0x12>
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ffc7 	bl	800a34c <__sinit>
 800a3be:	3648      	adds	r6, #72	; 0x48
 800a3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	d503      	bpl.n	800a3d0 <__sfp+0x24>
 800a3c8:	6833      	ldr	r3, [r6, #0]
 800a3ca:	b133      	cbz	r3, 800a3da <__sfp+0x2e>
 800a3cc:	6836      	ldr	r6, [r6, #0]
 800a3ce:	e7f7      	b.n	800a3c0 <__sfp+0x14>
 800a3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3d4:	b16d      	cbz	r5, 800a3f2 <__sfp+0x46>
 800a3d6:	3468      	adds	r4, #104	; 0x68
 800a3d8:	e7f4      	b.n	800a3c4 <__sfp+0x18>
 800a3da:	2104      	movs	r1, #4
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7ff ff9f 	bl	800a320 <__sfmoreglue>
 800a3e2:	6030      	str	r0, [r6, #0]
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d1f1      	bne.n	800a3cc <__sfp+0x20>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <__sfp+0x74>)
 800a3f4:	6665      	str	r5, [r4, #100]	; 0x64
 800a3f6:	e9c4 5500 	strd	r5, r5, [r4]
 800a3fa:	60a5      	str	r5, [r4, #8]
 800a3fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a400:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a404:	2208      	movs	r2, #8
 800a406:	4629      	mov	r1, r5
 800a408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a40c:	f7ff ff3d 	bl	800a28a <memset>
 800a410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a418:	e7e9      	b.n	800a3ee <__sfp+0x42>
 800a41a:	bf00      	nop
 800a41c:	0800b538 	.word	0x0800b538
 800a420:	ffff0001 	.word	0xffff0001

0800a424 <_fwalk_reent>:
 800a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a428:	4680      	mov	r8, r0
 800a42a:	4689      	mov	r9, r1
 800a42c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a430:	2600      	movs	r6, #0
 800a432:	b914      	cbnz	r4, 800a43a <_fwalk_reent+0x16>
 800a434:	4630      	mov	r0, r6
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a43e:	3f01      	subs	r7, #1
 800a440:	d501      	bpl.n	800a446 <_fwalk_reent+0x22>
 800a442:	6824      	ldr	r4, [r4, #0]
 800a444:	e7f5      	b.n	800a432 <_fwalk_reent+0xe>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d907      	bls.n	800a45c <_fwalk_reent+0x38>
 800a44c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a450:	3301      	adds	r3, #1
 800a452:	d003      	beq.n	800a45c <_fwalk_reent+0x38>
 800a454:	4629      	mov	r1, r5
 800a456:	4640      	mov	r0, r8
 800a458:	47c8      	blx	r9
 800a45a:	4306      	orrs	r6, r0
 800a45c:	3568      	adds	r5, #104	; 0x68
 800a45e:	e7ee      	b.n	800a43e <_fwalk_reent+0x1a>

0800a460 <_malloc_r>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	1ccd      	adds	r5, r1, #3
 800a464:	f025 0503 	bic.w	r5, r5, #3
 800a468:	3508      	adds	r5, #8
 800a46a:	2d0c      	cmp	r5, #12
 800a46c:	bf38      	it	cc
 800a46e:	250c      	movcc	r5, #12
 800a470:	2d00      	cmp	r5, #0
 800a472:	4606      	mov	r6, r0
 800a474:	db01      	blt.n	800a47a <_malloc_r+0x1a>
 800a476:	42a9      	cmp	r1, r5
 800a478:	d903      	bls.n	800a482 <_malloc_r+0x22>
 800a47a:	230c      	movs	r3, #12
 800a47c:	6033      	str	r3, [r6, #0]
 800a47e:	2000      	movs	r0, #0
 800a480:	bd70      	pop	{r4, r5, r6, pc}
 800a482:	f000 fd6b 	bl	800af5c <__malloc_lock>
 800a486:	4a21      	ldr	r2, [pc, #132]	; (800a50c <_malloc_r+0xac>)
 800a488:	6814      	ldr	r4, [r2, #0]
 800a48a:	4621      	mov	r1, r4
 800a48c:	b991      	cbnz	r1, 800a4b4 <_malloc_r+0x54>
 800a48e:	4c20      	ldr	r4, [pc, #128]	; (800a510 <_malloc_r+0xb0>)
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	b91b      	cbnz	r3, 800a49c <_malloc_r+0x3c>
 800a494:	4630      	mov	r0, r6
 800a496:	f000 fb05 	bl	800aaa4 <_sbrk_r>
 800a49a:	6020      	str	r0, [r4, #0]
 800a49c:	4629      	mov	r1, r5
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f000 fb00 	bl	800aaa4 <_sbrk_r>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d124      	bne.n	800a4f2 <_malloc_r+0x92>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	6033      	str	r3, [r6, #0]
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 fd56 	bl	800af5e <__malloc_unlock>
 800a4b2:	e7e4      	b.n	800a47e <_malloc_r+0x1e>
 800a4b4:	680b      	ldr	r3, [r1, #0]
 800a4b6:	1b5b      	subs	r3, r3, r5
 800a4b8:	d418      	bmi.n	800a4ec <_malloc_r+0x8c>
 800a4ba:	2b0b      	cmp	r3, #11
 800a4bc:	d90f      	bls.n	800a4de <_malloc_r+0x7e>
 800a4be:	600b      	str	r3, [r1, #0]
 800a4c0:	50cd      	str	r5, [r1, r3]
 800a4c2:	18cc      	adds	r4, r1, r3
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 fd4a 	bl	800af5e <__malloc_unlock>
 800a4ca:	f104 000b 	add.w	r0, r4, #11
 800a4ce:	1d23      	adds	r3, r4, #4
 800a4d0:	f020 0007 	bic.w	r0, r0, #7
 800a4d4:	1ac3      	subs	r3, r0, r3
 800a4d6:	d0d3      	beq.n	800a480 <_malloc_r+0x20>
 800a4d8:	425a      	negs	r2, r3
 800a4da:	50e2      	str	r2, [r4, r3]
 800a4dc:	e7d0      	b.n	800a480 <_malloc_r+0x20>
 800a4de:	428c      	cmp	r4, r1
 800a4e0:	684b      	ldr	r3, [r1, #4]
 800a4e2:	bf16      	itet	ne
 800a4e4:	6063      	strne	r3, [r4, #4]
 800a4e6:	6013      	streq	r3, [r2, #0]
 800a4e8:	460c      	movne	r4, r1
 800a4ea:	e7eb      	b.n	800a4c4 <_malloc_r+0x64>
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	6849      	ldr	r1, [r1, #4]
 800a4f0:	e7cc      	b.n	800a48c <_malloc_r+0x2c>
 800a4f2:	1cc4      	adds	r4, r0, #3
 800a4f4:	f024 0403 	bic.w	r4, r4, #3
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d005      	beq.n	800a508 <_malloc_r+0xa8>
 800a4fc:	1a21      	subs	r1, r4, r0
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 fad0 	bl	800aaa4 <_sbrk_r>
 800a504:	3001      	adds	r0, #1
 800a506:	d0cf      	beq.n	800a4a8 <_malloc_r+0x48>
 800a508:	6025      	str	r5, [r4, #0]
 800a50a:	e7db      	b.n	800a4c4 <_malloc_r+0x64>
 800a50c:	20000ff8 	.word	0x20000ff8
 800a510:	20000ffc 	.word	0x20000ffc

0800a514 <__sfputc_r>:
 800a514:	6893      	ldr	r3, [r2, #8]
 800a516:	3b01      	subs	r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	b410      	push	{r4}
 800a51c:	6093      	str	r3, [r2, #8]
 800a51e:	da08      	bge.n	800a532 <__sfputc_r+0x1e>
 800a520:	6994      	ldr	r4, [r2, #24]
 800a522:	42a3      	cmp	r3, r4
 800a524:	db01      	blt.n	800a52a <__sfputc_r+0x16>
 800a526:	290a      	cmp	r1, #10
 800a528:	d103      	bne.n	800a532 <__sfputc_r+0x1e>
 800a52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52e:	f000 bb0d 	b.w	800ab4c <__swbuf_r>
 800a532:	6813      	ldr	r3, [r2, #0]
 800a534:	1c58      	adds	r0, r3, #1
 800a536:	6010      	str	r0, [r2, #0]
 800a538:	7019      	strb	r1, [r3, #0]
 800a53a:	4608      	mov	r0, r1
 800a53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <__sfputs_r>:
 800a542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a544:	4606      	mov	r6, r0
 800a546:	460f      	mov	r7, r1
 800a548:	4614      	mov	r4, r2
 800a54a:	18d5      	adds	r5, r2, r3
 800a54c:	42ac      	cmp	r4, r5
 800a54e:	d101      	bne.n	800a554 <__sfputs_r+0x12>
 800a550:	2000      	movs	r0, #0
 800a552:	e007      	b.n	800a564 <__sfputs_r+0x22>
 800a554:	463a      	mov	r2, r7
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7ff ffda 	bl	800a514 <__sfputc_r>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d1f3      	bne.n	800a54c <__sfputs_r+0xa>
 800a564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a568 <_vfiprintf_r>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	460c      	mov	r4, r1
 800a56e:	b09d      	sub	sp, #116	; 0x74
 800a570:	4617      	mov	r7, r2
 800a572:	461d      	mov	r5, r3
 800a574:	4606      	mov	r6, r0
 800a576:	b118      	cbz	r0, 800a580 <_vfiprintf_r+0x18>
 800a578:	6983      	ldr	r3, [r0, #24]
 800a57a:	b90b      	cbnz	r3, 800a580 <_vfiprintf_r+0x18>
 800a57c:	f7ff fee6 	bl	800a34c <__sinit>
 800a580:	4b7c      	ldr	r3, [pc, #496]	; (800a774 <_vfiprintf_r+0x20c>)
 800a582:	429c      	cmp	r4, r3
 800a584:	d158      	bne.n	800a638 <_vfiprintf_r+0xd0>
 800a586:	6874      	ldr	r4, [r6, #4]
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	0718      	lsls	r0, r3, #28
 800a58c:	d55e      	bpl.n	800a64c <_vfiprintf_r+0xe4>
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d05b      	beq.n	800a64c <_vfiprintf_r+0xe4>
 800a594:	2300      	movs	r3, #0
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	2320      	movs	r3, #32
 800a59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a59e:	2330      	movs	r3, #48	; 0x30
 800a5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a4:	9503      	str	r5, [sp, #12]
 800a5a6:	f04f 0b01 	mov.w	fp, #1
 800a5aa:	46b8      	mov	r8, r7
 800a5ac:	4645      	mov	r5, r8
 800a5ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a5b2:	b10b      	cbz	r3, 800a5b8 <_vfiprintf_r+0x50>
 800a5b4:	2b25      	cmp	r3, #37	; 0x25
 800a5b6:	d154      	bne.n	800a662 <_vfiprintf_r+0xfa>
 800a5b8:	ebb8 0a07 	subs.w	sl, r8, r7
 800a5bc:	d00b      	beq.n	800a5d6 <_vfiprintf_r+0x6e>
 800a5be:	4653      	mov	r3, sl
 800a5c0:	463a      	mov	r2, r7
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7ff ffbc 	bl	800a542 <__sfputs_r>
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f000 80c2 	beq.w	800a754 <_vfiprintf_r+0x1ec>
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	4453      	add	r3, sl
 800a5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d6:	f898 3000 	ldrb.w	r3, [r8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80ba 	beq.w	800a754 <_vfiprintf_r+0x1ec>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ea:	9304      	str	r3, [sp, #16]
 800a5ec:	9307      	str	r3, [sp, #28]
 800a5ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f4:	46a8      	mov	r8, r5
 800a5f6:	2205      	movs	r2, #5
 800a5f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a5fc:	485e      	ldr	r0, [pc, #376]	; (800a778 <_vfiprintf_r+0x210>)
 800a5fe:	f7f5 fe07 	bl	8000210 <memchr>
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	bb78      	cbnz	r0, 800a666 <_vfiprintf_r+0xfe>
 800a606:	06d9      	lsls	r1, r3, #27
 800a608:	bf44      	itt	mi
 800a60a:	2220      	movmi	r2, #32
 800a60c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a610:	071a      	lsls	r2, r3, #28
 800a612:	bf44      	itt	mi
 800a614:	222b      	movmi	r2, #43	; 0x2b
 800a616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a61a:	782a      	ldrb	r2, [r5, #0]
 800a61c:	2a2a      	cmp	r2, #42	; 0x2a
 800a61e:	d02a      	beq.n	800a676 <_vfiprintf_r+0x10e>
 800a620:	9a07      	ldr	r2, [sp, #28]
 800a622:	46a8      	mov	r8, r5
 800a624:	2000      	movs	r0, #0
 800a626:	250a      	movs	r5, #10
 800a628:	4641      	mov	r1, r8
 800a62a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62e:	3b30      	subs	r3, #48	; 0x30
 800a630:	2b09      	cmp	r3, #9
 800a632:	d969      	bls.n	800a708 <_vfiprintf_r+0x1a0>
 800a634:	b360      	cbz	r0, 800a690 <_vfiprintf_r+0x128>
 800a636:	e024      	b.n	800a682 <_vfiprintf_r+0x11a>
 800a638:	4b50      	ldr	r3, [pc, #320]	; (800a77c <_vfiprintf_r+0x214>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d101      	bne.n	800a642 <_vfiprintf_r+0xda>
 800a63e:	68b4      	ldr	r4, [r6, #8]
 800a640:	e7a2      	b.n	800a588 <_vfiprintf_r+0x20>
 800a642:	4b4f      	ldr	r3, [pc, #316]	; (800a780 <_vfiprintf_r+0x218>)
 800a644:	429c      	cmp	r4, r3
 800a646:	bf08      	it	eq
 800a648:	68f4      	ldreq	r4, [r6, #12]
 800a64a:	e79d      	b.n	800a588 <_vfiprintf_r+0x20>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4630      	mov	r0, r6
 800a650:	f000 fae0 	bl	800ac14 <__swsetup_r>
 800a654:	2800      	cmp	r0, #0
 800a656:	d09d      	beq.n	800a594 <_vfiprintf_r+0x2c>
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	b01d      	add	sp, #116	; 0x74
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	46a8      	mov	r8, r5
 800a664:	e7a2      	b.n	800a5ac <_vfiprintf_r+0x44>
 800a666:	4a44      	ldr	r2, [pc, #272]	; (800a778 <_vfiprintf_r+0x210>)
 800a668:	1a80      	subs	r0, r0, r2
 800a66a:	fa0b f000 	lsl.w	r0, fp, r0
 800a66e:	4318      	orrs	r0, r3
 800a670:	9004      	str	r0, [sp, #16]
 800a672:	4645      	mov	r5, r8
 800a674:	e7be      	b.n	800a5f4 <_vfiprintf_r+0x8c>
 800a676:	9a03      	ldr	r2, [sp, #12]
 800a678:	1d11      	adds	r1, r2, #4
 800a67a:	6812      	ldr	r2, [r2, #0]
 800a67c:	9103      	str	r1, [sp, #12]
 800a67e:	2a00      	cmp	r2, #0
 800a680:	db01      	blt.n	800a686 <_vfiprintf_r+0x11e>
 800a682:	9207      	str	r2, [sp, #28]
 800a684:	e004      	b.n	800a690 <_vfiprintf_r+0x128>
 800a686:	4252      	negs	r2, r2
 800a688:	f043 0302 	orr.w	r3, r3, #2
 800a68c:	9207      	str	r2, [sp, #28]
 800a68e:	9304      	str	r3, [sp, #16]
 800a690:	f898 3000 	ldrb.w	r3, [r8]
 800a694:	2b2e      	cmp	r3, #46	; 0x2e
 800a696:	d10e      	bne.n	800a6b6 <_vfiprintf_r+0x14e>
 800a698:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a69c:	2b2a      	cmp	r3, #42	; 0x2a
 800a69e:	d138      	bne.n	800a712 <_vfiprintf_r+0x1aa>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	1d1a      	adds	r2, r3, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	9203      	str	r2, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfb8      	it	lt
 800a6ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b0:	f108 0802 	add.w	r8, r8, #2
 800a6b4:	9305      	str	r3, [sp, #20]
 800a6b6:	4d33      	ldr	r5, [pc, #204]	; (800a784 <_vfiprintf_r+0x21c>)
 800a6b8:	f898 1000 	ldrb.w	r1, [r8]
 800a6bc:	2203      	movs	r2, #3
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f7f5 fda6 	bl	8000210 <memchr>
 800a6c4:	b140      	cbz	r0, 800a6d8 <_vfiprintf_r+0x170>
 800a6c6:	2340      	movs	r3, #64	; 0x40
 800a6c8:	1b40      	subs	r0, r0, r5
 800a6ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	4303      	orrs	r3, r0
 800a6d2:	f108 0801 	add.w	r8, r8, #1
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	f898 1000 	ldrb.w	r1, [r8]
 800a6dc:	482a      	ldr	r0, [pc, #168]	; (800a788 <_vfiprintf_r+0x220>)
 800a6de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	f108 0701 	add.w	r7, r8, #1
 800a6e8:	f7f5 fd92 	bl	8000210 <memchr>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d037      	beq.n	800a760 <_vfiprintf_r+0x1f8>
 800a6f0:	4b26      	ldr	r3, [pc, #152]	; (800a78c <_vfiprintf_r+0x224>)
 800a6f2:	bb1b      	cbnz	r3, 800a73c <_vfiprintf_r+0x1d4>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3307      	adds	r3, #7
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	444b      	add	r3, r9
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	e750      	b.n	800a5aa <_vfiprintf_r+0x42>
 800a708:	fb05 3202 	mla	r2, r5, r2, r3
 800a70c:	2001      	movs	r0, #1
 800a70e:	4688      	mov	r8, r1
 800a710:	e78a      	b.n	800a628 <_vfiprintf_r+0xc0>
 800a712:	2300      	movs	r3, #0
 800a714:	f108 0801 	add.w	r8, r8, #1
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	4619      	mov	r1, r3
 800a71c:	250a      	movs	r5, #10
 800a71e:	4640      	mov	r0, r8
 800a720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a724:	3a30      	subs	r2, #48	; 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d903      	bls.n	800a732 <_vfiprintf_r+0x1ca>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0c3      	beq.n	800a6b6 <_vfiprintf_r+0x14e>
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	e7c1      	b.n	800a6b6 <_vfiprintf_r+0x14e>
 800a732:	fb05 2101 	mla	r1, r5, r1, r2
 800a736:	2301      	movs	r3, #1
 800a738:	4680      	mov	r8, r0
 800a73a:	e7f0      	b.n	800a71e <_vfiprintf_r+0x1b6>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4622      	mov	r2, r4
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <_vfiprintf_r+0x228>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	4630      	mov	r0, r6
 800a748:	f3af 8000 	nop.w
 800a74c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a750:	4681      	mov	r9, r0
 800a752:	d1d5      	bne.n	800a700 <_vfiprintf_r+0x198>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	065b      	lsls	r3, r3, #25
 800a758:	f53f af7e 	bmi.w	800a658 <_vfiprintf_r+0xf0>
 800a75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a75e:	e77d      	b.n	800a65c <_vfiprintf_r+0xf4>
 800a760:	ab03      	add	r3, sp, #12
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4622      	mov	r2, r4
 800a766:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <_vfiprintf_r+0x228>)
 800a768:	a904      	add	r1, sp, #16
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f888 	bl	800a880 <_printf_i>
 800a770:	e7ec      	b.n	800a74c <_vfiprintf_r+0x1e4>
 800a772:	bf00      	nop
 800a774:	0800b55c 	.word	0x0800b55c
 800a778:	0800b59c 	.word	0x0800b59c
 800a77c:	0800b57c 	.word	0x0800b57c
 800a780:	0800b53c 	.word	0x0800b53c
 800a784:	0800b5a2 	.word	0x0800b5a2
 800a788:	0800b5a6 	.word	0x0800b5a6
 800a78c:	00000000 	.word	0x00000000
 800a790:	0800a543 	.word	0x0800a543

0800a794 <_printf_common>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	4691      	mov	r9, r2
 800a79a:	461f      	mov	r7, r3
 800a79c:	688a      	ldr	r2, [r1, #8]
 800a79e:	690b      	ldr	r3, [r1, #16]
 800a7a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	bfb8      	it	lt
 800a7a8:	4613      	movlt	r3, r2
 800a7aa:	f8c9 3000 	str.w	r3, [r9]
 800a7ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	b112      	cbz	r2, 800a7be <_printf_common+0x2a>
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	f8c9 3000 	str.w	r3, [r9]
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	0699      	lsls	r1, r3, #26
 800a7c2:	bf42      	ittt	mi
 800a7c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a7c8:	3302      	addmi	r3, #2
 800a7ca:	f8c9 3000 	strmi.w	r3, [r9]
 800a7ce:	6825      	ldr	r5, [r4, #0]
 800a7d0:	f015 0506 	ands.w	r5, r5, #6
 800a7d4:	d107      	bne.n	800a7e6 <_printf_common+0x52>
 800a7d6:	f104 0a19 	add.w	sl, r4, #25
 800a7da:	68e3      	ldr	r3, [r4, #12]
 800a7dc:	f8d9 2000 	ldr.w	r2, [r9]
 800a7e0:	1a9b      	subs	r3, r3, r2
 800a7e2:	42ab      	cmp	r3, r5
 800a7e4:	dc28      	bgt.n	800a838 <_printf_common+0xa4>
 800a7e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	3300      	adds	r3, #0
 800a7ee:	bf18      	it	ne
 800a7f0:	2301      	movne	r3, #1
 800a7f2:	0692      	lsls	r2, r2, #26
 800a7f4:	d42d      	bmi.n	800a852 <_printf_common+0xbe>
 800a7f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	47c0      	blx	r8
 800a800:	3001      	adds	r0, #1
 800a802:	d020      	beq.n	800a846 <_printf_common+0xb2>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	68e5      	ldr	r5, [r4, #12]
 800a808:	f8d9 2000 	ldr.w	r2, [r9]
 800a80c:	f003 0306 	and.w	r3, r3, #6
 800a810:	2b04      	cmp	r3, #4
 800a812:	bf08      	it	eq
 800a814:	1aad      	subeq	r5, r5, r2
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	6922      	ldr	r2, [r4, #16]
 800a81a:	bf0c      	ite	eq
 800a81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a820:	2500      	movne	r5, #0
 800a822:	4293      	cmp	r3, r2
 800a824:	bfc4      	itt	gt
 800a826:	1a9b      	subgt	r3, r3, r2
 800a828:	18ed      	addgt	r5, r5, r3
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	341a      	adds	r4, #26
 800a830:	454d      	cmp	r5, r9
 800a832:	d11a      	bne.n	800a86a <_printf_common+0xd6>
 800a834:	2000      	movs	r0, #0
 800a836:	e008      	b.n	800a84a <_printf_common+0xb6>
 800a838:	2301      	movs	r3, #1
 800a83a:	4652      	mov	r2, sl
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	47c0      	blx	r8
 800a842:	3001      	adds	r0, #1
 800a844:	d103      	bne.n	800a84e <_printf_common+0xba>
 800a846:	f04f 30ff 	mov.w	r0, #4294967295
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	3501      	adds	r5, #1
 800a850:	e7c3      	b.n	800a7da <_printf_common+0x46>
 800a852:	18e1      	adds	r1, r4, r3
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	2030      	movs	r0, #48	; 0x30
 800a858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a85c:	4422      	add	r2, r4
 800a85e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a866:	3302      	adds	r3, #2
 800a868:	e7c5      	b.n	800a7f6 <_printf_common+0x62>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4622      	mov	r2, r4
 800a86e:	4639      	mov	r1, r7
 800a870:	4630      	mov	r0, r6
 800a872:	47c0      	blx	r8
 800a874:	3001      	adds	r0, #1
 800a876:	d0e6      	beq.n	800a846 <_printf_common+0xb2>
 800a878:	f109 0901 	add.w	r9, r9, #1
 800a87c:	e7d8      	b.n	800a830 <_printf_common+0x9c>
	...

0800a880 <_printf_i>:
 800a880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a888:	460c      	mov	r4, r1
 800a88a:	7e09      	ldrb	r1, [r1, #24]
 800a88c:	b085      	sub	sp, #20
 800a88e:	296e      	cmp	r1, #110	; 0x6e
 800a890:	4617      	mov	r7, r2
 800a892:	4606      	mov	r6, r0
 800a894:	4698      	mov	r8, r3
 800a896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a898:	f000 80b3 	beq.w	800aa02 <_printf_i+0x182>
 800a89c:	d822      	bhi.n	800a8e4 <_printf_i+0x64>
 800a89e:	2963      	cmp	r1, #99	; 0x63
 800a8a0:	d036      	beq.n	800a910 <_printf_i+0x90>
 800a8a2:	d80a      	bhi.n	800a8ba <_printf_i+0x3a>
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	f000 80b9 	beq.w	800aa1c <_printf_i+0x19c>
 800a8aa:	2958      	cmp	r1, #88	; 0x58
 800a8ac:	f000 8083 	beq.w	800a9b6 <_printf_i+0x136>
 800a8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a8b8:	e032      	b.n	800a920 <_printf_i+0xa0>
 800a8ba:	2964      	cmp	r1, #100	; 0x64
 800a8bc:	d001      	beq.n	800a8c2 <_printf_i+0x42>
 800a8be:	2969      	cmp	r1, #105	; 0x69
 800a8c0:	d1f6      	bne.n	800a8b0 <_printf_i+0x30>
 800a8c2:	6820      	ldr	r0, [r4, #0]
 800a8c4:	6813      	ldr	r3, [r2, #0]
 800a8c6:	0605      	lsls	r5, r0, #24
 800a8c8:	f103 0104 	add.w	r1, r3, #4
 800a8cc:	d52a      	bpl.n	800a924 <_printf_i+0xa4>
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6011      	str	r1, [r2, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da03      	bge.n	800a8de <_printf_i+0x5e>
 800a8d6:	222d      	movs	r2, #45	; 0x2d
 800a8d8:	425b      	negs	r3, r3
 800a8da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a8de:	486f      	ldr	r0, [pc, #444]	; (800aa9c <_printf_i+0x21c>)
 800a8e0:	220a      	movs	r2, #10
 800a8e2:	e039      	b.n	800a958 <_printf_i+0xd8>
 800a8e4:	2973      	cmp	r1, #115	; 0x73
 800a8e6:	f000 809d 	beq.w	800aa24 <_printf_i+0x1a4>
 800a8ea:	d808      	bhi.n	800a8fe <_printf_i+0x7e>
 800a8ec:	296f      	cmp	r1, #111	; 0x6f
 800a8ee:	d020      	beq.n	800a932 <_printf_i+0xb2>
 800a8f0:	2970      	cmp	r1, #112	; 0x70
 800a8f2:	d1dd      	bne.n	800a8b0 <_printf_i+0x30>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	f043 0320 	orr.w	r3, r3, #32
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	e003      	b.n	800a906 <_printf_i+0x86>
 800a8fe:	2975      	cmp	r1, #117	; 0x75
 800a900:	d017      	beq.n	800a932 <_printf_i+0xb2>
 800a902:	2978      	cmp	r1, #120	; 0x78
 800a904:	d1d4      	bne.n	800a8b0 <_printf_i+0x30>
 800a906:	2378      	movs	r3, #120	; 0x78
 800a908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a90c:	4864      	ldr	r0, [pc, #400]	; (800aaa0 <_printf_i+0x220>)
 800a90e:	e055      	b.n	800a9bc <_printf_i+0x13c>
 800a910:	6813      	ldr	r3, [r2, #0]
 800a912:	1d19      	adds	r1, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6011      	str	r1, [r2, #0]
 800a918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a920:	2301      	movs	r3, #1
 800a922:	e08c      	b.n	800aa3e <_printf_i+0x1be>
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6011      	str	r1, [r2, #0]
 800a928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a92c:	bf18      	it	ne
 800a92e:	b21b      	sxthne	r3, r3
 800a930:	e7cf      	b.n	800a8d2 <_printf_i+0x52>
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1d18      	adds	r0, r3, #4
 800a938:	6010      	str	r0, [r2, #0]
 800a93a:	0628      	lsls	r0, r5, #24
 800a93c:	d501      	bpl.n	800a942 <_printf_i+0xc2>
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	e002      	b.n	800a948 <_printf_i+0xc8>
 800a942:	0668      	lsls	r0, r5, #25
 800a944:	d5fb      	bpl.n	800a93e <_printf_i+0xbe>
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	4854      	ldr	r0, [pc, #336]	; (800aa9c <_printf_i+0x21c>)
 800a94a:	296f      	cmp	r1, #111	; 0x6f
 800a94c:	bf14      	ite	ne
 800a94e:	220a      	movne	r2, #10
 800a950:	2208      	moveq	r2, #8
 800a952:	2100      	movs	r1, #0
 800a954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a958:	6865      	ldr	r5, [r4, #4]
 800a95a:	60a5      	str	r5, [r4, #8]
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	f2c0 8095 	blt.w	800aa8c <_printf_i+0x20c>
 800a962:	6821      	ldr	r1, [r4, #0]
 800a964:	f021 0104 	bic.w	r1, r1, #4
 800a968:	6021      	str	r1, [r4, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d13d      	bne.n	800a9ea <_printf_i+0x16a>
 800a96e:	2d00      	cmp	r5, #0
 800a970:	f040 808e 	bne.w	800aa90 <_printf_i+0x210>
 800a974:	4665      	mov	r5, ip
 800a976:	2a08      	cmp	r2, #8
 800a978:	d10b      	bne.n	800a992 <_printf_i+0x112>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	07db      	lsls	r3, r3, #31
 800a97e:	d508      	bpl.n	800a992 <_printf_i+0x112>
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	bfde      	ittt	le
 800a988:	2330      	movle	r3, #48	; 0x30
 800a98a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a98e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a992:	ebac 0305 	sub.w	r3, ip, r5
 800a996:	6123      	str	r3, [r4, #16]
 800a998:	f8cd 8000 	str.w	r8, [sp]
 800a99c:	463b      	mov	r3, r7
 800a99e:	aa03      	add	r2, sp, #12
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff fef6 	bl	800a794 <_printf_common>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d14d      	bne.n	800aa48 <_printf_i+0x1c8>
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	b005      	add	sp, #20
 800a9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b6:	4839      	ldr	r0, [pc, #228]	; (800aa9c <_printf_i+0x21c>)
 800a9b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a9bc:	6813      	ldr	r3, [r2, #0]
 800a9be:	6821      	ldr	r1, [r4, #0]
 800a9c0:	1d1d      	adds	r5, r3, #4
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6015      	str	r5, [r2, #0]
 800a9c6:	060a      	lsls	r2, r1, #24
 800a9c8:	d50b      	bpl.n	800a9e2 <_printf_i+0x162>
 800a9ca:	07ca      	lsls	r2, r1, #31
 800a9cc:	bf44      	itt	mi
 800a9ce:	f041 0120 	orrmi.w	r1, r1, #32
 800a9d2:	6021      	strmi	r1, [r4, #0]
 800a9d4:	b91b      	cbnz	r3, 800a9de <_printf_i+0x15e>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	f022 0220 	bic.w	r2, r2, #32
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	2210      	movs	r2, #16
 800a9e0:	e7b7      	b.n	800a952 <_printf_i+0xd2>
 800a9e2:	064d      	lsls	r5, r1, #25
 800a9e4:	bf48      	it	mi
 800a9e6:	b29b      	uxthmi	r3, r3
 800a9e8:	e7ef      	b.n	800a9ca <_printf_i+0x14a>
 800a9ea:	4665      	mov	r5, ip
 800a9ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9f0:	fb02 3311 	mls	r3, r2, r1, r3
 800a9f4:	5cc3      	ldrb	r3, [r0, r3]
 800a9f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	d1f5      	bne.n	800a9ec <_printf_i+0x16c>
 800aa00:	e7b9      	b.n	800a976 <_printf_i+0xf6>
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	6961      	ldr	r1, [r4, #20]
 800aa08:	1d18      	adds	r0, r3, #4
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	0628      	lsls	r0, r5, #24
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	d501      	bpl.n	800aa16 <_printf_i+0x196>
 800aa12:	6019      	str	r1, [r3, #0]
 800aa14:	e002      	b.n	800aa1c <_printf_i+0x19c>
 800aa16:	066a      	lsls	r2, r5, #25
 800aa18:	d5fb      	bpl.n	800aa12 <_printf_i+0x192>
 800aa1a:	8019      	strh	r1, [r3, #0]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	4665      	mov	r5, ip
 800aa22:	e7b9      	b.n	800a998 <_printf_i+0x118>
 800aa24:	6813      	ldr	r3, [r2, #0]
 800aa26:	1d19      	adds	r1, r3, #4
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	681d      	ldr	r5, [r3, #0]
 800aa2c:	6862      	ldr	r2, [r4, #4]
 800aa2e:	2100      	movs	r1, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7f5 fbed 	bl	8000210 <memchr>
 800aa36:	b108      	cbz	r0, 800aa3c <_printf_i+0x1bc>
 800aa38:	1b40      	subs	r0, r0, r5
 800aa3a:	6060      	str	r0, [r4, #4]
 800aa3c:	6863      	ldr	r3, [r4, #4]
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	2300      	movs	r3, #0
 800aa42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa46:	e7a7      	b.n	800a998 <_printf_i+0x118>
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	462a      	mov	r2, r5
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4630      	mov	r0, r6
 800aa50:	47c0      	blx	r8
 800aa52:	3001      	adds	r0, #1
 800aa54:	d0aa      	beq.n	800a9ac <_printf_i+0x12c>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	079b      	lsls	r3, r3, #30
 800aa5a:	d413      	bmi.n	800aa84 <_printf_i+0x204>
 800aa5c:	68e0      	ldr	r0, [r4, #12]
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	4298      	cmp	r0, r3
 800aa62:	bfb8      	it	lt
 800aa64:	4618      	movlt	r0, r3
 800aa66:	e7a3      	b.n	800a9b0 <_printf_i+0x130>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	464a      	mov	r2, r9
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	4630      	mov	r0, r6
 800aa70:	47c0      	blx	r8
 800aa72:	3001      	adds	r0, #1
 800aa74:	d09a      	beq.n	800a9ac <_printf_i+0x12c>
 800aa76:	3501      	adds	r5, #1
 800aa78:	68e3      	ldr	r3, [r4, #12]
 800aa7a:	9a03      	ldr	r2, [sp, #12]
 800aa7c:	1a9b      	subs	r3, r3, r2
 800aa7e:	42ab      	cmp	r3, r5
 800aa80:	dcf2      	bgt.n	800aa68 <_printf_i+0x1e8>
 800aa82:	e7eb      	b.n	800aa5c <_printf_i+0x1dc>
 800aa84:	2500      	movs	r5, #0
 800aa86:	f104 0919 	add.w	r9, r4, #25
 800aa8a:	e7f5      	b.n	800aa78 <_printf_i+0x1f8>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1ac      	bne.n	800a9ea <_printf_i+0x16a>
 800aa90:	7803      	ldrb	r3, [r0, #0]
 800aa92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa9a:	e76c      	b.n	800a976 <_printf_i+0xf6>
 800aa9c:	0800b5ad 	.word	0x0800b5ad
 800aaa0:	0800b5be 	.word	0x0800b5be

0800aaa4 <_sbrk_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4c06      	ldr	r4, [pc, #24]	; (800aac0 <_sbrk_r+0x1c>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4605      	mov	r5, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	6023      	str	r3, [r4, #0]
 800aab0:	f7f8 ffc6 	bl	8003a40 <_sbrk>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_sbrk_r+0x1a>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_sbrk_r+0x1a>
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20001988 	.word	0x20001988

0800aac4 <__sread>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	460c      	mov	r4, r1
 800aac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aacc:	f000 fa96 	bl	800affc <_read_r>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	bfab      	itete	ge
 800aad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aad6:	89a3      	ldrhlt	r3, [r4, #12]
 800aad8:	181b      	addge	r3, r3, r0
 800aada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aade:	bfac      	ite	ge
 800aae0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aae2:	81a3      	strhlt	r3, [r4, #12]
 800aae4:	bd10      	pop	{r4, pc}

0800aae6 <__swrite>:
 800aae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaea:	461f      	mov	r7, r3
 800aaec:	898b      	ldrh	r3, [r1, #12]
 800aaee:	05db      	lsls	r3, r3, #23
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	d505      	bpl.n	800ab04 <__swrite+0x1e>
 800aaf8:	2302      	movs	r3, #2
 800aafa:	2200      	movs	r2, #0
 800aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab00:	f000 f9b6 	bl	800ae70 <_lseek_r>
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab0e:	81a3      	strh	r3, [r4, #12]
 800ab10:	4632      	mov	r2, r6
 800ab12:	463b      	mov	r3, r7
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1a:	f000 b869 	b.w	800abf0 <_write_r>

0800ab1e <__sseek>:
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	460c      	mov	r4, r1
 800ab22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab26:	f000 f9a3 	bl	800ae70 <_lseek_r>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	bf15      	itete	ne
 800ab30:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab3a:	81a3      	strheq	r3, [r4, #12]
 800ab3c:	bf18      	it	ne
 800ab3e:	81a3      	strhne	r3, [r4, #12]
 800ab40:	bd10      	pop	{r4, pc}

0800ab42 <__sclose>:
 800ab42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab46:	f000 b8d3 	b.w	800acf0 <_close_r>
	...

0800ab4c <__swbuf_r>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	460e      	mov	r6, r1
 800ab50:	4614      	mov	r4, r2
 800ab52:	4605      	mov	r5, r0
 800ab54:	b118      	cbz	r0, 800ab5e <__swbuf_r+0x12>
 800ab56:	6983      	ldr	r3, [r0, #24]
 800ab58:	b90b      	cbnz	r3, 800ab5e <__swbuf_r+0x12>
 800ab5a:	f7ff fbf7 	bl	800a34c <__sinit>
 800ab5e:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <__swbuf_r+0x98>)
 800ab60:	429c      	cmp	r4, r3
 800ab62:	d12a      	bne.n	800abba <__swbuf_r+0x6e>
 800ab64:	686c      	ldr	r4, [r5, #4]
 800ab66:	69a3      	ldr	r3, [r4, #24]
 800ab68:	60a3      	str	r3, [r4, #8]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	071a      	lsls	r2, r3, #28
 800ab6e:	d52e      	bpl.n	800abce <__swbuf_r+0x82>
 800ab70:	6923      	ldr	r3, [r4, #16]
 800ab72:	b363      	cbz	r3, 800abce <__swbuf_r+0x82>
 800ab74:	6923      	ldr	r3, [r4, #16]
 800ab76:	6820      	ldr	r0, [r4, #0]
 800ab78:	1ac0      	subs	r0, r0, r3
 800ab7a:	6963      	ldr	r3, [r4, #20]
 800ab7c:	b2f6      	uxtb	r6, r6
 800ab7e:	4283      	cmp	r3, r0
 800ab80:	4637      	mov	r7, r6
 800ab82:	dc04      	bgt.n	800ab8e <__swbuf_r+0x42>
 800ab84:	4621      	mov	r1, r4
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 f948 	bl	800ae1c <_fflush_r>
 800ab8c:	bb28      	cbnz	r0, 800abda <__swbuf_r+0x8e>
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	6022      	str	r2, [r4, #0]
 800ab9a:	701e      	strb	r6, [r3, #0]
 800ab9c:	6963      	ldr	r3, [r4, #20]
 800ab9e:	3001      	adds	r0, #1
 800aba0:	4283      	cmp	r3, r0
 800aba2:	d004      	beq.n	800abae <__swbuf_r+0x62>
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	07db      	lsls	r3, r3, #31
 800aba8:	d519      	bpl.n	800abde <__swbuf_r+0x92>
 800abaa:	2e0a      	cmp	r6, #10
 800abac:	d117      	bne.n	800abde <__swbuf_r+0x92>
 800abae:	4621      	mov	r1, r4
 800abb0:	4628      	mov	r0, r5
 800abb2:	f000 f933 	bl	800ae1c <_fflush_r>
 800abb6:	b190      	cbz	r0, 800abde <__swbuf_r+0x92>
 800abb8:	e00f      	b.n	800abda <__swbuf_r+0x8e>
 800abba:	4b0b      	ldr	r3, [pc, #44]	; (800abe8 <__swbuf_r+0x9c>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	d101      	bne.n	800abc4 <__swbuf_r+0x78>
 800abc0:	68ac      	ldr	r4, [r5, #8]
 800abc2:	e7d0      	b.n	800ab66 <__swbuf_r+0x1a>
 800abc4:	4b09      	ldr	r3, [pc, #36]	; (800abec <__swbuf_r+0xa0>)
 800abc6:	429c      	cmp	r4, r3
 800abc8:	bf08      	it	eq
 800abca:	68ec      	ldreq	r4, [r5, #12]
 800abcc:	e7cb      	b.n	800ab66 <__swbuf_r+0x1a>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 f81f 	bl	800ac14 <__swsetup_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0cc      	beq.n	800ab74 <__swbuf_r+0x28>
 800abda:	f04f 37ff 	mov.w	r7, #4294967295
 800abde:	4638      	mov	r0, r7
 800abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe2:	bf00      	nop
 800abe4:	0800b55c 	.word	0x0800b55c
 800abe8:	0800b57c 	.word	0x0800b57c
 800abec:	0800b53c 	.word	0x0800b53c

0800abf0 <_write_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4c07      	ldr	r4, [pc, #28]	; (800ac10 <_write_r+0x20>)
 800abf4:	4605      	mov	r5, r0
 800abf6:	4608      	mov	r0, r1
 800abf8:	4611      	mov	r1, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	6022      	str	r2, [r4, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f7f8 fecd 	bl	800399e <_write>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_write_r+0x1e>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_write_r+0x1e>
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	20001988 	.word	0x20001988

0800ac14 <__swsetup_r>:
 800ac14:	4b32      	ldr	r3, [pc, #200]	; (800ace0 <__swsetup_r+0xcc>)
 800ac16:	b570      	push	{r4, r5, r6, lr}
 800ac18:	681d      	ldr	r5, [r3, #0]
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	b125      	cbz	r5, 800ac2a <__swsetup_r+0x16>
 800ac20:	69ab      	ldr	r3, [r5, #24]
 800ac22:	b913      	cbnz	r3, 800ac2a <__swsetup_r+0x16>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f7ff fb91 	bl	800a34c <__sinit>
 800ac2a:	4b2e      	ldr	r3, [pc, #184]	; (800ace4 <__swsetup_r+0xd0>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	d10f      	bne.n	800ac50 <__swsetup_r+0x3c>
 800ac30:	686c      	ldr	r4, [r5, #4]
 800ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	0715      	lsls	r5, r2, #28
 800ac3a:	d42c      	bmi.n	800ac96 <__swsetup_r+0x82>
 800ac3c:	06d0      	lsls	r0, r2, #27
 800ac3e:	d411      	bmi.n	800ac64 <__swsetup_r+0x50>
 800ac40:	2209      	movs	r2, #9
 800ac42:	6032      	str	r2, [r6, #0]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4e:	e03e      	b.n	800acce <__swsetup_r+0xba>
 800ac50:	4b25      	ldr	r3, [pc, #148]	; (800ace8 <__swsetup_r+0xd4>)
 800ac52:	429c      	cmp	r4, r3
 800ac54:	d101      	bne.n	800ac5a <__swsetup_r+0x46>
 800ac56:	68ac      	ldr	r4, [r5, #8]
 800ac58:	e7eb      	b.n	800ac32 <__swsetup_r+0x1e>
 800ac5a:	4b24      	ldr	r3, [pc, #144]	; (800acec <__swsetup_r+0xd8>)
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	bf08      	it	eq
 800ac60:	68ec      	ldreq	r4, [r5, #12]
 800ac62:	e7e6      	b.n	800ac32 <__swsetup_r+0x1e>
 800ac64:	0751      	lsls	r1, r2, #29
 800ac66:	d512      	bpl.n	800ac8e <__swsetup_r+0x7a>
 800ac68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac6a:	b141      	cbz	r1, 800ac7e <__swsetup_r+0x6a>
 800ac6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <__swsetup_r+0x66>
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 f973 	bl	800af60 <_free_r>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	2300      	movs	r3, #0
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f043 0308 	orr.w	r3, r3, #8
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	b94b      	cbnz	r3, 800acae <__swsetup_r+0x9a>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca4:	d003      	beq.n	800acae <__swsetup_r+0x9a>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 f917 	bl	800aedc <__smakebuf_r>
 800acae:	89a2      	ldrh	r2, [r4, #12]
 800acb0:	f012 0301 	ands.w	r3, r2, #1
 800acb4:	d00c      	beq.n	800acd0 <__swsetup_r+0xbc>
 800acb6:	2300      	movs	r3, #0
 800acb8:	60a3      	str	r3, [r4, #8]
 800acba:	6963      	ldr	r3, [r4, #20]
 800acbc:	425b      	negs	r3, r3
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	b953      	cbnz	r3, 800acda <__swsetup_r+0xc6>
 800acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800accc:	d1ba      	bne.n	800ac44 <__swsetup_r+0x30>
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	0792      	lsls	r2, r2, #30
 800acd2:	bf58      	it	pl
 800acd4:	6963      	ldrpl	r3, [r4, #20]
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	e7f2      	b.n	800acc0 <__swsetup_r+0xac>
 800acda:	2000      	movs	r0, #0
 800acdc:	e7f7      	b.n	800acce <__swsetup_r+0xba>
 800acde:	bf00      	nop
 800ace0:	20000018 	.word	0x20000018
 800ace4:	0800b55c 	.word	0x0800b55c
 800ace8:	0800b57c 	.word	0x0800b57c
 800acec:	0800b53c 	.word	0x0800b53c

0800acf0 <_close_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4c06      	ldr	r4, [pc, #24]	; (800ad0c <_close_r+0x1c>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4605      	mov	r5, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	f7f8 fe6b 	bl	80039d6 <_close>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_close_r+0x1a>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_close_r+0x1a>
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	20001988 	.word	0x20001988

0800ad10 <__sflush_r>:
 800ad10:	898a      	ldrh	r2, [r1, #12]
 800ad12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	4605      	mov	r5, r0
 800ad18:	0710      	lsls	r0, r2, #28
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	d458      	bmi.n	800add0 <__sflush_r+0xc0>
 800ad1e:	684b      	ldr	r3, [r1, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	dc05      	bgt.n	800ad30 <__sflush_r+0x20>
 800ad24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dc02      	bgt.n	800ad30 <__sflush_r+0x20>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad32:	2e00      	cmp	r6, #0
 800ad34:	d0f9      	beq.n	800ad2a <__sflush_r+0x1a>
 800ad36:	2300      	movs	r3, #0
 800ad38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad3c:	682f      	ldr	r7, [r5, #0]
 800ad3e:	6a21      	ldr	r1, [r4, #32]
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	d032      	beq.n	800adaa <__sflush_r+0x9a>
 800ad44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	075a      	lsls	r2, r3, #29
 800ad4a:	d505      	bpl.n	800ad58 <__sflush_r+0x48>
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	1ac0      	subs	r0, r0, r3
 800ad50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad52:	b10b      	cbz	r3, 800ad58 <__sflush_r+0x48>
 800ad54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad56:	1ac0      	subs	r0, r0, r3
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad5e:	6a21      	ldr	r1, [r4, #32]
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b0      	blx	r6
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	d106      	bne.n	800ad78 <__sflush_r+0x68>
 800ad6a:	6829      	ldr	r1, [r5, #0]
 800ad6c:	291d      	cmp	r1, #29
 800ad6e:	d848      	bhi.n	800ae02 <__sflush_r+0xf2>
 800ad70:	4a29      	ldr	r2, [pc, #164]	; (800ae18 <__sflush_r+0x108>)
 800ad72:	40ca      	lsrs	r2, r1
 800ad74:	07d6      	lsls	r6, r2, #31
 800ad76:	d544      	bpl.n	800ae02 <__sflush_r+0xf2>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	6062      	str	r2, [r4, #4]
 800ad7c:	04d9      	lsls	r1, r3, #19
 800ad7e:	6922      	ldr	r2, [r4, #16]
 800ad80:	6022      	str	r2, [r4, #0]
 800ad82:	d504      	bpl.n	800ad8e <__sflush_r+0x7e>
 800ad84:	1c42      	adds	r2, r0, #1
 800ad86:	d101      	bne.n	800ad8c <__sflush_r+0x7c>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b903      	cbnz	r3, 800ad8e <__sflush_r+0x7e>
 800ad8c:	6560      	str	r0, [r4, #84]	; 0x54
 800ad8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad90:	602f      	str	r7, [r5, #0]
 800ad92:	2900      	cmp	r1, #0
 800ad94:	d0c9      	beq.n	800ad2a <__sflush_r+0x1a>
 800ad96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad9a:	4299      	cmp	r1, r3
 800ad9c:	d002      	beq.n	800ada4 <__sflush_r+0x94>
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f8de 	bl	800af60 <_free_r>
 800ada4:	2000      	movs	r0, #0
 800ada6:	6360      	str	r0, [r4, #52]	; 0x34
 800ada8:	e7c0      	b.n	800ad2c <__sflush_r+0x1c>
 800adaa:	2301      	movs	r3, #1
 800adac:	4628      	mov	r0, r5
 800adae:	47b0      	blx	r6
 800adb0:	1c41      	adds	r1, r0, #1
 800adb2:	d1c8      	bne.n	800ad46 <__sflush_r+0x36>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0c5      	beq.n	800ad46 <__sflush_r+0x36>
 800adba:	2b1d      	cmp	r3, #29
 800adbc:	d001      	beq.n	800adc2 <__sflush_r+0xb2>
 800adbe:	2b16      	cmp	r3, #22
 800adc0:	d101      	bne.n	800adc6 <__sflush_r+0xb6>
 800adc2:	602f      	str	r7, [r5, #0]
 800adc4:	e7b1      	b.n	800ad2a <__sflush_r+0x1a>
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adcc:	81a3      	strh	r3, [r4, #12]
 800adce:	e7ad      	b.n	800ad2c <__sflush_r+0x1c>
 800add0:	690f      	ldr	r7, [r1, #16]
 800add2:	2f00      	cmp	r7, #0
 800add4:	d0a9      	beq.n	800ad2a <__sflush_r+0x1a>
 800add6:	0793      	lsls	r3, r2, #30
 800add8:	680e      	ldr	r6, [r1, #0]
 800adda:	bf08      	it	eq
 800addc:	694b      	ldreq	r3, [r1, #20]
 800adde:	600f      	str	r7, [r1, #0]
 800ade0:	bf18      	it	ne
 800ade2:	2300      	movne	r3, #0
 800ade4:	eba6 0807 	sub.w	r8, r6, r7
 800ade8:	608b      	str	r3, [r1, #8]
 800adea:	f1b8 0f00 	cmp.w	r8, #0
 800adee:	dd9c      	ble.n	800ad2a <__sflush_r+0x1a>
 800adf0:	4643      	mov	r3, r8
 800adf2:	463a      	mov	r2, r7
 800adf4:	6a21      	ldr	r1, [r4, #32]
 800adf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b0      	blx	r6
 800adfc:	2800      	cmp	r0, #0
 800adfe:	dc06      	bgt.n	800ae0e <__sflush_r+0xfe>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	e78e      	b.n	800ad2c <__sflush_r+0x1c>
 800ae0e:	4407      	add	r7, r0
 800ae10:	eba8 0800 	sub.w	r8, r8, r0
 800ae14:	e7e9      	b.n	800adea <__sflush_r+0xda>
 800ae16:	bf00      	nop
 800ae18:	20400001 	.word	0x20400001

0800ae1c <_fflush_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	690b      	ldr	r3, [r1, #16]
 800ae20:	4605      	mov	r5, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	b1db      	cbz	r3, 800ae5e <_fflush_r+0x42>
 800ae26:	b118      	cbz	r0, 800ae30 <_fflush_r+0x14>
 800ae28:	6983      	ldr	r3, [r0, #24]
 800ae2a:	b90b      	cbnz	r3, 800ae30 <_fflush_r+0x14>
 800ae2c:	f7ff fa8e 	bl	800a34c <__sinit>
 800ae30:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <_fflush_r+0x48>)
 800ae32:	429c      	cmp	r4, r3
 800ae34:	d109      	bne.n	800ae4a <_fflush_r+0x2e>
 800ae36:	686c      	ldr	r4, [r5, #4]
 800ae38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3c:	b17b      	cbz	r3, 800ae5e <_fflush_r+0x42>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae46:	f7ff bf63 	b.w	800ad10 <__sflush_r>
 800ae4a:	4b07      	ldr	r3, [pc, #28]	; (800ae68 <_fflush_r+0x4c>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	d101      	bne.n	800ae54 <_fflush_r+0x38>
 800ae50:	68ac      	ldr	r4, [r5, #8]
 800ae52:	e7f1      	b.n	800ae38 <_fflush_r+0x1c>
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <_fflush_r+0x50>)
 800ae56:	429c      	cmp	r4, r3
 800ae58:	bf08      	it	eq
 800ae5a:	68ec      	ldreq	r4, [r5, #12]
 800ae5c:	e7ec      	b.n	800ae38 <_fflush_r+0x1c>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	bd38      	pop	{r3, r4, r5, pc}
 800ae62:	bf00      	nop
 800ae64:	0800b55c 	.word	0x0800b55c
 800ae68:	0800b57c 	.word	0x0800b57c
 800ae6c:	0800b53c 	.word	0x0800b53c

0800ae70 <_lseek_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4c07      	ldr	r4, [pc, #28]	; (800ae90 <_lseek_r+0x20>)
 800ae74:	4605      	mov	r5, r0
 800ae76:	4608      	mov	r0, r1
 800ae78:	4611      	mov	r1, r2
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	6022      	str	r2, [r4, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f7f8 fdd0 	bl	8003a24 <_lseek>
 800ae84:	1c43      	adds	r3, r0, #1
 800ae86:	d102      	bne.n	800ae8e <_lseek_r+0x1e>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	b103      	cbz	r3, 800ae8e <_lseek_r+0x1e>
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	bd38      	pop	{r3, r4, r5, pc}
 800ae90:	20001988 	.word	0x20001988

0800ae94 <__swhatbuf_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	460e      	mov	r6, r1
 800ae98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	b096      	sub	sp, #88	; 0x58
 800aea0:	4614      	mov	r4, r2
 800aea2:	461d      	mov	r5, r3
 800aea4:	da07      	bge.n	800aeb6 <__swhatbuf_r+0x22>
 800aea6:	2300      	movs	r3, #0
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	89b3      	ldrh	r3, [r6, #12]
 800aeac:	061a      	lsls	r2, r3, #24
 800aeae:	d410      	bmi.n	800aed2 <__swhatbuf_r+0x3e>
 800aeb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb4:	e00e      	b.n	800aed4 <__swhatbuf_r+0x40>
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f000 f8b2 	bl	800b020 <_fstat_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	dbf2      	blt.n	800aea6 <__swhatbuf_r+0x12>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aec6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aeca:	425a      	negs	r2, r3
 800aecc:	415a      	adcs	r2, r3
 800aece:	602a      	str	r2, [r5, #0]
 800aed0:	e7ee      	b.n	800aeb0 <__swhatbuf_r+0x1c>
 800aed2:	2340      	movs	r3, #64	; 0x40
 800aed4:	2000      	movs	r0, #0
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	b016      	add	sp, #88	; 0x58
 800aeda:	bd70      	pop	{r4, r5, r6, pc}

0800aedc <__smakebuf_r>:
 800aedc:	898b      	ldrh	r3, [r1, #12]
 800aede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee0:	079d      	lsls	r5, r3, #30
 800aee2:	4606      	mov	r6, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	d507      	bpl.n	800aef8 <__smakebuf_r+0x1c>
 800aee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	2301      	movs	r3, #1
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	b002      	add	sp, #8
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	ab01      	add	r3, sp, #4
 800aefa:	466a      	mov	r2, sp
 800aefc:	f7ff ffca 	bl	800ae94 <__swhatbuf_r>
 800af00:	9900      	ldr	r1, [sp, #0]
 800af02:	4605      	mov	r5, r0
 800af04:	4630      	mov	r0, r6
 800af06:	f7ff faab 	bl	800a460 <_malloc_r>
 800af0a:	b948      	cbnz	r0, 800af20 <__smakebuf_r+0x44>
 800af0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af10:	059a      	lsls	r2, r3, #22
 800af12:	d4ef      	bmi.n	800aef4 <__smakebuf_r+0x18>
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	e7e3      	b.n	800aee8 <__smakebuf_r+0xc>
 800af20:	4b0d      	ldr	r3, [pc, #52]	; (800af58 <__smakebuf_r+0x7c>)
 800af22:	62b3      	str	r3, [r6, #40]	; 0x28
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	6020      	str	r0, [r4, #0]
 800af28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	9b00      	ldr	r3, [sp, #0]
 800af30:	6163      	str	r3, [r4, #20]
 800af32:	9b01      	ldr	r3, [sp, #4]
 800af34:	6120      	str	r0, [r4, #16]
 800af36:	b15b      	cbz	r3, 800af50 <__smakebuf_r+0x74>
 800af38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 f881 	bl	800b044 <_isatty_r>
 800af42:	b128      	cbz	r0, 800af50 <__smakebuf_r+0x74>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	431d      	orrs	r5, r3
 800af54:	81a5      	strh	r5, [r4, #12]
 800af56:	e7cd      	b.n	800aef4 <__smakebuf_r+0x18>
 800af58:	0800a315 	.word	0x0800a315

0800af5c <__malloc_lock>:
 800af5c:	4770      	bx	lr

0800af5e <__malloc_unlock>:
 800af5e:	4770      	bx	lr

0800af60 <_free_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4605      	mov	r5, r0
 800af64:	2900      	cmp	r1, #0
 800af66:	d045      	beq.n	800aff4 <_free_r+0x94>
 800af68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af6c:	1f0c      	subs	r4, r1, #4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfb8      	it	lt
 800af72:	18e4      	addlt	r4, r4, r3
 800af74:	f7ff fff2 	bl	800af5c <__malloc_lock>
 800af78:	4a1f      	ldr	r2, [pc, #124]	; (800aff8 <_free_r+0x98>)
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	4610      	mov	r0, r2
 800af7e:	b933      	cbnz	r3, 800af8e <_free_r+0x2e>
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	6014      	str	r4, [r2, #0]
 800af84:	4628      	mov	r0, r5
 800af86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8a:	f7ff bfe8 	b.w	800af5e <__malloc_unlock>
 800af8e:	42a3      	cmp	r3, r4
 800af90:	d90c      	bls.n	800afac <_free_r+0x4c>
 800af92:	6821      	ldr	r1, [r4, #0]
 800af94:	1862      	adds	r2, r4, r1
 800af96:	4293      	cmp	r3, r2
 800af98:	bf04      	itt	eq
 800af9a:	681a      	ldreq	r2, [r3, #0]
 800af9c:	685b      	ldreq	r3, [r3, #4]
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	bf04      	itt	eq
 800afa2:	1852      	addeq	r2, r2, r1
 800afa4:	6022      	streq	r2, [r4, #0]
 800afa6:	6004      	str	r4, [r0, #0]
 800afa8:	e7ec      	b.n	800af84 <_free_r+0x24>
 800afaa:	4613      	mov	r3, r2
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	b10a      	cbz	r2, 800afb4 <_free_r+0x54>
 800afb0:	42a2      	cmp	r2, r4
 800afb2:	d9fa      	bls.n	800afaa <_free_r+0x4a>
 800afb4:	6819      	ldr	r1, [r3, #0]
 800afb6:	1858      	adds	r0, r3, r1
 800afb8:	42a0      	cmp	r0, r4
 800afba:	d10b      	bne.n	800afd4 <_free_r+0x74>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	4401      	add	r1, r0
 800afc0:	1858      	adds	r0, r3, r1
 800afc2:	4282      	cmp	r2, r0
 800afc4:	6019      	str	r1, [r3, #0]
 800afc6:	d1dd      	bne.n	800af84 <_free_r+0x24>
 800afc8:	6810      	ldr	r0, [r2, #0]
 800afca:	6852      	ldr	r2, [r2, #4]
 800afcc:	605a      	str	r2, [r3, #4]
 800afce:	4401      	add	r1, r0
 800afd0:	6019      	str	r1, [r3, #0]
 800afd2:	e7d7      	b.n	800af84 <_free_r+0x24>
 800afd4:	d902      	bls.n	800afdc <_free_r+0x7c>
 800afd6:	230c      	movs	r3, #12
 800afd8:	602b      	str	r3, [r5, #0]
 800afda:	e7d3      	b.n	800af84 <_free_r+0x24>
 800afdc:	6820      	ldr	r0, [r4, #0]
 800afde:	1821      	adds	r1, r4, r0
 800afe0:	428a      	cmp	r2, r1
 800afe2:	bf04      	itt	eq
 800afe4:	6811      	ldreq	r1, [r2, #0]
 800afe6:	6852      	ldreq	r2, [r2, #4]
 800afe8:	6062      	str	r2, [r4, #4]
 800afea:	bf04      	itt	eq
 800afec:	1809      	addeq	r1, r1, r0
 800afee:	6021      	streq	r1, [r4, #0]
 800aff0:	605c      	str	r4, [r3, #4]
 800aff2:	e7c7      	b.n	800af84 <_free_r+0x24>
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	20000ff8 	.word	0x20000ff8

0800affc <_read_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4c07      	ldr	r4, [pc, #28]	; (800b01c <_read_r+0x20>)
 800b000:	4605      	mov	r5, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	6022      	str	r2, [r4, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f8 fcaa 	bl	8003964 <_read>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_read_r+0x1e>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	b103      	cbz	r3, 800b01a <_read_r+0x1e>
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	20001988 	.word	0x20001988

0800b020 <_fstat_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4c07      	ldr	r4, [pc, #28]	; (800b040 <_fstat_r+0x20>)
 800b024:	2300      	movs	r3, #0
 800b026:	4605      	mov	r5, r0
 800b028:	4608      	mov	r0, r1
 800b02a:	4611      	mov	r1, r2
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	f7f8 fcde 	bl	80039ee <_fstat>
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	d102      	bne.n	800b03c <_fstat_r+0x1c>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	b103      	cbz	r3, 800b03c <_fstat_r+0x1c>
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	bd38      	pop	{r3, r4, r5, pc}
 800b03e:	bf00      	nop
 800b040:	20001988 	.word	0x20001988

0800b044 <_isatty_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4c06      	ldr	r4, [pc, #24]	; (800b060 <_isatty_r+0x1c>)
 800b048:	2300      	movs	r3, #0
 800b04a:	4605      	mov	r5, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	f7f8 fcdd 	bl	8003a0e <_isatty>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_isatty_r+0x1a>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_isatty_r+0x1a>
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	20001988 	.word	0x20001988

0800b064 <_init>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr

0800b070 <_fini>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	bf00      	nop
 800b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b076:	bc08      	pop	{r3}
 800b078:	469e      	mov	lr, r3
 800b07a:	4770      	bx	lr
